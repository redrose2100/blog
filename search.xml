<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS基础系列(5)--CSS常用操作</title>
      <link href="/blog/2020/09/24/CSS%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--CSS%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/2020/09/24/CSS%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--CSS%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h4 id="1-对齐"><a href="#1-对齐" class="headerlink" title="1 对齐"></a>1 对齐</h4><ul><li>使用margin属性进行水平对齐</li></ul><p>举例如下，index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;div&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    margin: 0px;</span><br><span class="line">&#125;</span><br><span class="line">.div&#123;</span><br><span class="line">    width: 70%;</span><br><span class="line">    height: 1000px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    margin-left:auto;</span><br><span class="line">    margin-right: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用position属性进行做所有对齐</li></ul><p>将css更新为如下内容：即可实现居右对齐</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    margin: 0px;</span><br><span class="line">&#125;</span><br><span class="line">.div&#123;</span><br><span class="line">    width: 70%;</span><br><span class="line">    height: 1000px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用float属性进行左右对齐</li></ul><p>更新css内容如下，即可实现居左对齐</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    margin: 0px;</span><br><span class="line">&#125;</span><br><span class="line">.div&#123;</span><br><span class="line">    width: 70%;</span><br><span class="line">    height: 1000px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-尺寸"><a href="#2-尺寸" class="headerlink" title="2 尺寸"></a>2 尺寸</h4><p>常用的属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">height                      设置元素高度        </span><br><span class="line">line-height                 设置行高</span><br><span class="line">max-height                  设置元素最大高度</span><br><span class="line">max-width                   设置元素最大宽度</span><br><span class="line">min-width                   设置元素最小宽度</span><br><span class="line">min-height                  设置元素最小高度</span><br><span class="line">width                       设置元素宽度</span><br></pre></td></tr></table></figure><p>举例index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;p1&quot;&gt;观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸</span><br><span class="line">        观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸</span><br><span class="line">        观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;p2&quot;&gt;观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸</span><br><span class="line">        观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸</span><br><span class="line">        观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;p3&quot;&gt;观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸</span><br><span class="line">        观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸</span><br><span class="line">        观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸观察尺寸</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.p1&#123;</span><br><span class="line">    width: 500px;</span><br><span class="line">    line-height:normal;</span><br><span class="line">    max-width: 300px;</span><br><span class="line">&#125;</span><br><span class="line">.p2&#123;</span><br><span class="line">    width: 1000px;</span><br><span class="line">    line-height: 200%;</span><br><span class="line">&#125;</span><br><span class="line">.p3&#123;</span><br><span class="line">    width: 1500px;</span><br><span class="line">    line-height: 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-分类"><a href="#3-分类" class="headerlink" title="3 分类"></a>3 分类</h4><p>分类常用的属性如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">clear               设置一个元素的侧面是否允许其他的浮动元素</span><br><span class="line">cursor              规定当指向某元素之上时显示的指针类型    </span><br><span class="line">display             设置是否及如何显示元素</span><br><span class="line">float               定义元素在那个方向浮动</span><br><span class="line">position            把元素放置到一个静态的、相对的、绝对的、固定的位置</span><br><span class="line">visibility          设置元素是否可见或者不可见</span><br></pre></td></tr></table></figure><p>cursor属性举例，index.html如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;hellohellohellohello&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">    cursor: help;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>display属性举例如下；index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;hello&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;hello&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;hello&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;hello&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css样式内容如下：inline的属性值经常被用例设置导航栏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">li&#123;</span><br><span class="line">    display: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>visibility属性举例如下，index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;hello&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li class&#x3D;&quot;no&quot;&gt;hello&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;hello&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;hello&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css样式文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.no&#123;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-导航栏"><a href="#4-导航栏" class="headerlink" title="4 导航栏"></a>4 导航栏</h4><ul><li>垂直导航栏</li></ul><p>举例如下，index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;&quot;&gt;导航1&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;&quot;&gt;导航2&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;&quot;&gt;导航3&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href&#x3D;&quot;&quot;&gt;导航4&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css样式文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ul&#123;</span><br><span class="line">    list-style-type: none;</span><br><span class="line">    margin: 0px;</span><br><span class="line">    padding: 0px;</span><br><span class="line">&#125;</span><br><span class="line">a:link,a:visited&#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    display: block;</span><br><span class="line">    background-color: black;</span><br><span class="line">    color: white;</span><br><span class="line">    width: 50px;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">a:active,a:hover&#123;</span><br><span class="line">    background-color: cornflowerblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>水平导航栏</li></ul><p>将css文件更新如下即可成为水平导航栏的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ul&#123;</span><br><span class="line">    list-style-type: none;</span><br><span class="line">    margin: 0px;</span><br><span class="line">    padding: 0px;</span><br><span class="line">    background-color: black;</span><br><span class="line">    width: 300px;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">a:link,a:visited&#123;</span><br><span class="line">    font-weight: bold;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    background-color: black;</span><br><span class="line">    color: white;</span><br><span class="line">    width: 50px;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">a:active,a:hover&#123;</span><br><span class="line">    background-color: cornflowerblue;</span><br><span class="line">&#125;</span><br><span class="line">li&#123;</span><br><span class="line">    display: inline;</span><br><span class="line">    padding: 3px;</span><br><span class="line">    padding-left: 5px;</span><br><span class="line">    padding-right: 5px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-图片"><a href="#4-图片" class="headerlink" title="4 图片"></a>4 图片</h4><p>下面使用一个例子演示图片的处理，index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;image&quot;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot; target&#x3D;&quot;_self&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot; alt&#x3D;&quot;美女照片&quot; width&#x3D;&quot;150px&quot; height&#x3D;&quot;220px&quot;&gt;</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">            女神照片</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;image&quot;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot; target&#x3D;&quot;_self&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot; alt&#x3D;&quot;美女照片&quot; width&#x3D;&quot;150px&quot; height&#x3D;&quot;220px&quot;&gt;</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">            女神照片</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;image&quot;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot; target&#x3D;&quot;_self&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot; alt&#x3D;&quot;美女照片&quot; width&#x3D;&quot;150px&quot; height&#x3D;&quot;220px&quot;&gt;</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">            女神照片</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;image&quot;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot; target&#x3D;&quot;_self&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot; alt&#x3D;&quot;美女照片&quot; width&#x3D;&quot;150px&quot; height&#x3D;&quot;220px&quot;&gt;</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">            女神照片</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;image&quot;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot; target&#x3D;&quot;_self&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot; alt&#x3D;&quot;美女照片&quot; width&#x3D;&quot;150px&quot; height&#x3D;&quot;220px&quot;&gt;</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">            女神照片</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;image&quot;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot; target&#x3D;&quot;_self&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot; alt&#x3D;&quot;美女照片&quot; width&#x3D;&quot;150px&quot; height&#x3D;&quot;220px&quot;&gt;</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">            女神照片</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;image&quot;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot; target&#x3D;&quot;_self&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot; alt&#x3D;&quot;美女照片&quot; width&#x3D;&quot;150px&quot; height&#x3D;&quot;220px&quot;&gt;</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">            女神照片</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;image&quot;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot; target&#x3D;&quot;_self&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot; alt&#x3D;&quot;美女照片&quot; width&#x3D;&quot;150px&quot; height&#x3D;&quot;220px&quot;&gt;</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">            女神照片</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;image&quot;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot; target&#x3D;&quot;_self&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot; alt&#x3D;&quot;美女照片&quot; width&#x3D;&quot;150px&quot; height&#x3D;&quot;220px&quot;&gt;</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">            女神照片</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;image&quot;&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot; target&#x3D;&quot;_self&quot;&gt;</span><br><span class="line">            &lt;img src&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot; alt&#x3D;&quot;美女照片&quot; width&#x3D;&quot;150px&quot; height&#x3D;&quot;220px&quot;&gt;</span><br><span class="line">        &lt;&#x2F;a&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;text&quot;&gt;</span><br><span class="line">            女神照片</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css样式文件的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.image&#123;</span><br><span class="line">    border:1px solid darkgrey;</span><br><span class="line">    width: auto;</span><br><span class="line">    height: auto;</span><br><span class="line">    float: left;</span><br><span class="line">    text-align: center;</span><br><span class="line">    margin :5px;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line">    margin: 5px;</span><br><span class="line">    opacity: 0.8;</span><br><span class="line">&#125;</span><br><span class="line">.text&#123;</span><br><span class="line">    font-size: 12px;</span><br><span class="line">    margin-bottom: 5px;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    margin:10px auto;</span><br><span class="line">    width: 60%;</span><br><span class="line">    height: auto;</span><br><span class="line">&#125;</span><br><span class="line">a:hover&#123;</span><br><span class="line">    background-color: cornflowerblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础系列(4)--CSS盒子模型</title>
      <link href="/blog/2020/09/24/CSS%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/blog/2020/09/24/CSS%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="1-CSS盒子模型概述"><a href="#1-CSS盒子模型概述" class="headerlink" title="1 CSS盒子模型概述"></a>1 CSS盒子模型概述</h4><ul><li>margin 外边距</li><li>border 边框</li><li>padding 内边距</li><li>content 内容</li></ul><h4 id="2-CSS内边距"><a href="#2-CSS内边距" class="headerlink" title="2 CSS内边距"></a>2 CSS内边距</h4><p>内边距在content外，在边框内部</p><p>内边距属性有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">padding</span><br><span class="line">padding-botton</span><br><span class="line">padding-left</span><br><span class="line">padding-right</span><br><span class="line">padding-top</span><br></pre></td></tr></table></figure><p>举例如下，index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;内边距&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">td&#123;</span><br><span class="line">    padding-right: 100px;</span><br><span class="line">    padding-left: 50px;</span><br><span class="line">    padding-top:25px;</span><br><span class="line">    padding-bottom: 13px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-CSS边框"><a href="#3-CSS边框" class="headerlink" title="3 CSS边框"></a>3 CSS边框</h4><ul><li><p>CSS边框可以创建出效果出色的边框，并且可以应用于任何元素</p></li><li><p>border-style 定义了十多种不同的非继承样式，包括none</p><ul><li>border-top-style</li><li>border-left-style</li><li>border-right-style</li><li>botder-bottom-style</li></ul></li><li><p>border-width 定义边框的宽度</p><ul><li>border-top-width</li><li>border-left-width</li><li>border-right-width</li><li>border-bottom-width</li></ul></li><li><p>border-color 定义边框的颜色</p><ul><li>border-top-color</li><li>border-left-color</li><li>border-right-color</li><li>border-bottom-color</li></ul></li><li><p>CSS3边框</p><ul><li>border-radius：圆角边框</li><li>border-shadow：边框阴影</li><li>border-image：边框图片</li></ul></li></ul><p>举例如下，index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;CSS边框&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">    border-style: dotted;</span><br><span class="line">    border-color:red;</span><br><span class="line">    border-width: 10px;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-CSS外边距"><a href="#4-CSS外边距" class="headerlink" title="4 CSS外边距"></a>4 CSS外边距</h4><p>围绕在内容边框的区域就是外边距，外边距默认为透明区域，外边距接受任何长度单位，百分数值</p><p>外边距常用属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">margin                      设置所有边距</span><br><span class="line">margin-button               设置底边距</span><br><span class="line">margin-left                 设置左边距</span><br><span class="line">margin-right                设置右边距</span><br><span class="line">margin-top                  设置上边距</span><br></pre></td></tr></table></figure><p>举例如下：index.html的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;mg&quot;&gt;外边距&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    margin: 0px;</span><br><span class="line">&#125;</span><br><span class="line">.mg&#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">    width:100px;</span><br><span class="line">    height:100px;</span><br><span class="line">    margin:100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-CSS外边距合并"><a href="#5-CSS外边距合并" class="headerlink" title="5 CSS外边距合并"></a>5 CSS外边距合并</h4><p>下面的例子中，外边距设置了100，但是两个div块之间的举例通过观察明显也是100，这就是外边距合并的效果<br>index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;bd&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;pd&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">                    Hello World</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;bd&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;pd&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;content&quot;&gt;</span><br><span class="line">                    Hello World</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    margin: 0px;</span><br><span class="line">&#125;</span><br><span class="line">.container&#123;</span><br><span class="line">    margin: 100px;</span><br><span class="line">&#125;</span><br><span class="line">.bd&#123;</span><br><span class="line">    border-style: groove;</span><br><span class="line">&#125;</span><br><span class="line">.pd&#123;</span><br><span class="line">    padding:10px;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-盒子模型的应用"><a href="#6-盒子模型的应用" class="headerlink" title="6 盒子模型的应用"></a>6 盒子模型的应用</h4><p>下面代码是模仿一个网站的首页布局，利用盒子模型大概设计的的分块的代码</p><p>index.html如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;top&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;top_conetent&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;body&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;body_image&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class&#x3D;&quot;body-content&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;body-no&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;footing&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;footing_content&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;footing_menu&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    margin: 0px;</span><br><span class="line">    padding: 0px;</span><br><span class="line">&#125;</span><br><span class="line">.top&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height:60px;</span><br><span class="line">    background-color: black;</span><br><span class="line">&#125;</span><br><span class="line">.top_conetent&#123;</span><br><span class="line">    width: 75%;</span><br><span class="line">    height: 60px;</span><br><span class="line">    margin: 0px auto;</span><br><span class="line">    background-color: darkgrey;</span><br><span class="line">&#125;</span><br><span class="line">.body&#123;</span><br><span class="line">    margin: 20px auto;</span><br><span class="line">    width: 75%;</span><br><span class="line">    height: 1500px;</span><br><span class="line">    background-color: cornflowerblue;</span><br><span class="line">&#125;</span><br><span class="line">.body_image&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 400px;</span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line">.body-content&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 1100px;</span><br><span class="line">    background-color: green;</span><br><span class="line">&#125;</span><br><span class="line">.body-no&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">.footing&#123;</span><br><span class="line">    width: 75%;</span><br><span class="line">    height:400px;</span><br><span class="line">    margin: 0px auto;</span><br><span class="line">    background-color: aqua;</span><br><span class="line">&#125;</span><br><span class="line">.footing_content&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 330px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">.footing_menu&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height:70px;</span><br><span class="line">    background-color: black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础系列(3)--CSS定位和浮动</title>
      <link href="/blog/2020/09/22/CSS%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--CSS%E5%AE%9A%E4%BD%8D%E5%92%8C%E6%B5%AE%E5%8A%A8/"/>
      <url>/blog/2020/09/22/CSS%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--CSS%E5%AE%9A%E4%BD%8D%E5%92%8C%E6%B5%AE%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-CSS-定位"><a href="#1-CSS-定位" class="headerlink" title="1 CSS 定位"></a>1 CSS 定位</h4><ul><li><p>CSS定位改变元素在页面上的位置</p></li><li><p>CSS定位机制：</p><ul><li>普通流：元素按照其在HTML中的位置顺序决定排布的过程</li><li>浮动：</li><li>绝对布局</li></ul></li><li><p>CSS定位属性常用的有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">position                把元素放在一个静态的、相对的、绝对的、固定的位置中</span><br><span class="line">top                     元素向上的偏移量</span><br><span class="line">left                    元素向左的偏移量</span><br><span class="line">right                   元素向右的偏移量</span><br><span class="line">bottom                  元素向下的偏移量</span><br><span class="line">overflow                设置元素溢出其区域发生的事情</span><br><span class="line">clip                    设置元素显示的形状</span><br><span class="line">vertical-align          设置元素垂直对齐方式</span><br><span class="line">z-index                 设置元素的堆叠顺序</span><br></pre></td></tr></table></figure></li><li><p>CSS position属性：<br>index.html 文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;position1&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        for(var i&#x3D;0;i&lt;100;i++)&#123;</span><br><span class="line">            document.write(i+&quot;&lt;br&#x2F;&gt;&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>static</p></li></ul><p>更新css文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#position1&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: grey;</span><br><span class="line">    position: static;</span><br><span class="line">    left:100px;</span><br><span class="line">    top:200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>relative</p><p>更新css文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#position1&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: grey;</span><br><span class="line">    position: relative;</span><br><span class="line">    left:100px;</span><br><span class="line">    top:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>absolute</p><p>更新css内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#position1&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: grey;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left:100px;</span><br><span class="line">    top:20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fixed</p><p>更新css内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#position1&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: grey;</span><br><span class="line">    position: fixed;</span><br><span class="line">    left:100px;</span><br><span class="line">    top:200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>z-index 当右多个块时，z-index大的在前面</p><p>index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;position1&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;position2&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        for(var i&#x3D;0;i&lt;100;i++)&#123;</span><br><span class="line">            document.write(i+&quot;&lt;br&#x2F;&gt;&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#position1&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: grey;</span><br><span class="line">    position: relative;</span><br><span class="line">    left:100px;</span><br><span class="line">    top:200px;</span><br><span class="line">    z-index: 2;</span><br><span class="line">&#125;</span><br><span class="line">#position2&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    position: relative;</span><br><span class="line">    left:100px;</span><br><span class="line">    top:150px;</span><br><span class="line">    z-index: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-CSS-浮动"><a href="#2-CSS-浮动" class="headerlink" title="2 CSS 浮动"></a>2 CSS 浮动</h4><p>float属性可用的值有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left                    元素向左浮动</span><br><span class="line">right                   元素向右浮动</span><br><span class="line">none                    元素不浮动</span><br><span class="line">inherit                 从父级继承浮动属性</span><br></pre></td></tr></table></figure><p>举例1如下，index.html代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;fd&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;sd&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;td&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#fd&#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: grey;</span><br><span class="line">    float:left;</span><br><span class="line">&#125;</span><br><span class="line">#sd&#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">#td&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: green;</span><br><span class="line">    float:left;</span><br><span class="line">&#125;</span><br><span class="line">#container&#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 1000px;</span><br><span class="line">    background-color: lightsteelblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clear属性： 去掉浮动属性（包括继承来的属性）</p><p>clear属性值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">left                    去掉元素向左浮动</span><br><span class="line">right                   去掉元素向右浮动</span><br><span class="line">both                    去掉元素左右左侧浮动</span><br><span class="line">inherit                 从父级继承来的clear的值</span><br></pre></td></tr></table></figure><p>举例如下，index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;fd&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;sd&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;td&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;text&quot;&gt;Hello world hahahah&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>css内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#fd&#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: grey;</span><br><span class="line">    float:left;</span><br><span class="line">&#125;</span><br><span class="line">#sd&#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: red;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line">#td&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background-color: green;</span><br><span class="line">    float:left;</span><br><span class="line">&#125;</span><br><span class="line">#container&#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 1000px;</span><br><span class="line">    background-color: lightsteelblue;</span><br><span class="line">&#125;</span><br><span class="line">#text&#123;</span><br><span class="line">    clear:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础系列(2)--CSS样式背景、文本、字体、链接、列表、表格、轮廓</title>
      <link href="/blog/2020/09/21/CSS%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--CSS%E6%A0%B7%E5%BC%8F%E8%83%8C%E6%99%AF%E3%80%81%E6%96%87%E6%9C%AC%E3%80%81%E5%AD%97%E4%BD%93%E3%80%81%E9%93%BE%E6%8E%A5%E3%80%81%E5%88%97%E8%A1%A8%E3%80%81%E8%A1%A8%E6%A0%BC%E3%80%81%E8%BD%AE%E5%BB%93/"/>
      <url>/blog/2020/09/21/CSS%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--CSS%E6%A0%B7%E5%BC%8F%E8%83%8C%E6%99%AF%E3%80%81%E6%96%87%E6%9C%AC%E3%80%81%E5%AD%97%E4%BD%93%E3%80%81%E9%93%BE%E6%8E%A5%E3%80%81%E5%88%97%E8%A1%A8%E3%80%81%E8%A1%A8%E6%A0%BC%E3%80%81%E8%BD%AE%E5%BB%93/</url>
      
        <content type="html"><![CDATA[<h4 id="1-CSS背景"><a href="#1-CSS背景" class="headerlink" title="1 CSS背景"></a>1 CSS背景</h4><ul><li>背景：<br> CSS允许应用纯色作为背景，也允许使用背景图像创建相当复杂的效果</li></ul><p>常见的背景属性：</p><ul><li><p>background-color                    设置元素的背景颜色<br>demo.css代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background-color: grey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt; 测试背景是否可以继承 &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>可见，背景颜色也是可以继承的</p></li><li><p>background-image                    把图片设置为背景<br>index.html文件保持不变，值只改变css文件内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background-image: url(&quot;statics&#x2F;image&#x2F;0001.jpg&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>background-position                 设置背景图片的起始位置<br>只修改demo.css文件观察效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background-image: url(&quot;statics&#x2F;image&#x2F;0001.jpg&quot;);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-position: center top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>background-repeat                   设置背景图片是否及如何重复<br>只修改css文件观察效果，其中background-repeat属性可以有好多中值可以设置，可以通过IDE设置后观察</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background-image: url(&quot;statics&#x2F;image&#x2F;0001.jpg&quot;);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>background-attachment               背景图像是否固定或者随着页面的其余部分滚动<br>如下设置，可以设置图片随着页面滚动而滚动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background-image: url(&quot;statics&#x2F;image&#x2F;0001.jpg&quot;);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment: scroll;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>background-size                     规定背景图片的尺寸<br>如下可以设置图片的尺寸</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    background-image: url(&quot;statics&#x2F;image&#x2F;0001.jpg&quot;);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-size:1000px 1000px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>background-origin                   规定背景图片的定位区域</p></li><li><p>background-clip                     规定背景的绘制区域</p><h4 id="2-CSS文本"><a href="#2-CSS文本" class="headerlink" title="2 CSS文本"></a>2 CSS文本</h4></li><li><p>CSS文本属性可定义文本外观</p></li><li><p>通过文本属性，可以改变文本的颜色、字符间距、对齐文本、装饰文本、对文本缩进</p></li></ul><p>文本的常用属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">color               文本颜色</span><br><span class="line">direction           文本方向</span><br><span class="line">line-height         行高</span><br><span class="line">letter-spacing      字符间距</span><br><span class="line">text-align          对齐元素中的文本</span><br><span class="line">text-decoration     向文本添加装饰</span><br><span class="line">text-indent         缩进元素中文本的首行</span><br><span class="line">text-transform      元素中的字母</span><br><span class="line">unicode-bidi        设置文本方向</span><br><span class="line">white-space         元素中空白的处理方式</span><br><span class="line">word-spacing        字间距</span><br></pre></td></tr></table></figure><p>CSS3 提供的特别的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text-shadow         向文本添加阴影</span><br><span class="line">word-wrap           规定文本的换行规则</span><br></pre></td></tr></table></figure><p>demo.css中代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">h1&#123;</span><br><span class="line">    color:green;</span><br><span class="line">    text-align: center;</span><br><span class="line">    text-shadow: 5px 5px 1px red;</span><br><span class="line">&#125;</span><br><span class="line">p&#123;</span><br><span class="line">    width: 20em;</span><br><span class="line">    text-align: left;</span><br><span class="line">    text-indent: 2em;</span><br><span class="line">    text-transform: capitalize;</span><br><span class="line">    word-wrap: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html文件中的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt; h1 title&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;段落测试段落测试段落测试段落测试段落测试段落测试段落测试段落测试段落测试段落测试段落测试&lt;&#x2F;p&gt;</span><br><span class="line">    段落测试段落测试段落测试段落测试段落测试段落测试段落测试段落测试段落测试段落测试段落测试</span><br><span class="line">    &lt;p &gt;this is my first Paragph&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="3-CSS字体"><a href="#3-CSS字体" class="headerlink" title="3 CSS字体"></a>3 CSS字体</h4><ul><li>CSS字体属性定义文本的字体系列、大小、加粗、风格和变形</li></ul><p>常用的字体属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">font-family                 设置字体系列</span><br><span class="line">font-size                   设置字体的尺寸</span><br><span class="line">font-style                  设置字体的风格</span><br><span class="line">font-variant                以小型大写字体或正常字体显示文本</span><br><span class="line">font-weight                 设置字体的粗细</span><br></pre></td></tr></table></figure><p>demo.css代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    font-family: Arial;</span><br><span class="line">    font-variant: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;hello world&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="4-CSS链接"><a href="#4-CSS链接" class="headerlink" title="4 CSS链接"></a>4 CSS链接</h4><p>CSS链接的四种状态：</p><ul><li>a:link 普通的、未被访问的链接</li><li>a:visited 用户已访问过的链接</li><li>a:hover 鼠标指针位于链接的上方</li><li>a:actve 链接被点击的时刻</li></ul><p>常用的链接方式：</p><ul><li>text-decoration 属性大多用于去掉链接中的下划线</li></ul><p>设置背景颜色：</p><ul><li>background-color</li></ul><p>举例如下：demo.css内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a:link&#123;</span><br><span class="line">    color:red;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">a:visited&#123;</span><br><span class="line">    color: green;</span><br><span class="line">&#125;</span><br><span class="line">a:hover&#123;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br><span class="line">a:active&#123;</span><br><span class="line">    color: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot; target&#x3D;&quot;_blank&quot;&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="5-CSS列表"><a href="#5-CSS列表" class="headerlink" title="5 CSS列表"></a>5 CSS列表</h4><p>CSS列表属性允许你放置、改变列表标志，或者将图像作为列表项标志</p><p>常用的CSS列表属性有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list-stype                  简写列表项</span><br><span class="line">list-style-image            列表项图像</span><br><span class="line">list-style-position         列表标志位置</span><br><span class="line">list-style-type             列表类型</span><br></pre></td></tr></table></figure><p>举例index.html代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt; 列表1 &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt; 列表2 &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt; 列表3 &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt; 列表4 &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>下面通过改变不同css样式来观察效果：<br>demo.css如下：表示列表项用数字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ul li&#123;</span><br><span class="line">    list-style-type:decimal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改变CSS样式可以让列表项用图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ul li&#123;</span><br><span class="line">    list-style-image:url(&quot;statics&#x2F;image&#x2F;0001.jpg&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续修改参css样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ul li&#123;</span><br><span class="line">    list-style-position: inside;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-CSS表格"><a href="#6-CSS表格" class="headerlink" title="6 CSS表格"></a>6 CSS表格</h4><ul><li>CSS表格属性可以帮助我们极大的改善表格的外观</li></ul><p>首先建立index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table id&#x3D;&quot;tb&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;年龄&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;性别&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;张三&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;100&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;男&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;李四&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;10&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;男&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;王五&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;30&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;女&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>表格边框</li></ul><p>通过css样式设置边框：<br>demo.css内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#tb,tr,th,td&#123;</span><br><span class="line">    border: 1px solid grey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>折叠边框</li></ul><p>修改css样式即可改变表格为单条线，即折叠边框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#tb,tr,th,td&#123;</span><br><span class="line">    border: 1px solid grey;</span><br><span class="line">&#125;</span><br><span class="line">#tb&#123;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表格宽高</li></ul><p>继续修改css样式设置宽和高</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#tb,tr,th,td&#123;</span><br><span class="line">    border: 1px solid grey;</span><br><span class="line">&#125;</span><br><span class="line">#tb&#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表格文本对齐</li></ul><p>继续修改样式，设置对齐格式，比如居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#tb,tr,th,td&#123;</span><br><span class="line">    border: 1px solid grey;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">#tb&#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>表格内边距</p></li><li><p>表格颜色</p></li></ul><p>继续修改样式可以设置表格背景颜色</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#tb,tr,th,td&#123;</span><br><span class="line">    border: 1px solid grey;</span><br><span class="line">    text-align: center;</span><br><span class="line">    background-color: lightsteelblue;</span><br><span class="line">&#125;</span><br><span class="line">#tb&#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">    height: 400px;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-CSS轮廓"><a href="#7-CSS轮廓" class="headerlink" title="7 CSS轮廓"></a>7 CSS轮廓</h4><p>轮廓主要用例突出元素的作用</p><p>常用的属性如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">outline                 设置轮廓属性</span><br><span class="line">outline-colr            设置轮廓的颜色</span><br><span class="line">outline-style           设置轮廓的样式</span><br><span class="line">outline-width           设置轮廓的宽度</span><br></pre></td></tr></table></figure><p>例如：<br>index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;demo.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;这是用于测试轮廓的字符&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>demo.css样式内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">    outline-style: dotted;</span><br><span class="line">    outline-width: 1px;</span><br><span class="line">    outline-color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS基础系列(1)--简介、基础语法、高级语法、选择器</title>
      <link href="/blog/2020/09/21/CSS%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E3%80%81%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E3%80%81%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/blog/2020/09/21/CSS%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--%E7%AE%80%E4%BB%8B%E3%80%81%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E3%80%81%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E3%80%81%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-CSS介绍"><a href="#1-CSS介绍" class="headerlink" title="1 CSS介绍"></a>1 CSS介绍</h4><ul><li>CSS概述：<ul><li>CSS 指层叠样式表</li><li>CSS 样式表极大地提高了工作效率</li></ul></li></ul><h4 id="2-CSS基础语法"><a href="#2-CSS基础语法" class="headerlink" title="2 CSS基础语法"></a>2 CSS基础语法</h4><p>如果属性个数大于1，中间用分号分隔</p><p>如果值大于1个单词，则需要加上引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">基础语法：</span><br><span class="line">selector&#123;</span><br><span class="line">    propoerty：value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">h1&#123;</span><br><span class="line">    color:red;</span><br><span class="line">    font-size:14px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p&#123;</span><br><span class="line">    font-family:&quot;sans serif&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用举例：<br>首先创建一个css文件，比如demo.css，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h1&#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个用于演示css样式的index.html，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;demo.css&quot; type&#x3D;&quot;text&#x2F;css&quot; rel&#x3D;&quot;stylesheet&quot;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;H1 标题&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在浏览器中打开发现已经成功将h1的标题颜色修改为红色了</p><h4 id="3-CSS高级语法"><a href="#3-CSS高级语法" class="headerlink" title="3 CSS高级语法"></a>3 CSS高级语法</h4><ul><li>选择器的分组：<br>  h1,h2,h3,h4,h5,h6{color:red;}</li></ul><p>如demo.css代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h1,h2,h3,p&#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;demo.css&quot; type&#x3D;&quot;text&#x2F;css&quot; rel&#x3D;&quot;stylesheet&quot;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;H1 标题&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h2&gt;H2 标题&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;h3&gt;H3 标题&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;p&gt;段落&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>可以发现，这里多个标签元素都已经被设置了样式</p><ul><li>继承：<br>  body{<pre><code>color:green;</code></pre>  }</li></ul><p>比如demo.css如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h1,h2,h3&#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-size: 50px;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    color:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;demo.css&quot; type&#x3D;&quot;text&#x2F;css&quot; rel&#x3D;&quot;stylesheet&quot;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;H1 标题&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;h2&gt;H2 标题&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;h3&gt;H3 标题&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;p&gt;段落&lt;&#x2F;p&gt;</span><br><span class="line">    文章</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>可见，这里所说的继承可以理解为最小原则，即如果p元素没有自己的样式，才会继承body<br>的演示，反之像h1元素有自己的样式，则不会继承body的样式</p><h4 id="4-CSS派生选择器"><a href="#4-CSS派生选择器" class="headerlink" title="4 CSS派生选择器"></a>4 CSS派生选择器</h4><ul><li>派生选择器：通过依据元素在其位置的上下文关系定义样式</li></ul><p>demo.css文件代码如下：这里定义了li 标签下面的strong标签内的元素样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">li strong&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br><span class="line">strong&#123;</span><br><span class="line">    color:blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;demo.css&quot; type&#x3D;&quot;text&#x2F;css&quot; rel&#x3D;&quot;stylesheet&quot;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;p&gt;&lt;strong&gt;Hello World&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;strong&gt;hello li&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>可以看出列表中的strong是红色，p元素中的strong中的颜色为蓝色</p><h4 id="5-CSSid选择器"><a href="#5-CSSid选择器" class="headerlink" title="5 CSSid选择器"></a>5 CSSid选择器</h4><ul><li>id选择器：<ul><li>id选择器可以为标有id的HTML元素指定特定的样式</li><li>id选择器以“#”来定义的</li></ul></li></ul><p>demo.css文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#pid&#123;</span><br><span class="line">    color:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;demo.css&quot; type&#x3D;&quot;text&#x2F;css&quot; rel&#x3D;&quot;stylesheet&quot;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p id&#x3D;&quot;pid&quot;&gt;Hello World&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>id选择器和派生选择器：<ul><li>目前比较常用的方式是id选择器，常常用于建立派生选择器</li></ul></li></ul><p>demo.css内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#pid a&#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;demo.css&quot; type&#x3D;&quot;text&#x2F;css&quot; rel&#x3D;&quot;stylesheet&quot;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id&#x3D;&quot;pid&quot;&gt; hello world &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="6-CSS类选择器"><a href="#6-CSS类选择器" class="headerlink" title="6 CSS类选择器"></a>6 CSS类选择器</h4><ul><li>类选择器：<ul><li>类选择器以一个点显示</li></ul></li></ul><p>demo.css内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.pclass&#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;demo.css&quot; type&#x3D;&quot;text&#x2F;css&quot; rel&#x3D;&quot;stylesheet&quot;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;pclass&quot;&gt;Hello World&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>class也可以作为派生选择器</li></ul><p>demo.css内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.pclass a&#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;demo.css&quot; type&#x3D;&quot;text&#x2F;css&quot; rel&#x3D;&quot;stylesheet&quot;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p class&#x3D;&quot;pclass&quot;&gt;Hello World&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="7-属性选择器"><a href="#7-属性选择器" class="headerlink" title="7 属性选择器"></a>7 属性选择器</h4><ul><li><p>属性选择器：</p><ul><li>对待有指定属性的HTML元素设置样式</li></ul></li><li><p>属性和值选择器</p></li></ul><p>index.html的代码如下：属性和属性值均可设置样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        [title]&#123;</span><br><span class="line">            color:red;</span><br><span class="line">        &#125;</span><br><span class="line">        [title&#x3D;te]&#123;</span><br><span class="line">            color:blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p title&#x3D;&quot;t&quot;&gt;Hello world&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p title&#x3D;&quot;te&quot;&gt;Hello css&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5基础系列详细学习总结汇总</title>
      <link href="/blog/2020/09/21/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E6%B1%87%E6%80%BB/"/>
      <url>/blog/2020/09/21/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97%E8%AF%A6%E7%BB%86%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://redrose2100.github.io/blog/2020/09/15/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--%E7%AE%80%E4%BB%8B%E3%80%81%E5%85%83%E7%B4%A0%E3%80%81%E5%B1%9E%E6%80%A7%E3%80%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E3%80%81%E9%93%BE%E6%8E%A5%E3%80%81%E8%A1%A8%E6%A0%BC/" target="_blank" rel="noopener">Html5基础系列(1)–简介、元素、属性、格式化、链接、表格</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/17/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--%E5%88%97%E8%A1%A8%E3%80%81%E5%9D%97%E3%80%81%E5%B8%83%E5%B1%80/" target="_blank" rel="noopener">Html5基础系列(2)–列表、块、布局</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/17/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--%E8%A1%A8%E5%8D%95%E3%80%81flask%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E3%80%81%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E4%B8%8Epython%E4%BA%A4%E4%BA%92/" target="_blank" rel="noopener">Html5基础系列(3)–表单、flask环境搭建、表单提交数据与python交互</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/18/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--%E6%A1%86%E6%9E%B6%E3%80%81%E8%83%8C%E6%99%AF%E3%80%81%E5%AE%9E%E4%BD%93/" target="_blank" rel="noopener">Html5基础系列(4)–框架、背景、实体</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/19/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--XHTML%E7%AE%80%E4%BB%8B%E3%80%81%E5%85%83%E7%B4%A0%E3%80%81%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener">Html5基础系列(5)–XHTML简介、元素、属性</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/19/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(6)--HTML5%E4%B8%8EHTML4%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank" rel="noopener">Html5基础系列(6)–HTML5与HTML4的区别</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/20/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(7)--article%E3%80%81section%E3%80%81nav%E3%80%81aside%E3%80%81time%E3%80%81pubdate%E7%AD%89%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener">Html5基础系列(7)–article、section、nav、aside、time、pubdate等元素与属性</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/20/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(8)--header%E3%80%81footer%E3%80%81hgroup%E3%80%81address%E7%AD%89%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7/" target="_blank" rel="noopener">Html5基础系列(8)–header、footer、hgroup、address等元素与属性</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/20/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(9)--%E8%A1%A8%E5%8D%95%E6%96%B0%E5%A2%9E%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7(1)/" target="_blank" rel="noopener">Html5基础系列(9)–表单新增元素与属性(1)</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/20/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(10)--%E8%A1%A8%E5%8D%95%E6%96%B0%E5%A2%9E%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7(2)/" target="_blank" rel="noopener">Html5基础系列(10)–表单新增元素与属性(2)</a></p>]]></content>
      
      
      <categories>
          
          <category> Html5基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5基础系列(10)--表单新增元素与属性(2)</title>
      <link href="/blog/2020/09/20/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(10)--%E8%A1%A8%E5%8D%95%E6%96%B0%E5%A2%9E%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7(2)/"/>
      <url>/blog/2020/09/20/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(10)--%E8%A1%A8%E5%8D%95%E6%96%B0%E5%A2%9E%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7(2)/</url>
      
        <content type="html"><![CDATA[<h4 id="1-标签的control属性"><a href="#1-标签的control属性" class="headerlink" title="1 标签的control属性"></a>1 标签的control属性</h4><p>在HTML5中，可以在标签内部放置一个表单元素，并且通过该标签的control属性来访问该表单元素</p><p>使用实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function SetValue()&#123;</span><br><span class="line">            var label&#x3D;document.getElementById(&quot;label&quot;);</span><br><span class="line">            var textbox&#x3D;label.control;</span><br><span class="line">            textbox.value&#x3D;&quot;010010&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;form &gt;</span><br><span class="line">        &lt;label id&#x3D;&quot;label&quot;&gt;</span><br><span class="line">            邮编：</span><br><span class="line">            &lt;input id&#x3D;&quot;txt_zip&quot; maxlength&#x3D;&quot;6&quot;&gt;</span><br><span class="line">            &lt;small&gt;请输入6位数字&lt;&#x2F;small&gt;</span><br><span class="line">        &lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot;  value&#x3D;&quot;设置默认值&quot; onclick&#x3D;&quot;SetValue()&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="2-文本框的placeholder属性"><a href="#2-文本框的placeholder属性" class="headerlink" title="2 文本框的placeholder属性"></a>2 文本框的placeholder属性</h4><p>placeholder 是指当文本框处于未输入状态时显示的输入提示，当文本框处于未输入状态且<br>未获取到光标焦点时，模糊显示输入提示文字</p><p>使用举例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function SetValue()&#123;</span><br><span class="line">            var label&#x3D;document.getElementById(&quot;label&quot;);</span><br><span class="line">            var textbox&#x3D;label.control;</span><br><span class="line">            textbox.value&#x3D;&quot;010010&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;form &gt;</span><br><span class="line">        &lt;label id&#x3D;&quot;label&quot;&gt;</span><br><span class="line">            邮编：</span><br><span class="line">            &lt;input id&#x3D;&quot;txt_zip&quot; maxlength&#x3D;&quot;6&quot; placeholder&#x3D;&quot;请输入6位数字&quot;&gt;</span><br><span class="line">        &lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot;  value&#x3D;&quot;设置默认值&quot; onclick&#x3D;&quot;SetValue()&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="3-文本框的list属性"><a href="#3-文本框的list属性" class="headerlink" title="3 文本框的list属性"></a>3 文本框的list属性</h4><p>在HTML5中，为单行文本框增加了一个list属性，该属性的值为某个datelist元素的id，<br>datalist元素也是HTML5中新增的元素，该元素类似于选择框，但是当用户想要设定的值不再选择列表<br>之内时，允许自行输入，datalist元数本身并不显示，而是当文本获得焦点时提示输入的方式显示</p><p>使用举例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form &gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;greeting&quot; list&#x3D;&quot;greetings&quot;&gt;</span><br><span class="line">        &lt;datalist id&#x3D;&quot;greetings&quot; stype&#x3D;&quot;display:none&quot;&gt;</span><br><span class="line">            &lt;option value&#x3D;&quot;html&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line">            &lt;option value&#x3D;&quot;css&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line">            &lt;option value&#x3D;&quot;javascript&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;&#x2F;datalist&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="4-文本框的AutoComplete属性"><a href="#4-文本框的AutoComplete属性" class="headerlink" title="4 文本框的AutoComplete属性"></a>4 文本框的AutoComplete属性</h4><p>帮助输入所用的自动完成功能，是一个既节省输入时间又十分方便的功能。在HTML5之前，因为<br>谁都可以看见输入的值，所以在安全方面存在缺陷，只要使用AutoComplete属性，安全性方面也可以<br>得到很好的控制</p><p>使用举例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form &gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;greeting&quot; autocomplete&#x3D;&quot;&quot; list&#x3D;&quot;greetings&quot;&gt;</span><br><span class="line">        &lt;datalist id&#x3D;&quot;greetings&quot; stype&#x3D;&quot;display:none&quot;&gt;</span><br><span class="line">            &lt;option value&#x3D;&quot;html&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line">            &lt;option value&#x3D;&quot;css&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line">            &lt;option value&#x3D;&quot;javascript&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;&#x2F;datalist&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="5-文本框的pattern属性"><a href="#5-文本框的pattern属性" class="headerlink" title="5 文本框的pattern属性"></a>5 文本框的pattern属性</h4><p>在HTML5中，对input元素使用pattern属性，并且将属性值设置为某个格式的正则表达式，在提交<br>时会针对这些进行检查，检查其内容是否符合给定格式。当输入的内容不符合给定格式时，则不允许提交<br>，同时在浏览器中显示信息提示文字，提示输入的内筒必须符合给定格式</p><p>使用flask启动一个服务接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,request</span><br><span class="line"></span><br><span class="line">app&#x3D;Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;,methods&#x3D;[&quot;POST&quot;])</span><br><span class="line">def index():</span><br><span class="line">    if request.method&#x3D;&#x3D;&quot;POST&quot;:</span><br><span class="line">        part&#x3D;request.form.get(&quot;part&quot;)</span><br><span class="line">        return &quot;part:&quot;+part</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>使用实例举例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        请输入内容：</span><br><span class="line">        &lt;input pattern&#x3D;&quot;[A-Z]&#123;3&#125;&quot; name&#x3D;&quot;part&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="6-文本框的SelectionDirection属性"><a href="#6-文本框的SelectionDirection属性" class="headerlink" title="6 文本框的SelectionDirection属性"></a>6 文本框的SelectionDirection属性</h4><p>对input元素与textarea元素，HTML5增加了SelectionDirection属性，当用户在这两个元素<br>中用鼠标选取部分文字时，可以使用该属性来获取选取方向，当用户正想选取文字时，该属性值为“forward”，当用户<br>反向选取文字时，该属性值设置为“backward”，当用户没有选取任何文字时，该属性设置为“forward”</p><p>使用举例如下：注意需要在Firefox浏览器调试，Chrome浏览器不支持</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function AD()&#123;</span><br><span class="line">            var control&#x3D;document.forms[0][&quot;text&quot;];</span><br><span class="line">            var direction&#x3D;control.selectionDirection;</span><br><span class="line">            alert(direction);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;form &gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;text&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;确定&quot; onclick&#x3D;&quot;AD&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="7-复选框的indeterminate属性"><a href="#7-复选框的indeterminate属性" class="headerlink" title="7 复选框的indeterminate属性"></a>7 复选框的indeterminate属性</h4><p>对于复选框checkbox元素来说，过去只是选择与非选择这两种状态，在HTML5中，可以<br>在JavaScript脚本代码中对钙元素使用indeterminate属性，以说明复选框处于“尚未明确是否选择”状态</p><p>使用举例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;checkbox&quot; indeterminate id&#x3D;&quot;cb&quot;&gt;属性测试</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var cb&#x3D;document.getElementById(&quot;cb&quot;);</span><br><span class="line">            cb.indeterminate&#x3D;true;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h4 id="8-image提交按钮的height属性与width属性"><a href="#8-image提交按钮的height属性与width属性" class="headerlink" title="8 image提交按钮的height属性与width属性"></a>8 image提交按钮的height属性与width属性</h4><p>针对类型为image的input元素，HTML5新增了两个属性，height、width分别用来指定图片按钮的高度和宽度</p><p>使用举例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;test.jsp&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        姓名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;image&quot; src&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot; alt&#x3D;&quot;编辑&quot; width&#x3D;&quot;20&quot; height&#x3D;&quot;20&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Html5基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5基础系列(9)--表单新增元素与属性(1)</title>
      <link href="/blog/2020/09/20/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(9)--%E8%A1%A8%E5%8D%95%E6%96%B0%E5%A2%9E%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7(1)/"/>
      <url>/blog/2020/09/20/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(9)--%E8%A1%A8%E5%8D%95%E6%96%B0%E5%A2%9E%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7(1)/</url>
      
        <content type="html"><![CDATA[<h4 id="1-表单内元素的form属性"><a href="#1-表单内元素的form属性" class="headerlink" title="1 表单内元素的form属性"></a>1 表单内元素的form属性</h4><p>在HTML4中，表单内的从属元素必须书写在表单内部，而在HTML5中，可以把他们书写在页面<br>上任何地方，然后为钙元素指定一个form属性，属性值为该表单的id，这样就可以声明该元素<br>从属于指定表单了</p><p>举例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id&#x3D;&quot;testform&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;input form&#x3D;&quot;testform&quot; type&#x3D;&quot;button&quot; value&#x3D;&quot;确定&quot;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="2-表单内元素的formaction属性"><a href="#2-表单内元素的formaction属性" class="headerlink" title="2 表单内元素的formaction属性"></a>2 表单内元素的formaction属性</h4><p>在HTML4中，一个表单内的所有元素只能通过表单的action属性被统一提交到另一个页面，而在<br>HTML5中可以为所有的提交按钮，增加不同的formaction属性，使单击不同的按钮时可以<br>将表单提交到不同的页面</p><p>举例如下：<br>首先使用如下flask代码起一个服务，提供两个接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,request</span><br><span class="line"></span><br><span class="line">app&#x3D;Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;s1&quot;,methods&#x3D;[&quot;GET&quot;])</span><br><span class="line">def s1():</span><br><span class="line">    return &quot;hello s1&quot;</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;s2&quot;,methods&#x3D;[&quot;GET&quot;])</span><br><span class="line">def s2():</span><br><span class="line">    return &quot;hello s2&quot;</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>然后编写如下html代码，实现一个form中有多个formaction</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id&#x3D;&quot;testform&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;s1&quot; value&#x3D;&quot;v1&quot; formaction&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;s1&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;s2&quot; value&#x3D;&quot;v2&quot; formaction&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;s2&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="3-表单内元素的formmethod属性"><a href="#3-表单内元素的formmethod属性" class="headerlink" title="3 表单内元素的formmethod属性"></a>3 表单内元素的formmethod属性</h4><p>在HTML4中，一个表单内只能有一个action属性用来对表单内所有元素统一制定提交页面，<br>所以每个表单内也只有一个method属性来统一指定提交方法，而在HTML5中，可以使用formmethod<br>属性来对每一个表单元素分别指定不同的提交方法</p><p>下面是为实例代码，flask服务可以继续使用上述2中的接口服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id&#x3D;&quot;testform&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;s1&quot; value&#x3D;&quot;v1&quot; formaction&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;s1&quot; formmethod&#x3D;&quot;get&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;s2&quot; value&#x3D;&quot;v2&quot; formaction&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;s2&quot; formmethod&#x3D;&quot;get&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="4-表单内元素的formenctype属性"><a href="#4-表单内元素的formenctype属性" class="headerlink" title="4 表单内元素的formenctype属性"></a>4 表单内元素的formenctype属性</h4><p>在HTML4中，表单元素具有一个enctype属性，该属性用于指定在表单发送到服务器之前应该<br>如何对表单内的数据进行编码。在HTML5中，可以使用formenctype属性对表单元素分别指定不同的编码<br>方式</p><p>使用举例如下：flask服务可以继续使用上述2中的接口服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id&#x3D;&quot;testform&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;s1&quot; value&#x3D;&quot;v1&quot; formaction&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;s1&quot; formmethod&#x3D;&quot;get&quot; formenctype&#x3D;&quot;text&#x2F;plain&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;s2&quot; value&#x3D;&quot;v2&quot; formaction&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;s2&quot; formmethod&#x3D;&quot;get&quot; formenctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="5-表单内元素的formtarget属性"><a href="#5-表单内元素的formtarget属性" class="headerlink" title="5 表单内元素的formtarget属性"></a>5 表单内元素的formtarget属性</h4><p>在HTML4中，表单元素具有一个target属性，该属性用于指定在何处打开表单提交后所需要的加载的页面。<br>在HTML5中，可以对多个提交按钮分别使用formtarget属性来指定提交后在何处打开所需要的加载的页面</p><p>使用举例如下：flask服务可以继续使用上述2中的接口服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id&#x3D;&quot;testform&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;s1&quot; value&#x3D;&quot;v1&quot; formaction&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;s1&quot; formmethod&#x3D;&quot;get&quot; formenctype&#x3D;&quot;text&#x2F;plain&quot; formtarget&#x3D;&quot;_blank&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;s2&quot; value&#x3D;&quot;v2&quot; formaction&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;s2&quot; formmethod&#x3D;&quot;get&quot; formenctype&#x3D;&quot;multipart&#x2F;form-data&quot; formtarget&#x3D;&quot;_blank&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="6-表单内元素的autofocus属性"><a href="#6-表单内元素的autofocus属性" class="headerlink" title="6 表单内元素的autofocus属性"></a>6 表单内元素的autofocus属性</h4><p>为文本框、选择框或按钮控件加上autofocus属性，当页面打开时，该控件自动获得光标焦点</p><p>举例代码如下：当打开页面时，s1按钮会自动获取到鼠标焦点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id&#x3D;&quot;testform&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;s1&quot; value&#x3D;&quot;v1&quot; formaction&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;s1&quot; formmethod&#x3D;&quot;get&quot; formenctype&#x3D;&quot;text&#x2F;plain&quot; formtarget&#x3D;&quot;_blank&quot; autofocus&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;s2&quot; value&#x3D;&quot;v2&quot; formaction&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;s2&quot; formmethod&#x3D;&quot;get&quot; formenctype&#x3D;&quot;multipart&#x2F;form-data&quot; formtarget&#x3D;&quot;_blank&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="7-表单内元素的required属性"><a href="#7-表单内元素的required属性" class="headerlink" title="7 表单内元素的required属性"></a>7 表单内元素的required属性</h4><p>HTML5中新增的required属性可以应用到大多数输入元素上，在提交时，如果元素中的内容为空白，则不允许提交，同时在浏览器中显示信息提示文字</p><p>flask服务使用如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,request</span><br><span class="line"></span><br><span class="line">app&#x3D;Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;,methods&#x3D;[&quot;POST&quot;])</span><br><span class="line">def index():</span><br><span class="line">    if request.method&#x3D;&#x3D;&quot;POST&quot;:</span><br><span class="line">        username&#x3D;request.form.get(&quot;username&quot;)</span><br><span class="line">        password&#x3D;request.form.get(&quot;password&quot;)</span><br><span class="line">        return &quot;username:&quot;+username+&quot; password:&quot;+password</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>然后html表单举例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id&#x3D;&quot;testform&quot; action&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; required&#x3D;&quot;required&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;password&quot; required&#x3D;&quot;required&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; name&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>当用户名或者密码不填的时候，会有错误提示，并且不会触发提交按钮</p><h4 id="8-表单内元素的labels属性"><a href="#8-表单内元素的labels属性" class="headerlink" title="8 表单内元素的labels属性"></a>8 表单内元素的labels属性</h4><p>在HTML5中，为所有可使用标签的表单元素、button、select元素等，定义一个labels属性，属性值<br>为一个NodeList对象，代表该元素所绑定的标签元素所构成的结合</p><p>举例如下：当不填姓名的时候，会出现定制的提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;test&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function Validate()&#123;</span><br><span class="line">            var txt_name&#x3D;document.getElementById(&quot;txt_name&quot;);</span><br><span class="line">            var button&#x3D;document.getElementById(&quot;btnValidate&quot;);</span><br><span class="line">            var form&#x3D;document.getElementById(&quot;testform&quot;);</span><br><span class="line">            if(txt_name.value.trim()&#x3D;&#x3D;&quot;&quot;)</span><br><span class="line">            &#123;</span><br><span class="line">                var label&#x3D;document.createElement(&quot;label&quot;);</span><br><span class="line">                label.setAttribute(&quot;for&quot;,&quot;txt_name&quot;);</span><br><span class="line">                form.insertBefore(label,button);</span><br><span class="line">                txt_name.labels[1].innerHTML&#x3D;&quot;请输入姓名：&quot;;</span><br><span class="line">                txt_name.labels[1].setAttribute(&quot;style&quot;,&quot;font-size:9px;color:red&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;form id&#x3D;&quot;testform&quot; action&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        &lt;label id&#x3D;&quot;label&quot; for&#x3D;&quot;txt_name&quot;&gt;姓名&lt;&#x2F;label&gt;</span><br><span class="line">        &lt;input id&#x3D;&quot;txt_name&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;btnValidate&quot; value&#x3D;&quot;验证&quot; onclick&#x3D;&quot;Validate()&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Html5基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5基础系列(8)--header、footer、hgroup、address等元素与属性</title>
      <link href="/blog/2020/09/20/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(8)--header%E3%80%81footer%E3%80%81hgroup%E3%80%81address%E7%AD%89%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7/"/>
      <url>/blog/2020/09/20/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(8)--header%E3%80%81footer%E3%80%81hgroup%E3%80%81address%E7%AD%89%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="1-header元素"><a href="#1-header元素" class="headerlink" title="1 header元素"></a>1 header元素</h4><p>header元素是一种具有引号和导航作用的结构元素，通常用来放置整个页面或者页面内的一个内容区块<br>的标题，但是也可以包含其他内容，例如数据表格、搜索表单或者相关logo图片</p><p>举例代码如下：header既可以作为整个页面的标题，也可以作为article内容块中的一个局部标题块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;h1&gt;h1 title&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;header&gt;</span><br><span class="line">    &lt;article&gt;</span><br><span class="line">        &lt;header&gt;</span><br><span class="line">            &lt;h2&gt; h2 title&lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;&#x2F;header&gt;</span><br><span class="line">    &lt;&#x2F;article&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="2-footer元素"><a href="#2-footer元素" class="headerlink" title="2 footer元素"></a>2 footer元素</h4><p>footer元素可以作为其上层父级内容区块或是一个根区块的脚注。footer通常包括其相关区块<br>的脚注信息，如作者、相关阅读链接以及版权信息等内容</p><p>使用举例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;footer&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;a href&#x3D;&quot;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">                &lt;a href&#x3D;&quot;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">                &lt;a href&#x3D;&quot;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;footer&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="3-hgroup元素"><a href="#3-hgroup元素" class="headerlink" title="3 hgroup元素"></a>3 hgroup元素</h4><p>hgroup元素时将标题以及子标题进行分组的元素，hgroup元素通常会将h1-h6元素进行分组，比如一个内容区块的标题以及子元素算一组</p><p>举例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;article&gt;</span><br><span class="line">        &lt;header&gt;</span><br><span class="line">            &lt;hgroup&gt;</span><br><span class="line">                &lt;h1&gt;h1 title&lt;&#x2F;h1&gt;</span><br><span class="line">                &lt;h2&gt;h2 title&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;&#x2F;hgroup&gt;</span><br><span class="line">        &lt;&#x2F;header&gt;</span><br><span class="line">    &lt;&#x2F;article&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="4-address元素"><a href="#4-address元素" class="headerlink" title="4 address元素"></a>4 address元素</h4><p>address元素用例在文档中呈现联系信息，包括文档作者或者文档维护者的名字、网站链接、电子邮箱、<br>真是地址、电话号码等信息，address应该不只用来呈现电子邮箱或真是地址，还用来展示跟文档<br>相关的联系人的所有者的联系信息</p><p>举例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;address&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot;&gt;author:xxx&lt;&#x2F;a&gt;</span><br><span class="line">        &lt;a href&#x3D;&quot;#&quot;&gt;author:xxx&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;address&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="5-HTML5的结构编排规则"><a href="#5-HTML5的结构编排规则" class="headerlink" title="5 HTML5的结构编排规则"></a>5 HTML5的结构编排规则</h4><ul><li><p>显式编排内容区域块</p><p>显式编排是指明确使用section等元素创建文档结构，在每个区域块使用标题如h1-h6<br>或者hgroup等</p></li><li><p>隐式编排内容区域块</p><p> 隐式编排是指不明确使用section的元素创建文档结构，而是根据网页需求使用各级的h1-h6或者<br> hgroup把各级内容区域块自动创建出来</p></li><li><p>标题分级</p><p> 根据标题的等级，如果新出现的标题级别比之前的级别低，则生成下级标题区域块，如果新出现的标题级别<br> 比之前的级别同一级或者更高级别，则生成新的区域块</p></li><li><p>不同区域块可以使用相同级别的标题</p></li></ul><p>下面是一个完整的实例：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;header&gt;        &lt;h1&gt; h1 title in header&lt;/h1&gt;        &lt;nav&gt;            &lt;ul&gt;                &lt;li&gt;                    &lt;a href=&quot;www.baidu.com&quot;&gt;baidu&lt;/a&gt;                    &lt;a href=&quot;www.baidu.com&quot;&gt;baidu&lt;/a&gt;                &lt;/li&gt;            &lt;/ul&gt;        &lt;/nav&gt;    &lt;/header&gt;    &lt;article&gt;        &lt;hgroup&gt;            &lt;h1&gt;h1 title in article&lt;/h1&gt;            &lt;h2&gt;h2 title in article&lt;/h2&gt;        &lt;/hgroup&gt;        &lt;p&gt;article context&lt;/p&gt;        &lt;section&gt;            &lt;div&gt;                &lt;article&gt;                    &lt;h1&gt; h1 title in article.section.article&lt;/h1&gt;                    &lt;p&gt;ctx in article.section.article&lt;/p&gt;                &lt;/article&gt;            &lt;/div&gt;        &lt;/section&gt;    &lt;/article&gt;    &lt;footer&gt;        &lt;small&gt;version owner...&lt;/small&gt;    &lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Html5基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5基础系列(7)--article、section、nav、aside、time、pubdate等元素与属性</title>
      <link href="/blog/2020/09/20/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(7)--article%E3%80%81section%E3%80%81nav%E3%80%81aside%E3%80%81time%E3%80%81pubdate%E7%AD%89%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7/"/>
      <url>/blog/2020/09/20/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(7)--article%E3%80%81section%E3%80%81nav%E3%80%81aside%E3%80%81time%E3%80%81pubdate%E7%AD%89%E5%85%83%E7%B4%A0%E4%B8%8E%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="1-article-元素"><a href="#1-article-元素" class="headerlink" title="1 article 元素"></a>1 article 元素</h4><p>   article元素代表文档、页面或应用程序中独立的完整的可以独自被外部引用的内容，<br>   它可以是一篇博客或者报刊中的文章，一篇论坛帖子，一段用户评论或者独立的插件，<br>   或者其他任何独立的内容</p><p>   article元素时可以嵌套使用的</p><p>   article元素可以用来表示插件</p><p>   举例代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;article&gt;</span><br><span class="line">        &lt;header&gt;</span><br><span class="line">            &lt;h1&gt;article title&lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;p&gt;welcom hello&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;header&gt;</span><br><span class="line">        &lt;article&gt;</span><br><span class="line">            &lt;header&gt;作者&lt;&#x2F;header&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                评论</span><br><span class="line">            &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;footer&gt;time&lt;&#x2F;footer&gt;</span><br><span class="line">        &lt;&#x2F;article&gt;</span><br><span class="line">        &lt;p&gt; hello world&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;footer&gt;</span><br><span class="line">            &lt;p&gt;author：redrose2100&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;footer&gt;</span><br><span class="line">    &lt;&#x2F;article&gt;</span><br><span class="line"></span><br><span class="line">    &lt;article&gt;</span><br><span class="line">        &lt;h1&gt;这是一个内嵌页面&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;object&gt;</span><br><span class="line">            &lt;embed src&#x3D;&quot;#&quot; width&#x3D;&quot;600&quot; height&#x3D;&quot;400&quot;&gt;</span><br><span class="line">        &lt;&#x2F;object&gt;</span><br><span class="line">    &lt;&#x2F;article&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="2-section元素"><a href="#2-section元素" class="headerlink" title="2 section元素"></a>2 section元素</h4><pre><code>section元素用于对网站或者应用程序中页面上的内容进行分块，一个section元素同南昌由内容及其标题组成，但是section元素并非一个普通的容器元素，当一个容器需要被直接定义样式或通过脚本定义行为是，推荐使用div而非section元素</code></pre><ul><li>section使用原则：<ul><li>不要讲section作为设置样式的容器，那是div的工作</li><li>如果article、aside、nav元素更符合使用场景，不要使用section元素</li><li>不要为没有标题的区域块使用section元素</li></ul></li></ul><p>使用代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;section&gt;</span><br><span class="line">        &lt;h1&gt;apple&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;p&gt;this is a paragraph&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;article&gt;</span><br><span class="line">        &lt;h1&gt;apple&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;p&gt;this is a paragraph&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;section&gt;</span><br><span class="line">            &lt;h2&gt;pear&lt;&#x2F;h2&gt;</span><br><span class="line">            &lt;p&gt;this is another paragraph&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;section&gt;</span><br><span class="line">    &lt;&#x2F;article&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="3-nav元素"><a href="#3-nav元素" class="headerlink" title="3 nav元素"></a>3 nav元素</h4><p>   nav元素时一个可以用作页面导航的链接组，其中的导航元素链接到其他页面或者当前页面的其他<br>   部分，并不是所所有的连接组都要被放进nav元素，只需要将主要的基本的连接组放进nav元素即可</p><ul><li>nav元素的使用场景：<ul><li>传统导航条</li><li>侧边栏导航</li><li>页内导航</li><li>翻页操作</li></ul></li></ul><p>使用代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;a href &#x3D; &quot;#&quot;&gt;主页&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;a href &#x3D; &quot;#&quot;&gt;帮助&lt;&#x2F;a&gt;</span><br><span class="line">            &lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;nav&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="4-aside元素"><a href="#4-aside元素" class="headerlink" title="4 aside元素"></a>4 aside元素</h4><p>   aside元素用例表示当前页面或文章的附属信息部分，它可以包含于当前页面或者主要内容相关的引用、侧边栏、广告、导航条，以及其他类似的有区别与主要内容的部分</p><ul><li><p>article主要有两种使用场景：</p><ul><li><p>在article中使用，作为article内容的补充</p></li><li><p>在article外使用，作为整个页面的附属信息补充</p></li></ul></li></ul><p>使用代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">        &lt;h1&gt;html&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;header&gt;</span><br><span class="line">    &lt;article&gt;</span><br><span class="line">        &lt;h1&gt;param&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;p&gt;paragraph&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;adide&gt;</span><br><span class="line">            &lt;h1&gt;definition&lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;p&gt;param is xxx&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;adide&gt;</span><br><span class="line">    &lt;&#x2F;article&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="5-time元素与微格式"><a href="#5-time元素与微格式" class="headerlink" title="5 time元素与微格式"></a>5 time元素与微格式</h4><p>微格式：它是一种利用html5的class属性来对网页添加附属信息的方法，附加信息比如新闻发生的时间、姓名、联系方式等</p><p>time元素时html5新增的一个元素，用来对无歧义的对机器时间码来进行编码，time元素代表着某一个时刻或者日期，当然它是允许带时差的</p><p>使用距离代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;time datetime&#x3D;&quot;2020-10-01&quot;&gt;2020-10-01&lt;&#x2F;time&gt;</span><br><span class="line">    &lt;time datetime&#x3D;&quot;2020-10-01T20:00&quot;&gt;2020-10-01&lt;&#x2F;time&gt;</span><br><span class="line">    &lt;time datetime&#x3D;&quot;2020-10-01T20:00Z&quot;&gt;2020-10-01&lt;&#x2F;time&gt;</span><br><span class="line">    &lt;time datetime&#x3D;&quot;2020-10-01T20:00+09:00&quot;&gt;2020-10-01&lt;&#x2F;time&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="6-pubdate属性"><a href="#6-pubdate属性" class="headerlink" title="6 pubdate属性"></a>6 pubdate属性</h4><p>pubdate属性时可选的布尔类型的属性，它可以用来放在article中的time属性上，<br>意思是文章或者博客的发布日期</p><p>使用举例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;article&gt;</span><br><span class="line">        &lt;header&gt;</span><br><span class="line">            &lt;h1&gt;apple&lt;&#x2F;h1&gt;</span><br><span class="line">            &lt;p&gt;pub date</span><br><span class="line">            &lt;time datetime&#x3D;&quot;2020-10-01&quot; pubdate&#x3D;&quot;true&quot;&gt;2020-10-01&lt;&#x2F;time&gt;</span><br><span class="line">            &lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                play</span><br><span class="line">                &lt;time datetime&#x3D;&quot;2020-10-10&quot;&gt;2020-10-10&lt;&#x2F;time&gt;</span><br><span class="line">            &lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;header&gt;</span><br><span class="line">    &lt;&#x2F;article&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Html5基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5基础系列(6)--HTML5与HTML4的区别</title>
      <link href="/blog/2020/09/19/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(6)--HTML5%E4%B8%8EHTML4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/blog/2020/09/19/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(6)--HTML5%E4%B8%8EHTML4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="1-HTML5的目的"><a href="#1-HTML5的目的" class="headerlink" title="1 HTML5的目的"></a>1 HTML5的目的</h4><ul><li>为了解决当前web上存在的各种问题：<ul><li>Web浏览器之间的兼容性很低</li><li>文档结构不够明确</li><li>Web应用程序的功能受到了限制</li></ul></li></ul><h4 id="2-语法的改变"><a href="#2-语法的改变" class="headerlink" title="2 语法的改变"></a>2 语法的改变</h4><ul><li>内容类型<ul><li>扩展名和内容类型依然保持不变，即扩展名依然是.html或者是.htm，内容类型也依然是 text/html</li></ul></li><li>DOCTYPE声明<ul><li>HTML5中DOCTYPE的声明变化比较大，在HTML5中，如下声明即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure>而在HTML4中，却要指定具体的版本，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD HTML 4.01 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;html4&#x2F;loose.dtd&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>指定字符编码<ul><li>HTML5中指定编码比较简单，如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br></pre></td></tr></table></figure></li><li>HTML4中指定编码相对要复杂<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li>可以省略标记的元素</li><li>具有boolean值的属性<br>如下代码所示，前三个均为True，最后一个不写时表示False<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; checked&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; &gt;</span><br></pre></td></tr></table></figure></li><li>省略引号<br>在HTML5中，属性值是可以省略引号的，如下两行代码效果是完全一样的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;checked&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="3-新增的元素"><a href="#3-新增的元素" class="headerlink" title="3 新增的元素"></a>3 新增的元素</h4></li><li>新增的结构元素：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">section         表示页面当中的一个内容块，比如章节、页眉、页脚等，可以与h1-h6等结合使用，表示文档的结构               </span><br><span class="line">article         表示页面中的一块与上下文不相关的独立内容，如博客中的一篇文章或者报纸中的一篇文章</span><br><span class="line">aside           表示article内容之外的与article相关的辅助信息          </span><br><span class="line">header          表示页面内容中的一个区域块，通常它用来表示标题</span><br><span class="line">hgroup          用于对整个页面或者页面中的标题进行结合            </span><br><span class="line">footer          用于表示页面内容中的一个区域块，通常表示这个区域块的脚部，通常用来承载作者姓名等与作者通讯等相关的内容</span><br><span class="line">nav             表示页面中的导航链接的部分            </span><br><span class="line">figure          表示一段独立的流的内容，一般表示文档主题流中的文档的一个单元</span><br></pre></td></tr></table></figure></li><li>新增的其他元素：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">video           用来定义视频，比如电影片段或者视频流                    </span><br><span class="line">audio           用来定义音频，比如音乐或者音频流</span><br><span class="line">embed                       </span><br><span class="line">mark</span><br><span class="line">progress                    </span><br><span class="line">meter</span><br><span class="line">time                        </span><br><span class="line">ruby</span><br><span class="line">rt                          </span><br><span class="line">rp</span><br><span class="line">wbr                         </span><br><span class="line">canvas         表示图形，比如图标或者图形</span><br><span class="line">command                     </span><br><span class="line">details</span><br><span class="line">datalist                    </span><br><span class="line">datagrid</span><br><span class="line">keygen                      </span><br><span class="line">output</span><br><span class="line">source                      </span><br><span class="line">menu</span><br></pre></td></tr></table></figure></li><li>新增的input元素类型：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">email           表示email输入的地址                           </span><br><span class="line">url             表示页面输入的url地址</span><br><span class="line">number          表示数字       </span><br><span class="line">range           表示输入框内的一个范围值</span><br><span class="line">DatePickers     关于日历日期时间的</span><br></pre></td></tr></table></figure><h4 id="4-废除的元素"><a href="#4-废除的元素" class="headerlink" title="4 废除的元素"></a>4 废除的元素</h4></li><li>能使用CSS替代的元素：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">basefont            big             center</span><br><span class="line">font                s               tt</span><br><span class="line">u</span><br></pre></td></tr></table></figure></li><li>不再使用frame框架</li><li>只有部分浏览器支持的元素</li><li>其他被废除的元素</li></ul><h4 id="5-新增的属性"><a href="#5-新增的属性" class="headerlink" title="5 新增的属性"></a>5 新增的属性</h4><ul><li>表单相关的属性</li><li>链接相关的属性</li><li>其他属性</li></ul><h4 id="6-废除的属性"><a href="#6-废除的属性" class="headerlink" title="6 废除的属性"></a>6 废除的属性</h4><p>废除的属性</p><h4 id="7-全局属性"><a href="#7-全局属性" class="headerlink" title="7 全局属性"></a>7 全局属性</h4><ul><li><p>contentEditable属性</p><p>  主要功能是允许用户编辑元素的内容，所以此元素必须是能获取到鼠标焦点的元素，<br>  而且在鼠标点击后向用户提供一个插入符号，提示用户该元素允许用户进行编辑，<br>  此属性时布尔类型，可以被设置为True或者False，True代表可编辑，False代表不可编辑，<br>  此外此属性还有一个继承状态，如果此属性没有设置True或者False，<br>  则根据其父元素是否是可编辑来确定其是否可编辑</p><p>  如下代码演示了一个可编辑的列表</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;可编辑列表&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;ul contenteditable&gt;</span><br><span class="line">        &lt;li&gt;列表1&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;列表2&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;列表3&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li><li><p>designMode属性</p><p>  用来指定整个页面是否可编辑，当设置为True时，则整个页面中contentEditable属性设置为true的元素都可以进行编辑，<br>  此属性值只能在JavaScript脚本中被修改，该属性有两个值，on和off，被指定为on时，页面<br>  可编辑，被指定为off时则不可编辑，</p></li><li><p>hidden属性</p><p> 该属性的功能是通知浏览器不渲染该元素，使该元素处于不可见状态，页面加载之后仍然可以使用JavaScript脚本修改，<br> 修改后该元素仍然可以处于可见状态，即元素的内容即可以在浏览器中显示，该属性是一个布尔值的类型，<br> 设置为True时元素处于不可见状态，设置为False时元素处于可见状态，</p><p> 如下代码列表不可见了</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;可编辑列表&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;ul hidden&gt;</span><br><span class="line">        &lt;li&gt;列表1&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;列表2&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;li&gt;列表3&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li><li><p>spellcheck属性</p><p> 该属性的功能对输入框用户输入的内容进行拼写和语法检查</p><p> 如下代码演示了拼写检查</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; spellcheck&#x3D;&quot;true&quot;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li><li><p>tabindex属性</p><p> 当不断敲击tab键，让窗口或页面中的控件获得焦点，对窗口或页面中的所有控件进行遍历，<br> 每个tabindex表示该控件是第几个被访问到的</p><p> 如下代码，通过设置tabindex值可以控制按tab键后跳转的顺序</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; tabindex&#x3D;&quot;1&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; tabindex&#x3D;&quot;2&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; tabindex&#x3D;&quot;3&quot;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p> 在默认情况下，只有连接元素和表单元素可以通过tab键进行切换，如果想对其他元素进行tab切换，就需要增加tabindex属性设置</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Html5基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5基础系列(5)--XHTML简介、元素、属性</title>
      <link href="/blog/2020/09/19/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--XHTML%E7%AE%80%E4%BB%8B%E3%80%81%E5%85%83%E7%B4%A0%E3%80%81%E5%B1%9E%E6%80%A7/"/>
      <url>/blog/2020/09/19/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--XHTML%E7%AE%80%E4%BB%8B%E3%80%81%E5%85%83%E7%B4%A0%E3%80%81%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h4 id="1-XHTML简介"><a href="#1-XHTML简介" class="headerlink" title="1 XHTML简介"></a>1 XHTML简介</h4><ul><li>什么是XHTML？<ul><li>XHTML指的是可扩展超文本标记语言</li><li>XHTML与HTML4.01几乎是相同的</li><li>XHTML是更严格更纯净的HTML版本</li><li>XHTML是以XML应用的方式定义HTML</li><li>XHTML得到所有主流浏览器的支持</li></ul></li><li>为什么使用XHTML？<ul><li>为了代码的完整性和良好性</li></ul></li><li>文档声明：<ul><li>DTD：规定了使用通用标记语言的网页语法<ul><li>STRICT（严格类型）</li><li>TRANSITION（过度类型）</li><li>FRAMESET(框架类型)</li></ul></li><li>XHTML 1.0 Strict：DTD 包含了所有HTML元素和属性，但是不包括展示性的和弃用的元素，不允许框架集（Framesets）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE htmlPUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD XHTML 1.0 Strict&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;xhtml1&#x2F;DTD&#x2F;xhtml1-strict.dtd&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-XHTML元素"><a href="#2-XHTML元素" class="headerlink" title="2 XHTML元素"></a>2 XHTML元素</h4><ul><li>XHTML元素语法：<ul><li>XHTML元素必须正确嵌套</li><li>XHTML元素必须始终关闭</li><li>XHTML元素必须小写</li><li>XHTML文档必须有一个根元素</li></ul></li></ul><h4 id="3-XHTML属性"><a href="#3-XHTML属性" class="headerlink" title="3 XHTML属性"></a>3 XHTML属性</h4><ul><li>XHTML属性语法规则：<ul><li>XHTML属性必须使用小写</li><li>XHTML属性值必须用引号包围</li><li>XHTML属性最小化也是禁止的</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Html5基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5基础系列(4)--框架、背景、实体</title>
      <link href="/blog/2020/09/18/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--%E6%A1%86%E6%9E%B6%E3%80%81%E8%83%8C%E6%99%AF%E3%80%81%E5%AE%9E%E4%BD%93/"/>
      <url>/blog/2020/09/18/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--%E6%A1%86%E6%9E%B6%E3%80%81%E8%83%8C%E6%99%AF%E3%80%81%E5%AE%9E%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h4 id="1-HTML框架"><a href="#1-HTML框架" class="headerlink" title="1 HTML框架"></a>1 HTML框架</h4><ul><li><p>框架标签：frame<br> 框架对于页面的设计有着很大的作用</p></li><li><p>框架集标签（frameset）<br> 框架集标签定义如何将窗口分割为框架</p><p> 每个frameset定义一系列行和列</p><p> rows/cols的值规定了每行或每列占据屏幕的面积</p></li><li><p>常用标签：<br> noresize：固定框架大小</p><p> cols：列</p><p> rows：行</p></li></ul><p>frame框架在HTML5中已经被不推荐使用了，这里进用一个实例演示一下来理解框架的原由<br>首先创建三个框架文件，文件名分别为：frame_1.html,frame_2.html,frame_3.html</p><p>frame_1.html的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;frame_1&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body bgcolor&#x3D;&quot;#696969&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>frame_2.html的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;frame_2&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body bgcolor&#x3D;&quot;#7fffd4&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>frame_3.html的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;frame_3&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body bgcolor&#x3D;&quot;blue&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>然后在index.html文件中使用frameset和frame标签来设计框架<br>index.html内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;frame&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">    &lt;frameset cols&#x3D;&quot;20%,50%,30%&quot;&gt;</span><br><span class="line">        &lt;frame src&#x3D;&quot;frame_1.html&quot;&gt;&lt;&#x2F;frame&gt;</span><br><span class="line">        &lt;frame src&#x3D;&quot;frame_2.html&quot;&gt;&lt;&#x2F;frame&gt;</span><br><span class="line">        &lt;frame src&#x3D;&quot;frame_3.html&quot;&gt;&lt;&#x2F;frame&gt;</span><br><span class="line">    &lt;&#x2F;frameset&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>内联框架：iframe<br>内联框架iframe在HTML5中使用的还是很多的</li></ul><p>下面用一个实例演示iframe结合之前讲的链接a中target字段，除了self，_blank之外，还可以是_parent以及_top值，此时就可以演示这两个属性值的效果了</p><p>frame_1.html代码如下：这里一会可以通过改变target属性值查看效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;frame_1&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body bgcolor&#x3D;&quot;#696969&quot;&gt;</span><br><span class="line">    frame_1</span><br><span class="line">    &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot; target&#x3D;&quot;_top&quot;&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>frame_2.html的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;frame_2&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body bgcolor&#x3D;&quot;#7fffd4&quot;&gt;</span><br><span class="line">    frame_2</span><br><span class="line">    &lt;br&#x2F;&gt;</span><br><span class="line">    &lt;iframe src&#x3D;&quot;frame_1.html&quot; frameborder&#x3D;&quot;0&quot; width&#x3D;&quot;400&quot; height&#x3D;&quot;400&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>frame_3.html的的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;frame_3&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body bgcolor&#x3D;&quot;blue&quot;&gt;</span><br><span class="line">    frame_3</span><br><span class="line">    &lt;br&#x2F;&gt;</span><br><span class="line">    &lt;iframe src&#x3D;&quot;frame_2.html&quot; frameborder&#x3D;&quot;0&quot; width&#x3D;&quot;600&quot; height&#x3D;&quot;600&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>index.html代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;frame&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;iframe src&#x3D;&quot;frame_3.html&quot; frameborder&#x3D;&quot;0&quot; width&#x3D;&quot;800&quot; height&#x3D;&quot;800&quot;&gt;</span><br><span class="line">    &lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>此时可以通过修改frame_1.html中链接a中的target字段的值来查看不同的效果</p><h4 id="2-背景、颜色"><a href="#2-背景、颜色" class="headerlink" title="2 背景、颜色"></a>2 背景、颜色</h4><p>背景颜色使用bgcolor标签，背景图片使用background标签<br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body background&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>颜色是是有红绿蓝（RGB）组成的，每个颜色最小值是0（#00），最大值是255（#FF）</p><p>红色：#FF0000</p><p>绿色：#00FF00</p><p>蓝色：#0000FF</p><p>常见的组合颜色：</p><p>白色：#FFFFFF</p><p>黑色：#000000</p><p>如黑色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body bgcolor&#x3D;&quot;#000000&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><h4 id="3-HTML实体"><a href="#3-HTML实体" class="headerlink" title="3 HTML实体"></a>3 HTML实体</h4><p>实体：HTML中预留字符串必须被替换成字符实体，如：&lt;,&gt;,&amp;等<br>如：所以实体就相当于其他编程语言种字符串转义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;html&gt;&lt;&#x2F;html&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure><p>常见的实体有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">显示结果描述实体名称实体编号</span><br><span class="line"></span><br><span class="line">空格&amp;nbsp;&amp;#160;</span><br><span class="line">&lt;小于号&lt;&amp;#60;</span><br><span class="line">&gt;大于号&gt;&amp;#62;</span><br><span class="line">&amp;和号&amp;&amp;#38;</span><br><span class="line">&quot;引号&quot;&amp;#34;</span><br><span class="line">&#39;撇号 &amp;apos; (IE不支持)&#39;</span><br><span class="line">￠分&amp;cent;&amp;#162;</span><br><span class="line">£镑&amp;pound;&amp;#163;</span><br><span class="line">¥日圆&amp;yen;&amp;#165;</span><br><span class="line">€欧元&amp;euro;&amp;#8364;</span><br><span class="line">§小节&amp;sect;&amp;#167;</span><br><span class="line">©版权&amp;copy;&amp;#169;</span><br><span class="line">®注册商标&amp;reg;&amp;#174;</span><br><span class="line">™商标&amp;trade;&amp;#8482;</span><br><span class="line">×乘号&amp;times;&amp;#215;</span><br><span class="line">÷除号&amp;divide;&amp;#247;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Html5基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5基础系列(3)--表单、flask环境搭建、表单提交数据与python交互</title>
      <link href="/blog/2020/09/17/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--%E8%A1%A8%E5%8D%95%E3%80%81flask%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E3%80%81%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E4%B8%8Epython%E4%BA%A4%E4%BA%92/"/>
      <url>/blog/2020/09/17/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--%E8%A1%A8%E5%8D%95%E3%80%81flask%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E3%80%81%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E4%B8%8Epython%E4%BA%A4%E4%BA%92/</url>
      
        <content type="html"><![CDATA[<ul><li><p>HTML表单</p><ul><li>作用：表单用于获取不同类型的用户输入</li><li>常用的标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;                                  表单</span><br><span class="line">&lt;input&gt;                                 输入域</span><br><span class="line">&lt;textarea&gt;                              文本域</span><br><span class="line">&lt;lable&gt;                                 控制标签</span><br><span class="line">&lt;fieldset&gt;                              定义域</span><br><span class="line">&lt;legend&gt;                                域的标题</span><br><span class="line">&lt;select&gt;                                选择列表</span><br><span class="line">&lt;optgroup&gt;                              选项组</span><br><span class="line">&lt;option&gt;                                下拉列表中的选项</span><br><span class="line">&lt;button&gt;                                按钮</span><br></pre></td></tr></table></figure>举例1：用户输入用户名和密码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">     用户名</span><br><span class="line">     &lt;input type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">     &lt;br&#x2F;&gt;</span><br><span class="line">     密码：</span><br><span class="line">     &lt;input type&#x3D;&quot;password&quot;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>举例2：复选框<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">      选修课程：</span><br><span class="line">      &lt;br&#x2F;&gt;</span><br><span class="line">      语文&lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">      数学&lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">      英语&lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">      物理&lt;input type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>举例3：单选框<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">      性别：</span><br><span class="line">      &lt;br&#x2F;&gt;</span><br><span class="line">      男&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot;&gt;</span><br><span class="line">      女&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>举例4：下拉选框<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">      最大的网站：</span><br><span class="line">      &lt;select&gt;</span><br><span class="line">          &lt;option&gt;百度&lt;&#x2F;option&gt;</span><br><span class="line">          &lt;option&gt;腾讯&lt;&#x2F;option&gt;</span><br><span class="line">          &lt;option&gt;阿里&lt;&#x2F;option&gt;</span><br><span class="line">      &lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>举例5：文本域<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body marginheight&#x3D;&quot;0px&quot; marginwidth&#x3D;&quot;0px&quot;&gt;</span><br><span class="line">    &lt;textarea cols&#x3D;&quot;30&quot; rows&#x3D;&quot;30&quot;&gt;请在此输入信息：&lt;&#x2F;textarea&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>举例6：按钮<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body marginheight&#x3D;&quot;0px&quot; marginwidth&#x3D;&quot;0px&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;OK&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;Cacel&quot;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>举例7：提交<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body marginheight&#x3D;&quot;0px&quot; marginwidth&#x3D;&quot;0px&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>flask环境搭建</p><ul><li>pip install flask</li><li>编辑如下代码，然后执行，如此便起了一个web服务，增加了一个<a href="http://127.0.0.1:5000/的服务接口" target="_blank" rel="noopener">http://127.0.0.1:5000/的服务接口</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app&#x3D;Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;hello world&quot;</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>表单提交数据与python交互</p><ul><li><p>编写如下代码，编写表单，增加一个提交按钮，action设置为flask服务的接口，此接口返回“hello world” ，具体代码如下：<br>如此，点击提交按钮后页面就会返回“hello world”字符串了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;form&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body marginheight&#x3D;&quot;0px&quot; marginwidth&#x3D;&quot;0px&quot;&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    用户名</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot;&gt;</span><br><span class="line">    &lt;br&#x2F;&gt;</span><br><span class="line">    密码：</span><br><span class="line">    &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li><p>上面只是将提交按钮绑定了flask服务的一个接口，下面看下如何在flask接口服务中获取到表单的数据，下面对flask代码稍作修改：如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask,request</span><br><span class="line"></span><br><span class="line">app&#x3D;Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;,methods&#x3D;[&quot;POST&quot;])</span><br><span class="line">def index():</span><br><span class="line">    if request.method&#x3D;&#x3D;&quot;POST&quot;:</span><br><span class="line">        username&#x3D;request.form.get(&quot;username&quot;)</span><br><span class="line">        password&#x3D;request.form.get(&quot;password&quot;)</span><br><span class="line">        return &quot;username:&quot;+username+&quot; password:&quot;+password</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>此时，在flask代码中就已经获取到了表单的数据，如此即可与表单进行交互了</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Html5基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5基础系列(2)--列表、块、布局</title>
      <link href="/blog/2020/09/17/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--%E5%88%97%E8%A1%A8%E3%80%81%E5%9D%97%E3%80%81%E5%B8%83%E5%B1%80/"/>
      <url>/blog/2020/09/17/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--%E5%88%97%E8%A1%A8%E3%80%81%E5%9D%97%E3%80%81%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="1-列表"><a href="#1-列表" class="headerlink" title="1 列表"></a>1 列表</h4><p>常用的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;                            有序列表</span><br><span class="line">&lt;ul&gt;                            无序列表</span><br><span class="line">&lt;li&gt;                            列表项</span><br><span class="line">&lt;dl&gt;                            列表</span><br><span class="line">&lt;dt&gt;                            列表项</span><br><span class="line">&lt;dd&gt;                            描述</span><br></pre></td></tr></table></figure><p>举例：这个是无序列表，显示以点表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;苹果&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;橘子&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;香蕉&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure><p>下面是一个有序列表，有序号1,2,3…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;苹果&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;橘子&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;香蕉&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure><h4 id="2-Html列表分类"><a href="#2-Html列表分类" class="headerlink" title="2 Html列表分类"></a>2 Html列表分类</h4><ul><li><p>无序列表</p><ul><li>使用的标签：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;,&lt;li&gt;</span><br></pre></td></tr></table></figure></li><li>属性：disc（实心圆点）,circle（空心圆圈）,square（实心方块）<br>如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul type&#x3D;&quot;square&quot;&gt;</span><br><span class="line">    &lt;li&gt;苹果&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;橘子&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;火龙果&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>有序列表</p><ul><li>使用的标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;,&lt;li&gt;</span><br></pre></td></tr></table></figure></li><li>属性：A（序号为A,B,C…）,a（序号为a,b,c…),I（序号为罗马数字）,i（序号为小写的罗马数字）,start（可以定义从指定数字开始），type不设置时默认为数字从1开始<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol type&#x3D;&quot;A&quot;&gt;</span><br><span class="line">    &lt;li&gt;苹果&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;橘子&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;火龙果&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>嵌套列表</p><ul><li>使用的标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;,&lt;ol&gt;,&lt;li&gt;</span><br></pre></td></tr></table></figure>如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul type&#x3D;&quot;square&quot;&gt;</span><br><span class="line">    &lt;li&gt;水果&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;ol&gt;</span><br><span class="line">            &lt;li&gt;苹果&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;橘子&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;火龙果&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ol&gt;</span><br><span class="line">    &lt;li&gt;动物&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;ol&gt;</span><br><span class="line">            &lt;li&gt;小狗&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;小猫&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;小老鼠&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ol&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>自定义列表</p><ul><li>使用的标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;,&lt;dt&gt;,&lt;dd&gt;</span><br></pre></td></tr></table></figure>如下：自定义的可以没有开头的列表标识符<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;hello world&lt;&#x2F;dt&gt;</span><br><span class="line">        &lt;dd&gt;打印hello world&lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dt&gt;hello world&lt;&#x2F;dt&gt;</span><br><span class="line">        &lt;dd&gt;打印hello world&lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dt&gt;hello world&lt;&#x2F;dt&gt;</span><br><span class="line">        &lt;dd&gt;打印hello world&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure><h4 id="3-Html-的块"><a href="#3-Html-的块" class="headerlink" title="3 Html 的块"></a>3 Html 的块</h4></li></ul></li><li><p>HTML块元素</p><ul><li>块元素在显示时，通常会以新行开始,如 :<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;,&lt;p&gt;,&lt;ul&gt;</span><br></pre></td></tr></table></figure>如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;!-- 块 --&gt;</span><br><span class="line"> &lt;h1&gt; 标题 &lt;&#x2F;h1&gt;</span><br><span class="line"> &lt;p&gt; 段落 &lt;&#x2F;p&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>HTML内联元素</p><ul><li>内联元素通常不会以新行开始如: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;,&lt;a&gt;,&lt;img&gt;</span><br></pre></td></tr></table></figure>如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;!-- 内联元素 --&gt;</span><br><span class="line"> &lt;b&gt;加粗字体&lt;&#x2F;b&gt;</span><br><span class="line"> &lt;a&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>HTML div元素</p><p> div元素也被成为块元素，其主要是组合HTML元素的容器，div本身没有任何效果，主要是配置css样式使用的，当在css文件中如果使用了指定了div的id，指定的div中的所有内容都会被改变样式，如果通过div的id以及子标签指定，则可以修改指定div的id下面的指定的标签的样式</p><p> 如下创建一个css文件，指定_div_id 下面的p标签的内容的颜色为红色（#用来指定div的id，空格指定其下的子标签）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#div_id p&#123;</span><br><span class="line"> color: crimson;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 然后编写一个html文件，并在其中引入css样式文件，具体如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;div&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;mycss.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;div_id&quot;&gt;</span><br><span class="line">        &lt;p&gt;hello world&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;a&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li><p>HTML span元素</p><p> span元素时内联元素，可作为文本的容器<br> span和div差不多，只不过span强调了作为文本的容器，可以对一部分文本样式进行设置，div和span如果不设置css样式，那么这两个标签对页面没有任何显示效果<br> 如：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;div&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;mycss.css&quot;&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        span&#123;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;div_id&quot;&gt;</span><br><span class="line">        &lt;p&gt;&lt;span&gt;hello world&lt;&#x2F;span&gt; good morning&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;a&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-HTML布局"><a href="#4-HTML布局" class="headerlink" title="4 HTML布局"></a>4 HTML布局</h4><ul><li>使用div元素布局<br>如：float表示浮动，从左到右排列，如果继续在下面布局，需要使用clear：both<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;div&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        #container&#123;</span><br><span class="line">            width:100%;</span><br><span class="line">            height:950px;</span><br><span class="line">            background-color: darkgray;</span><br><span class="line">        &#125;</span><br><span class="line">        #heading&#123;</span><br><span class="line">            width:100%;</span><br><span class="line">            height:5%;</span><br><span class="line">            background-color: dimgrey;</span><br><span class="line">        &#125;</span><br><span class="line">        #content_menu&#123;</span><br><span class="line">            width:30%;</span><br><span class="line">            height: 80%;</span><br><span class="line">            background-color: burlywood;</span><br><span class="line">            float:left</span><br><span class="line">        &#125;</span><br><span class="line">        #content_body&#123;</span><br><span class="line">            width:70%;</span><br><span class="line">            height:80%;</span><br><span class="line">            background-color: aliceblue;</span><br><span class="line">            float:left</span><br><span class="line">        &#125;</span><br><span class="line">        #footing&#123;</span><br><span class="line">            width:100%;</span><br><span class="line">            height: 15%;</span><br><span class="line">            background-color: chocolate;</span><br><span class="line">            clear:both</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;heading&quot;&gt;头部&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;content_menu&quot;&gt;内容菜单&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;content_body&quot;&gt;内容主题&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;footing&quot;&gt;底部&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li><li>使用table元素布局<br>如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;table&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body marginheight&#x3D;&quot;0px&quot; marginwidth&#x3D;&quot;0px&quot;&gt;</span><br><span class="line">    &lt;table width&#x3D;&quot;100%&quot; height&#x3D;&quot;950px&quot; style&#x3D;&quot;background-color: darkgray&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td colspan&#x3D;&quot;3&quot; width&#x3D;&quot;100%&quot; height&#x3D;&quot;5%&quot; style&#x3D;&quot;background-color: dimgray&quot;&gt;这是头部&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td width&#x3D;&quot;20%&quot; height&#x3D;&quot;80%&quot; style&#x3D;&quot;background-color: darkgoldenrod&quot;&gt;</span><br><span class="line">                左菜单</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td width&#x3D;&quot;60%&quot; height&#x3D;&quot;80%&quot; style&#x3D;&quot;background-color: aliceblue&quot;&gt;</span><br><span class="line">                中间主题</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td width&#x3D;&quot;20%&quot; height&#x3D;&quot;80%&quot; style&#x3D;&quot;background-color: darkgoldenrod&quot;&gt;</span><br><span class="line">                右菜单</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td colspan&#x3D;&quot;3&quot; width&#x3D;&quot;100%&quot; height&#x3D;&quot;15%&quot; style&#x3D;&quot;background-color: chocolate&quot;</span><br><span class="line">                底部</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Html5基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html5基础系列(1)--简介、元素、属性、格式化、链接、表格</title>
      <link href="/blog/2020/09/15/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--%E7%AE%80%E4%BB%8B%E3%80%81%E5%85%83%E7%B4%A0%E3%80%81%E5%B1%9E%E6%80%A7%E3%80%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E3%80%81%E9%93%BE%E6%8E%A5%E3%80%81%E8%A1%A8%E6%A0%BC/"/>
      <url>/blog/2020/09/15/Html5%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--%E7%AE%80%E4%BB%8B%E3%80%81%E5%85%83%E7%B4%A0%E3%80%81%E5%B1%9E%E6%80%A7%E3%80%81%E6%A0%BC%E5%BC%8F%E5%8C%96%E3%80%81%E9%93%BE%E6%8E%A5%E3%80%81%E8%A1%A8%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是HTML？"><a href="#1-什么是HTML？" class="headerlink" title="1 什么是HTML？"></a>1 什么是HTML？</h4><ul><li><p>HTML是用来描述网页的一种语言</p></li><li><p>HTML指超文本标记语言，即Hyper Text Markup Language</p></li><li><p>HTML不是编程语言，是一种标记语言</p><h4 id="2-HTML5-新特性"><a href="#2-HTML5-新特性" class="headerlink" title="2 HTML5 新特性"></a>2 HTML5 新特性</h4></li><li><p>用于绘画的canvas标签</p></li><li><p>用于 媒介回放的video和autio元素</p></li><li><p>对本地离线存储的更好的支持</p></li><li><p>新的特殊内容元素，如article、footer、header、nav、section等</p></li><li><p>新的表单控件，如 calendar、date、time、email、url、search等</p></li><li><p>浏览器的支持，如Safari、Chrome、Firefox、Opera包括IE9之后基本支持了HTML5</p><h4 id="3-HTML基础元素"><a href="#3-HTML基础元素" class="headerlink" title="3 HTML基础元素"></a>3 HTML基础元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;&#x2F;html&gt;         网页</span><br><span class="line">&lt;head&gt;&lt;&#x2F;head&gt;         头</span><br><span class="line">&lt;body&gt;&lt;&#x2F;body&gt;         网页主体</span><br><span class="line">&lt;h1&gt;&lt;&#x2F;h1&gt;             一级标题</span><br><span class="line">&lt;h2&gt;&lt;&#x2F;h2&gt;             二级标题</span><br><span class="line">&lt;h3&gt;&lt;&#x2F;h3&gt;             三级标题</span><br><span class="line">&lt;h4&gt;&lt;&#x2F;h4&gt;             四级标题</span><br><span class="line">&lt;h5&gt;&lt;&#x2F;h5&gt;             五级标题</span><br><span class="line">&lt;h6&gt;&lt;&#x2F;h6&gt;             六级标题</span><br><span class="line">&lt;p&gt;&lt;&#x2F;p&gt;               段落</span><br><span class="line">&lt;br &#x2F;&gt;                 回车符</span><br><span class="line">&lt;a&gt;&lt;&#x2F;a&gt;               链接</span><br><span class="line">&lt;img &#x2F;&gt;               图片</span><br></pre></td></tr></table></figure><h4 id="4-HTML-属性"><a href="#4-HTML-属性" class="headerlink" title="4 HTML 属性"></a>4 HTML 属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">href                   链接中指定链接地址的属性，如：&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">align                  标题中指定对齐格式，如标题居中对齐：&lt;h1 align&#x3D;center&gt;this is h1 title&lt;&#x2F;h1&gt;</span><br><span class="line">bgcolor                body中指定背景颜色，如：&lt;body bgcolor&#x3D;&quot;#f0ffff&quot;&gt;xxx&lt;&#x2F;body&gt;</span><br><span class="line">background             body中指定背景图片</span><br><span class="line">target                 链接中指定打开链接的位置，如在新的标签中打开：&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot; target&#x3D;&quot;_blank&quot;&gt;百度一下&lt;&#x2F;a&gt;</span><br><span class="line">class                  规定元素的类型，如：&lt;h1 align&#x3D;&quot;center&quot; class&#x3D;&quot;h1&quot; id&#x3D;&quot;h1&quot;&gt;标题&lt;&#x2F;h1&gt;</span><br><span class="line">id                     规定元素的唯一ID，如：&lt;h1 align&#x3D;&quot;center&quot; class&#x3D;&quot;h1&quot; id&#x3D;&quot;h1&quot;&gt;标题&lt;&#x2F;h1&gt;</span><br><span class="line">style                  规定元素的样式</span><br><span class="line">title                  规定元素的额外信息</span><br><span class="line">src                    图片中指定图片的位置，如：&lt;img src&#x3D;&quot;statics&#x2F;image&#x2F;0001.jpg&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="5-HTML格式化"><a href="#5-HTML格式化" class="headerlink" title="5 HTML格式化"></a>5 HTML格式化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;                    定义粗体文本，如&lt;b&gt;welcom to bold word&lt;&#x2F;b&gt;</span><br><span class="line">&lt;big&gt;                  定义大号字,如&lt;big&gt;welcom to big word&lt;&#x2F;big&gt;</span><br><span class="line">&lt;em&gt;                   定义着重文字,如&lt;em&gt; welcom to em word&lt;&#x2F;em&gt;</span><br><span class="line">&lt;i&gt;                    定义斜体字，如&lt;i&gt;welcom to slide word&lt;&#x2F;i&gt;</span><br><span class="line">&lt;small&gt;                定义小号字，如&lt;small&gt; welcom to small world&lt;&#x2F;small&gt;</span><br><span class="line">&lt;strong&gt;               定义加重语气,如&lt;strong&gt; welcom to strong workd&lt;&#x2F;strong&gt;</span><br><span class="line">&lt;sub&gt;                  定义下标字,如&lt;sub&gt; welcom to sub word&lt;&#x2F;sub&gt;</span><br><span class="line">&lt;sup&gt;                  定义上标字,如&lt;sup&gt; welcom to sup world&lt;&#x2F;sup&gt;</span><br><span class="line">&lt;ins&gt;                  定义插入字,如&lt;ins&gt;welcom to ins world&lt;&#x2F;ins&gt;</span><br><span class="line">&lt;del&gt;                  定义删除字,如&lt;del&gt;welcom to del world&lt;&#x2F;del&gt;</span><br></pre></td></tr></table></figure><h4 id="6-HTML-样式"><a href="#6-HTML-样式" class="headerlink" title="6 HTML 样式"></a>6 HTML 样式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">标签：</span><br><span class="line">&lt;style&gt;                样式定义</span><br><span class="line">&lt;link&gt;                 资源引用</span><br><span class="line">属性</span><br><span class="line">rel&#x3D;&quot;stylesheet&quot;       外部样式表</span><br><span class="line">type&#x3D;&quot;text&#x2F;css&quot;        引入文档的类型</span><br><span class="line">margin-left            边距</span><br></pre></td></tr></table></figure></li><li><p>样式表的插入方法</p><ul><li><p>外部样式表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;mystyle.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>例如：<br>新建一个mystyle.css文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h1&#123;</span><br><span class="line"> color: crimson;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>然后新建一个index.html文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;style&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;mystyle.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;标题h1&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">这样即可以通过css文件来改变HTML文件h1标题的颜色了</span><br></pre></td></tr></table></figure></li><li><p>内部样式表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">body &#123;background-color:red&#125;</span><br><span class="line">p &#123;margin-left:20px&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>例如编辑如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;style&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;mystyle.css&quot;&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        p&#123;</span><br><span class="line">            color: red</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;标题h1&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;welcom to redrose2100&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这样既可通过内部样式表的形式修改p段落的字体颜色了，修改其他属性类似</p></li><li><p>内联样式表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style &#x3D; &quot;color:red&quot;&gt;</span><br></pre></td></tr></table></figure><p>编辑如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;style&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;mystyle.css&quot;&gt;</span><br><span class="line">    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line">        p&#123;</span><br><span class="line">            color: red</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;标题h1&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;welcom to redrose2100&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;a style&#x3D;&quot;color: green&quot;&gt;click me to jump to redrose2100&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>这样就可以通过内联的方式设置连接字体颜色了</p></li></ul></li></ul><h4 id="7-HTML链接"><a href="#7-HTML链接" class="headerlink" title="7 HTML链接"></a>7 HTML链接</h4><ul><li>文字链接<br>如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度一下&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure></li><li>图片链接<br>如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;&lt;img src&#x3D;&quot;statics&#x2F;image&#x2F;00001.jpg&quot; width&#x3D;&quot;100px&quot; height&#x3D;&quot;100px&quot; alt&#x3D;&quot;百度一下&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>这里面width和height是用来设置图片宽和高的，而alt属性时用来设置当照片不存在或者未成功加载显示的时候，图片的位置可以显示出来文字提示，如果不加alt属性，则当图片无法正常显示的时候就会显示一个空白的无法显示的图片式样</li><li>文档内的链接<br>如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a name&#x3D;&quot;baidu&quot;&gt;hello world&lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;#baidu&quot;&gt;跳转到hello world&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>在文档内，当点击“跳转到hello world”字符时，就会跳转到上面hello world的字符上面，这里就是通过将上面一个链接增加了一个name属性</li></ul><h4 id="8-HTMl-表格"><a href="#8-HTMl-表格" class="headerlink" title="8 HTMl 表格"></a>8 HTMl 表格</h4><p>表格相关的标签如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;                          定义表格</span><br><span class="line">&lt;caption&gt;                        定义表格标题</span><br><span class="line">&lt;th&gt;                             定义表格的表头</span><br><span class="line">&lt;tr&gt;                             定义表格的行</span><br><span class="line">&lt;td&gt;                             定义表格的单元</span><br><span class="line">&lt;thead&gt;                          定义表格的页眉</span><br><span class="line">&lt;tbody&gt;                          定义表格的主体</span><br><span class="line">&lt;tfoot&gt;                          定义表格的页脚</span><br><span class="line">&lt;col&gt;                            定义表格的列属性</span><br></pre></td></tr></table></figure><p>首先看下普通的常用的表格：其中cellpadding是设置边距的，而cellspacing是设置单元格间距，bgcolor可以用于设置背景颜色，background可以用于设置背景图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot; cellpadding&#x3D;&quot;10&quot; cellspacing&#x3D;&quot;10&quot; bgcolor&#x3D;&quot;green&quot;&gt;</span><br><span class="line">        &lt;caption&gt;测试用&lt;&#x2F;caption&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;单元&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;单元&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;单元&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;单元格1&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;单元格3&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;单元格1&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;单元格2&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;单元格3&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure><p>下面看一个表格中带标签的使用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">       &lt;caption&gt;测试用&lt;&#x2F;caption&gt;</span><br><span class="line">       &lt;tr&gt;</span><br><span class="line">           &lt;td&gt;单元&lt;&#x2F;td&gt;</span><br><span class="line">           &lt;td&gt;单元&lt;&#x2F;td&gt;</span><br><span class="line">           &lt;td&gt;单元&lt;&#x2F;td&gt;</span><br><span class="line">       &lt;&#x2F;tr&gt;</span><br><span class="line">       &lt;tr&gt;</span><br><span class="line">           &lt;td&gt;</span><br><span class="line">               &lt;ul&gt;</span><br><span class="line">                   &lt;li&gt;单元1&lt;&#x2F;li&gt;</span><br><span class="line">                   &lt;li&gt;单元1&lt;&#x2F;li&gt;</span><br><span class="line">                   &lt;li&gt;单元1&lt;&#x2F;li&gt;</span><br><span class="line">                   &lt;li&gt;单元1&lt;&#x2F;li&gt;</span><br><span class="line">               &lt;&#x2F;ul&gt;</span><br><span class="line">           &lt;&#x2F;td&gt;</span><br><span class="line">           &lt;td&gt;</span><br><span class="line">               &lt;ul&gt;</span><br><span class="line">                   &lt;li&gt;单元11&lt;&#x2F;li&gt;</span><br><span class="line">                   &lt;li&gt;单元12&lt;&#x2F;li&gt;</span><br><span class="line">                   &lt;li&gt;单元13&lt;&#x2F;li&gt;</span><br><span class="line">               &lt;&#x2F;ul&gt;</span><br><span class="line">           &lt;&#x2F;td&gt;</span><br><span class="line">           &lt;td&gt;</span><br><span class="line">               &lt;ul&gt;</span><br><span class="line">                   &lt;li&gt;单元11&lt;&#x2F;li&gt;</span><br><span class="line">                   &lt;li&gt;单元12&lt;&#x2F;li&gt;</span><br><span class="line">                   &lt;li&gt;单元13&lt;&#x2F;li&gt;</span><br><span class="line">               &lt;&#x2F;ul&gt;</span><br><span class="line">           &lt;&#x2F;td&gt;</span><br><span class="line">       &lt;&#x2F;tr&gt;</span><br><span class="line">   &lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Html5基础系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Html5基础系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pluggy插件系统超级详细源码解读与分析系列总结</title>
      <link href="/blog/2020/09/14/pluggy%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%B6%85%E7%BA%A7%E8%AF%A6%E7%BB%86%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/"/>
      <url>/blog/2020/09/14/pluggy%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%B6%85%E7%BA%A7%E8%AF%A6%E7%BB%86%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B8%8E%E5%88%86%E6%9E%90%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><a href="https://redrose2100.github.io/blog/2020/09/08/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(1)--HookspecMarker%E7%B1%BB%E5%92%8CHookimplMarker%E7%B1%BB%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">pluggy源码解读系列(1)–HookspecMarker类和HookimplMarker类分析</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/10/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(2)--PluginManager%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%8C%96/" target="_blank" rel="noopener">pluggy源码解读系列(2)–PluginManager类实例化</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/10/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(3)--add-hookspecs%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB/" target="_blank" rel="noopener">pluggy源码解读系列(3)–add_hookspecs增加自定义的接口类</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/11/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(4)--register%E6%B3%A8%E5%86%8C%E6%8F%92%E4%BB%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">pluggy源码解读系列(4)–register注册插件源码解析</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/14/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(5)--hook%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">pluggy源码解读系列(5)–hook钩子函数调用执行过程分析</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/14/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(6)--PluginManager%E7%B1%BB%E7%9A%84%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">pluggy源码解读系列(6)–PluginManager类的其他功能</a></p>]]></content>
      
      
      <categories>
          
          <category> pluggy源码解读系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pluggy源码解读系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pluggy源码解读系列(6)--PluginManager类的其他功能</title>
      <link href="/blog/2020/09/14/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(6)--PluginManager%E7%B1%BB%E7%9A%84%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD/"/>
      <url>/blog/2020/09/14/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(6)--PluginManager%E7%B1%BB%E7%9A%84%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>本系列前五篇其实已经将pluggy的流程原理等分析完了，只有PluginManager类还有几个方法的源代码没有提到，这里将这些方法拿出来简单的分析一下，因为有可能会用到，当然也有可能根本不会用这些</p><h4 id="unregister-取消注册插件"><a href="#unregister-取消注册插件" class="headerlink" title="unregister 取消注册插件"></a>unregister 取消注册插件</h4><p>注册插件的过程都分析过了，取消注册过程就简单了，这里可以简单的看一下，这里主要就是对_name2plugin和_plugin2hookcallers这两个字典进行删除对应的插件，即取消注册插件，源代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def unregister(self, plugin&#x3D;None, name&#x3D;None):</span><br><span class="line">    &quot;&quot;&quot; unregister a plugin object and all its contained hook implementations</span><br><span class="line">    from internal data structures. &quot;&quot;&quot;</span><br><span class="line">    if name is None:</span><br><span class="line">        assert plugin is not None, &quot;one of name or plugin needs to be specified&quot;</span><br><span class="line">        name &#x3D; self.get_name(plugin)</span><br><span class="line"></span><br><span class="line">    if plugin is None:</span><br><span class="line">        plugin &#x3D; self.get_plugin(name)</span><br><span class="line"></span><br><span class="line">    # if self._name2plugin[name] &#x3D;&#x3D; None registration was blocked: ignore</span><br><span class="line">    if self._name2plugin.get(name):</span><br><span class="line">        del self._name2plugin[name]</span><br><span class="line"></span><br><span class="line">    for hookcaller in self._plugin2hookcallers.pop(plugin, []):</span><br><span class="line">        hookcaller._remove_plugin(plugin)</span><br><span class="line"></span><br><span class="line">    return plugin</span><br></pre></td></tr></table></figure><h4 id="set-blocked-设置阻塞状态"><a href="#set-blocked-设置阻塞状态" class="headerlink" title="set_blocked 设置阻塞状态"></a>set_blocked 设置阻塞状态</h4><p>这个设置阻塞状态可以是pluggy更加灵活，比如在在大多数场景下都要注册插件，但是在某中场景下，某个插件不支持，此时则可以暂时给设置阻塞状态，这样pluggy插件系统使用起来更加灵活</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def set_blocked(self, name):</span><br><span class="line">    &quot;&quot;&quot; block registrations of the given name, unregister if already registered. &quot;&quot;&quot;</span><br><span class="line">    self.unregister(name&#x3D;name)</span><br><span class="line">    self._name2plugin[name] &#x3D; None</span><br></pre></td></tr></table></figure><h4 id="is-blocked-判断插件是否处于阻塞状态"><a href="#is-blocked-判断插件是否处于阻塞状态" class="headerlink" title="is_blocked 判断插件是否处于阻塞状态"></a>is_blocked 判断插件是否处于阻塞状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def is_blocked(self, name):</span><br><span class="line">    &quot;&quot;&quot; return &#96;&#96;True&#96;&#96; if the given plugin name is blocked. &quot;&quot;&quot;</span><br><span class="line">    return name in self._name2plugin and self._name2plugin[name] is None</span><br></pre></td></tr></table></figure><h4 id="is-registered-判断插件是否是注册的"><a href="#is-registered-判断插件是否是注册的" class="headerlink" title="is_registered 判断插件是否是注册的"></a>is_registered 判断插件是否是注册的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def is_registered(self, plugin):</span><br><span class="line">    &quot;&quot;&quot; Return &#96;&#96;True&#96;&#96; if the plugin is already registered. &quot;&quot;&quot;</span><br><span class="line">    return plugin in self._plugin2hookcallers</span><br></pre></td></tr></table></figure><h4 id="get-plugin-根据插件名称获取插件对象"><a href="#get-plugin-根据插件名称获取插件对象" class="headerlink" title="get_plugin 根据插件名称获取插件对象"></a>get_plugin 根据插件名称获取插件对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_plugin(self, name):</span><br><span class="line">    &quot;&quot;&quot; Return a plugin or &#96;&#96;None&#96;&#96; for the given name. &quot;&quot;&quot;</span><br><span class="line">    return self._name2plugin.get(name)</span><br></pre></td></tr></table></figure><h4 id="get-name-根据插件对象获取插件名称"><a href="#get-name-根据插件对象获取插件名称" class="headerlink" title="get_name 根据插件对象获取插件名称"></a>get_name 根据插件对象获取插件名称</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_name(self, plugin):</span><br><span class="line">    &quot;&quot;&quot; Return name for registered plugin or &#96;&#96;None&#96;&#96; if not registered. &quot;&quot;&quot;</span><br><span class="line">    for name, val in self._name2plugin.items():</span><br><span class="line">        if plugin &#x3D;&#x3D; val:</span><br><span class="line">            return name</span><br></pre></td></tr></table></figure><h4 id="load-setuptools-entrypoints-通过setuptools的方式注册插件"><a href="#load-setuptools-entrypoints-通过setuptools的方式注册插件" class="headerlink" title="load_setuptools_entrypoints 通过setuptools的方式注册插件"></a>load_setuptools_entrypoints 通过setuptools的方式注册插件</h4><p>这个方法需要注意一下，这个挺重要的，可以通过指定group名称的方式来自动注册插件，只要当前的环境中其他包中有通过setuptools的方式定义了此group名称的模块，就可以自动的注册，在著名的自动化测试框架pytest中，就是使用了这个函数，对group为“pytest11”的插件进行自动注册，使用起来非常方便，这样用户就可以通过自定义pytest11模块来对pytest做功能增强了，而不需要修改pytest的源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def load_setuptools_entrypoints(self, group, name&#x3D;None):</span><br><span class="line">    &quot;&quot;&quot; Load modules from querying the specified setuptools &#96;&#96;group&#96;&#96;.</span><br><span class="line"></span><br><span class="line">    :param str group: entry point group to load plugins</span><br><span class="line">    :param str name: if given, loads only plugins with the given &#96;&#96;name&#96;&#96;.</span><br><span class="line">    :rtype: int</span><br><span class="line">    :return: return the number of loaded plugins by this call.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    count &#x3D; 0</span><br><span class="line">    for dist in importlib_metadata.distributions():</span><br><span class="line">        for ep in dist.entry_points:</span><br><span class="line">            if (</span><br><span class="line">                ep.group !&#x3D; group</span><br><span class="line">                or (name is not None and ep.name !&#x3D; name)</span><br><span class="line">                # already registered</span><br><span class="line">                or self.get_plugin(ep.name)</span><br><span class="line">                or self.is_blocked(ep.name)</span><br><span class="line">            ):</span><br><span class="line">                continue</span><br><span class="line">            plugin &#x3D; ep.load()</span><br><span class="line">            self.register(plugin, name&#x3D;ep.name)</span><br><span class="line">            self._plugin_distinfo.append((plugin, DistFacade(dist)))</span><br><span class="line">            count +&#x3D; 1</span><br><span class="line">    return count</span><br></pre></td></tr></table></figure><p>PluginManager类还有几个简单的方法，这里就不再一一分析了，至此对pluggy的源码分析就全部结束了</p>]]></content>
      
      
      <categories>
          
          <category> pluggy源码解读系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pluggy源码解读系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pluggy源码解读系列(5)--hook钩子函数调用执行过程分析</title>
      <link href="/blog/2020/09/14/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(5)--hook%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/"/>
      <url>/blog/2020/09/14/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(5)--hook%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>经过pluggy源码解读系列1-4的分析，已经完成插件定义、spec定义，插件注册等环节，下面就到了调用插件执行了，即hook钩子函数是如何被调用执行的，下面还是先把pluggy使用的代码放下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line"># HookspecMarker 和 HookimplMarker 实质上是一个装饰器带参数的装饰器类，作用是给函数增加额外的属性设置</span><br><span class="line">hookspec &#x3D; pluggy.HookspecMarker(&quot;myproject&quot;)</span><br><span class="line">hookimpl &#x3D; pluggy.HookimplMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line"># 定义自己的Spec，这里可以理解为定义接口类</span><br><span class="line">class MySpec:</span><br><span class="line">    # hookspec 是一个装饰类中的方法的装饰器，为此方法增额外的属性设置，这里myhook可以理解为定义了一个接口</span><br><span class="line">    @hookspec</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 定义了一个插件</span><br><span class="line">class Plugin_1:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的和</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook()&quot;)</span><br><span class="line">        return arg1 + arg2</span><br><span class="line"></span><br><span class="line"># 定义第二个插件</span><br><span class="line">class Plugin_2:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook()&quot;)</span><br><span class="line">        return arg1 - arg2</span><br><span class="line"></span><br><span class="line"># 实例化一个插件管理的对象，注意这里的名称要与文件开头定义装饰器的时候的名称一致</span><br><span class="line">pm &#x3D; pluggy.PluginManager(&quot;myproject&quot;)</span><br><span class="line"># 将自定义的接口类加到钩子定义中去</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"># 注册定义的两个插件</span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line"># 通过插件管理对象的钩子调用方法，这时候两个插件中的这个方法都会执行，而且遵循后注册先执行即LIFO的原则，两个插件的结果讲义列表的形式返回</span><br><span class="line">results &#x3D; pm.hook.myhook(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure><p>通过上面的例子，可以看出，最后一个步骤就是通过PluginManager实例的pm的一个hook属性调用myhook函数，而myhook即定义的接口函数，在这个例子中，这个接口函数在pluggin_1和pluggin_2两个插件中都有实现，则这里两个插件的myhook函数都会执行，执行的顺序也是后讲究的，那么这些流程的控制执行等都本节详细讲述</p><p>现在先回头再看一下，在分析add_hookspecs方法的时候讲到，首先hook是PluginManager类的一个实例，这个比较好理解，下面是add_hookspecs方法的源代码，这个在前面都已经详细的分析过了，这里放这里再简单回顾一下，通过下面的代码可以发现，就是在这个函数中给hook设置了接口函数myhook的属性，myhook的属性值是_HookCaller类的一个实例，<br>那么这里一个实例为什么当做函数调用了呢，这就涉及到python的高级语法中<strong>call</strong>魔法函数的应用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def add_hookspecs(self, module_or_class):</span><br><span class="line">    &quot;&quot;&quot; add new hook specifications defined in the given &#96;&#96;module_or_class&#96;&#96;.</span><br><span class="line">    Functions are recognized if they have been decorated accordingly. &quot;&quot;&quot;</span><br><span class="line">    names &#x3D; []</span><br><span class="line">    for name in dir(module_or_class):</span><br><span class="line">        spec_opts &#x3D; self.parse_hookspec_opts(module_or_class, name)</span><br><span class="line">        if spec_opts is not None:</span><br><span class="line">            hc &#x3D; getattr(self.hook, name, None)</span><br><span class="line">            if hc is None:</span><br><span class="line">                hc &#x3D; _HookCaller(name, self._hookexec, module_or_class, spec_opts)</span><br><span class="line">                setattr(self.hook, name, hc)</span><br><span class="line">            else:</span><br><span class="line">                # plugins registered this hook without knowing the spec</span><br><span class="line">                hc.set_specification(module_or_class, spec_opts)</span><br><span class="line">                for hookfunction in hc.get_hookimpls():</span><br><span class="line">                    self._verify_hook(hc, hookfunction)</span><br><span class="line">            names.append(name)</span><br><span class="line"></span><br><span class="line">    if not names:</span><br><span class="line">        raise ValueError(</span><br><span class="line">            &quot;did not find any %r hooks in %r&quot; % (self.project_name, module_or_class)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>前面也都分析过<strong>call</strong>的应用，所以这里就是应用了这个特点，即把_HookCaller类的一个实例当做函数调用，实质上就是调用了_HookCaller类的<strong>call</strong>魔法函数，这里把_HookCaller类的<strong>call</strong>方法的代码放到下面，前面层提过，这个方法是整个pluggy最最核心的一个函数（pluggy最最核心的类是PluginManager类，它是插件管理注册等等控制类，而pluggy最最核心的函数就是_HookCaller类的<strong>call</strong>函数了，它控制了整个插件系统的钩子函数的执行过程）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def __call__(self, *args, **kwargs):</span><br><span class="line">    if args:</span><br><span class="line">        raise TypeError(&quot;hook calling supports only keyword arguments&quot;)</span><br><span class="line">    assert not self.is_historic()</span><br><span class="line"></span><br><span class="line">    # This is written to avoid expensive operations when not needed.</span><br><span class="line">    if self.spec:</span><br><span class="line">        for argname in self.spec.argnames:</span><br><span class="line">            if argname not in kwargs:</span><br><span class="line">                notincall &#x3D; tuple(set(self.spec.argnames) - kwargs.keys())</span><br><span class="line">                warnings.warn(</span><br><span class="line">                    &quot;Argument(s) &#123;&#125; which are declared in the hookspec &quot;</span><br><span class="line">                    &quot;can not be found in this hook call&quot;.format(notincall),</span><br><span class="line">                    stacklevel&#x3D;2,</span><br><span class="line">                )</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">        firstresult &#x3D; self.spec.opts.get(&quot;firstresult&quot;)</span><br><span class="line">    else:</span><br><span class="line">        firstresult &#x3D; False</span><br><span class="line"></span><br><span class="line">    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)</span><br></pre></td></tr></table></figure><p>下面就对这个函数做详细的分析</p><ul><li>首先这个函数的前两行就限定了插件中定义的函数的参数必须是key-value键值对的形式，不支持可变参数的形式</li><li>然后就是对参数做分析，主要就是分析出firstresult的值是True还是False</li><li>下面就是调用self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)函数了<br>这里，首先name就是接口函数的名字，比如这里就是myhook字符串</li></ul><p>下面看下第二个参数，第二个参数是一个函数，这个函数的代码如下：这里可以看出，这里就是上一节分析的注册函数的列表，所以这个返回的是一个实现函数的列表，第三个参数是函数的参数，第四个参数就是firstresult值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def get_hookimpls(self):</span><br><span class="line">    # Order is important for _hookexec</span><br><span class="line">    return self._nonwrappers + self._wrappers</span><br></pre></td></tr></table></figure><p>下面就到了最最核心的函数了，即hookexec函数，通过前面几节的分析，已经知道这个函数就是callers.py文件中的_multicall函数，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):</span><br><span class="line">    &quot;&quot;&quot;Execute a call into multiple python functions&#x2F;methods and return the</span><br><span class="line">    result(s).</span><br><span class="line"></span><br><span class="line">    &#96;&#96;caller_kwargs&#96;&#96; comes from _HookCaller.__call__().</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    __tracebackhide__ &#x3D; True</span><br><span class="line">    results &#x3D; []</span><br><span class="line">    excinfo &#x3D; None</span><br><span class="line">    try:  # run impl and wrapper setup functions in a loop</span><br><span class="line">        teardowns &#x3D; []</span><br><span class="line">        try:</span><br><span class="line">            for hook_impl in reversed(hook_impls):</span><br><span class="line">                try:</span><br><span class="line">                    args &#x3D; [caller_kwargs[argname] for argname in hook_impl.argnames]</span><br><span class="line">                except KeyError:</span><br><span class="line">                    for argname in hook_impl.argnames:</span><br><span class="line">                        if argname not in caller_kwargs:</span><br><span class="line">                            raise HookCallError(</span><br><span class="line">                                &quot;hook call must provide argument %r&quot; % (argname,)</span><br><span class="line">                            )</span><br><span class="line"></span><br><span class="line">                if hook_impl.hookwrapper:</span><br><span class="line">                    try:</span><br><span class="line">                        gen &#x3D; hook_impl.function(*args)</span><br><span class="line">                        next(gen)  # first yield</span><br><span class="line">                        teardowns.append(gen)</span><br><span class="line">                    except StopIteration:</span><br><span class="line">                        _raise_wrapfail(gen, &quot;did not yield&quot;)</span><br><span class="line">                else:</span><br><span class="line">                    res &#x3D; hook_impl.function(*args)</span><br><span class="line">                    if res is not None:</span><br><span class="line">                        results.append(res)</span><br><span class="line">                        if firstresult:  # halt further impl calls</span><br><span class="line">                            break</span><br><span class="line">        except BaseException:</span><br><span class="line">            excinfo &#x3D; sys.exc_info()</span><br><span class="line">    finally:</span><br><span class="line">        if firstresult:  # first result hooks return a single value</span><br><span class="line">            outcome &#x3D; _Result(results[0] if results else None, excinfo)</span><br><span class="line">        else:</span><br><span class="line">            outcome &#x3D; _Result(results, excinfo)</span><br><span class="line"></span><br><span class="line">        # run all wrapper post-yield blocks</span><br><span class="line">        for gen in reversed(teardowns):</span><br><span class="line">            try:</span><br><span class="line">                gen.send(outcome)</span><br><span class="line">                _raise_wrapfail(gen, &quot;has second yield&quot;)</span><br><span class="line">            except StopIteration:</span><br><span class="line">                pass</span><br><span class="line"></span><br><span class="line">        return outcome.get_result()</span><br></pre></td></tr></table></figure><p>这个最核心的函数，其实也是比较容易看懂的，只要前几节的分析大概都还有个印象，那么这个函数还是比较容易理解的</p><p>首先定义个一个结果列表，用于存放每个插件的实现函数执行的结果</p><p>然后定义了个teardown的列表，用于存放执行teardown操作的操作对象</p><p>然后将hook_impls即插件中对接口函数的实现函数倒序遍历，这也是看很多文档博客会说pluggy插件执行的顺序是后注册先执行的原因，然后开始解析函数的参数</p><p>然后判断实现函数的hookwrapper属性值是否为True，如果为True表示此函数带有yield关键字，即首先执行yield之前的代码，然后会生成一个对象，即生成器，将生成的对象存放teardowns，用于所有插件之后再来执行这些操作，这也就是为什么网上很多博客等说的pluggy的插件实现函数中如果带有yield，则yield之后的代码会在所有的普通插件执行完成之后再去执行。else分支就是不带yield关键字的实现函数，则执行执行，并且将结果存放到results列表，同时如果判断firstresult结果为True，则结束循环，即执行得到一个结果即OK</p><p>当然如果firstresult为False，则所有的插件注册的函数都会执行的</p><p>在finnally代码块中可以看到，如果firstresult结果为True，则直接返回第一个结果，而如果firstresult为False，则会讲所有的结果以列表的形式返回</p><p>最后再去倒序遍历执行teardown列表中存放的操作，即当带有多个yield关键字插件的时候，后注册的yeild之后的代码先执行</p><p>最后将结果返回</p><p>ok，pluggy的钩子函数的执行过程的源码分析就到这里了</p>]]></content>
      
      
      <categories>
          
          <category> pluggy源码解读系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pluggy源码解读系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pluggy源码解读系列(4)--register注册插件源码解析</title>
      <link href="/blog/2020/09/11/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(4)--register%E6%B3%A8%E5%86%8C%E6%8F%92%E4%BB%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/blog/2020/09/11/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(4)--register%E6%B3%A8%E5%86%8C%E6%8F%92%E4%BB%B6%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>首先还是把pluggy使用的代码放在这，前面已经分析完add_hookspecs的源代码，下面紧接着就是注册插件了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line"># HookspecMarker 和 HookimplMarker 实质上是一个装饰器带参数的装饰器类，作用是给函数增加额外的属性设置</span><br><span class="line">hookspec &#x3D; pluggy.HookspecMarker(&quot;myproject&quot;)</span><br><span class="line">hookimpl &#x3D; pluggy.HookimplMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line"># 定义自己的Spec，这里可以理解为定义接口类</span><br><span class="line">class MySpec:</span><br><span class="line">    # hookspec 是一个装饰类中的方法的装饰器，为此方法增额外的属性设置，这里myhook可以理解为定义了一个接口</span><br><span class="line">    @hookspec</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 定义了一个插件</span><br><span class="line">class Plugin_1:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的和</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook()&quot;)</span><br><span class="line">        return arg1 + arg2</span><br><span class="line"></span><br><span class="line"># 定义第二个插件</span><br><span class="line">class Plugin_2:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook()&quot;)</span><br><span class="line">        return arg1 - arg2</span><br><span class="line"></span><br><span class="line"># 实例化一个插件管理的对象，注意这里的名称要与文件开头定义装饰器的时候的名称一致</span><br><span class="line">pm &#x3D; pluggy.PluginManager(&quot;myproject&quot;)</span><br><span class="line"># 将自定义的接口类加到钩子定义中去</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"># 注册定义的两个插件</span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line"># 通过插件管理对象的钩子调用方法，这时候两个插件中的这个方法都会执行，而且遵循后注册先执行即LIFO的原则，两个插件的结果讲义列表的形式返回</span><br><span class="line">results &#x3D; pm.hook.myhook(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure><p>在分析注册插件函数的源代码之前，先看一下上面的代码中定义的两个插件类：Plugin_1和Plugin_2，这两个类中都定义了myhook方法，而这个方法在MySpec中也定义了（但未实现），在这两个类中这个myhook方法有具体的实现<br>这其实也就是pluggy插件系统中MySpec和Plugin_1类的本质含义，看名称有时候可能会觉很难理解，其实Spec和插件的本质就是定义接口和接口实现，换言之Spec类就是定义接口的，而不同的插件类中定义与Spec类中同名方法，本质上其实就是不同插件对Spec类中定义的方法做不同的实现，“impl”这个简写其实就是实现的英文”implementation”的简写</p><p>插件类中的方法使用了@hookimpl装饰器，而由<a href="https://redrose2100.github.io/blog/2020/09/08/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(1)-HookspecMarker%E7%B1%BB%E5%92%8CHookimplMarker%E7%B1%BB%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">pluggy源码解读系列(1)-HookspecMarker类和HookimplMarker类分析</a> 分析知<br>@hookimpl装饰器其实就是给被装饰函数增加了一个project_name + “_impl”的属性，其属性值由hookwrapper，optionalhook，tryfirst，trylast，specname这几个字段组成的字典，其默认值为None或者False</p><p>所以插件类中对接口类中接口的实现方法加上装饰器装饰之后，定义的插件类的接口实现函数也就多了这么一个属性</p><p>下面就开始来分析一下注册的过程，首先看下register的源码，同样这也是PluginManager类的一个方法，所以说PluginManager类是pluggy模块一个非常非常核心的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">def register(self, plugin, name&#x3D;None):</span><br><span class="line">    &quot;&quot;&quot; Register a plugin and return its canonical name or &#96;&#96;None&#96;&#96; if the name</span><br><span class="line">    is blocked from registering.  Raise a :py:class:&#96;ValueError&#96; if the plugin</span><br><span class="line">    is already registered. &quot;&quot;&quot;</span><br><span class="line">    plugin_name &#x3D; name or self.get_canonical_name(plugin)</span><br><span class="line"></span><br><span class="line">    if plugin_name in self._name2plugin or plugin in self._plugin2hookcallers:</span><br><span class="line">        if self._name2plugin.get(plugin_name, -1) is None:</span><br><span class="line">            return  # blocked plugin, return None to indicate no registration</span><br><span class="line">        raise ValueError(</span><br><span class="line">            &quot;Plugin already registered: %s&#x3D;%s\n%s&quot;</span><br><span class="line">            % (plugin_name, plugin, self._name2plugin)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    # XXX if an error happens we should make sure no state has been</span><br><span class="line">    # changed at point of return</span><br><span class="line">    self._name2plugin[plugin_name] &#x3D; plugin</span><br><span class="line"></span><br><span class="line">    # register matching hook implementations of the plugin</span><br><span class="line">    self._plugin2hookcallers[plugin] &#x3D; hookcallers &#x3D; []</span><br><span class="line">    for name in dir(plugin):</span><br><span class="line">        hookimpl_opts &#x3D; self.parse_hookimpl_opts(plugin, name)</span><br><span class="line">        if hookimpl_opts is not None:</span><br><span class="line">            normalize_hookimpl_opts(hookimpl_opts)</span><br><span class="line">            method &#x3D; getattr(plugin, name)</span><br><span class="line">            hookimpl &#x3D; HookImpl(plugin, plugin_name, method, hookimpl_opts)</span><br><span class="line">            name &#x3D; hookimpl_opts.get(&quot;specname&quot;) or name</span><br><span class="line">            hook &#x3D; getattr(self.hook, name, None)</span><br><span class="line">            if hook is None:</span><br><span class="line">                hook &#x3D; _HookCaller(name, self._hookexec)</span><br><span class="line">                setattr(self.hook, name, hook)</span><br><span class="line">            elif hook.has_spec():</span><br><span class="line">                self._verify_hook(hook, hookimpl)</span><br><span class="line">                hook._maybe_apply_history(hookimpl)</span><br><span class="line">            hook._add_hookimpl(hookimpl)</span><br><span class="line">            hookcallers.append(hook)</span><br><span class="line">    return plugin_name</span><br></pre></td></tr></table></figure><p>首先看下register的参数，可以接受一个插件对象plugin和名称name，name可选，在我们的例子中只传进来一个插件类的实例<br>如果传入的name参数，则plugin_name的值就取name，否则，则通过plugin对象来取，<br>通过插件对象来取的函数代码如下，其实很简单，就是取对象的<strong>name</strong>属性值，如果这个属性值不存在则去其对象的id（id是python中判断身份的唯一标识，任何对象都会有自己的id，判断两个对象是否为同一个其实就是通过id这个内置函数判断的，比较简单，这个就不详细展开了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def get_canonical_name(self, plugin):</span><br><span class="line">    &quot;&quot;&quot; Return canonical name for a plugin object. Note that a plugin</span><br><span class="line">    may be registered under a different name which was specified</span><br><span class="line">    by the caller of :py:meth:&#96;register(plugin, name) &lt;.PluginManager.register&gt;&#96;.</span><br><span class="line">    To obtain the name of an registered plugin use :py:meth:&#96;get_name(plugin)</span><br><span class="line">    &lt;.PluginManager.get_name&gt;&#96; instead.&quot;&quot;&quot;</span><br><span class="line">    return getattr(plugin, &quot;__name__&quot;, None) or str(id(plugin))</span><br></pre></td></tr></table></figure><p>紧接着是做了一下异常判断，前面分析PluginManager类初始化的时候层分析过，_name2plugin属性时存放名称和插件对象的映射关系的字典，_plugin2hookcallers是存放插件对象和其调用函数的映射的字典，<br>这里判断如果插件名称已经在_name2plugin中，或者插件对象已经在_plugin2hookcallers中，则说明此插件已经注册过了，这个时候继续判断一下如果当前名称的插件对象是None，则说明当前插件是存在阻塞状态的（pluggy是提供了阻塞方法的，这个后面再详细分析），<br>当然如果不是阻塞状态的，重复注册的时候这里会报出异常，提示已经注册过了</p><p>异常判断之后即开始注册了，下面可以看到_name2plugin属性里直接存放了名称和插件对象的映射关系，而_plugin2hookcallers的属性首先给插件对象plugin字段设置了一个空列表的值，显然这个将是存放多个调用函数的</p><p>下面紧接着是一个for循环，这个for循环<a href="https://redrose2100.github.io/blog/2020/09/10/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(3)--add-hookspecs%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB/" target="_blank" rel="noopener">pluggy源码解读系列(3)–add_hookspecs增加自定义的接口类</a> 中的for循环就很类似了，<br>首先获取plugin对象的所有方法和属性，然后获取project_name + “_impl”属性，如果存在这个属性，说明就是插件类中对接口的实现方法，然后对hookimpl_opts做了一下规范化处理，其实就是设置默认值，接下来就是根据实现接口库的函数名获取函数对象method，再接下来就是实例化了一个HookImpl对象hookimpl，HookImpl类的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class HookImpl:</span><br><span class="line">    def __init__(self, plugin, plugin_name, function, hook_impl_opts):</span><br><span class="line">        self.function &#x3D; function</span><br><span class="line">        self.argnames, self.kwargnames &#x3D; varnames(self.function)</span><br><span class="line">        self.plugin &#x3D; plugin</span><br><span class="line">        self.opts &#x3D; hook_impl_opts</span><br><span class="line">        self.plugin_name &#x3D; plugin_name</span><br><span class="line">        self.__dict__.update(hook_impl_opts)</span><br></pre></td></tr></table></figure><p>即HookImpl的实例化是为了存放实现接口的函数独享，插件，函数参数，同步更新了hook_impl_opts属性</p><p>接下来更新了一下name，即如果hookimpl_opts中设置了specname属性，则将name更新为它，否则继续保持name就是函数名</p><p>hook取PluginManager类的hook属性，显然在PluginManager初始化的时候就已经存在hook属性了，所以下面直接代码直接走到<br>hook._add_hookimpl(hookimpl)这一行，在分析_add_hookimpl的具体实现之前，先看下下面一行代码，此时将hookimpl实例存放到hookcallers列表中了</p><p>下面看下_add_hookimpl的实现，这个方法是_HookCaller类的一个方法，在<a href="https://redrose2100.github.io/blog/2020/09/10/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(3)--add-hookspecs%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB/" target="_blank" rel="noopener">pluggy源码解读系列(3)–add_hookspecs增加自定义的接口类</a><br>分析过，_HookCaller对象的属性有_wrappers和_nonwrappers以及_call_history，他们都是列表的，当时解释过，就是为了根据接口实现方法的不同属性进行不同的存放的，<br>下面的代码可以看出，就是做这件事的，首先判断hookimpl.hookwrapper是否True还是False，这里用了一个中间变量methods，如果hookimpl.hookwrapper为True，则methods就指向_wrappers属性，<br>反之指向_nonwrappers，然后再根据trylast如果为真，则放到列表的第一个位置，这里提前透露一下，多个插件注册的时候如果都是默认设置的话是，后注册先执行的方式，所以如果trylast设置为True，表示这个插件的接口实现<br>努力靠后执行，所以就把它存放在了列表的第一个位置，同理如果tryfirst为True，则放到列表的末尾，如果tryfirst和trylast都是False，即默认情况下，下面的代码可以看出，是通过遍历，放到第一个tryfirst属性为True的前面的，<br>换据说在很多插件实现中，可以有很多插件设置tryfirst为True，也可以有很多插件设置trylast为True，所以说tryfirst是一个努力第一个执行，但并不保证是第一个执行，比如注册了多个tryfirst为True的，那么最后注册的那个tryfirst为True的才是第一个执行的，<br>trylast也是同样的方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def _add_hookimpl(self, hookimpl):</span><br><span class="line">    &quot;&quot;&quot;Add an implementation to the callback chain.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if hookimpl.hookwrapper:</span><br><span class="line">        methods &#x3D; self._wrappers</span><br><span class="line">    else:</span><br><span class="line">        methods &#x3D; self._nonwrappers</span><br><span class="line"></span><br><span class="line">    if hookimpl.trylast:</span><br><span class="line">        methods.insert(0, hookimpl)</span><br><span class="line">    elif hookimpl.tryfirst:</span><br><span class="line">        methods.append(hookimpl)</span><br><span class="line">    else:</span><br><span class="line">        # find last non-tryfirst method</span><br><span class="line">        i &#x3D; len(methods) - 1</span><br><span class="line">        while i &gt;&#x3D; 0 and methods[i].tryfirst:</span><br><span class="line">            i -&#x3D; 1</span><br><span class="line">        methods.insert(i + 1, hookimpl)</span><br></pre></td></tr></table></figure><p>OK，至此注册的代码就分析完了，下面简单的总结一下注册函数都做了啥：</p><ul><li>核心就是将注册插件存放到PluginManager对象的_name2plugin属性和_plugin2hookcallers属性</li><li>存放_plugin2hookcallers属性的时候，key是插件对象，value是hook列表，同时实例化了HookImpl对象，这个对象用于存放实现函数的函数，参数等信息，然后将其加入到hook中</li></ul><p>至此，register注册插件的流程就分析完成了</p>]]></content>
      
      
      <categories>
          
          <category> pluggy源码解读系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pluggy源码解读系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pluggy源码解读系列(3)--add_hookspecs增加自定义的接口类</title>
      <link href="/blog/2020/09/10/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(3)--add-hookspecs%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB/"/>
      <url>/blog/2020/09/10/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(3)--add-hookspecs%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E6%8E%A5%E5%8F%A3%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>pluggy使用举例子代码：<br>下面这个例子中前面已经分析完了，下面的步骤就是pm.add_hookspecs(MySpec) 这个一步骤了，同样，这个<br>add_hookspecs方法也是PluginManager类的一个方法，下面就针对这个函数进行分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line"># HookspecMarker 和 HookimplMarker 实质上是一个装饰器带参数的装饰器类，作用是给函数增加额外的属性设置</span><br><span class="line">hookspec &#x3D; pluggy.HookspecMarker(&quot;myproject&quot;)</span><br><span class="line">hookimpl &#x3D; pluggy.HookimplMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line"># 定义自己的Spec，这里可以理解为定义接口类</span><br><span class="line">class MySpec:</span><br><span class="line">    # hookspec 是一个装饰类中的方法的装饰器，为此方法增额外的属性设置，这里myhook可以理解为定义了一个接口</span><br><span class="line">    @hookspec</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 定义了一个插件</span><br><span class="line">class Plugin_1:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的和</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook()&quot;)</span><br><span class="line">        return arg1 + arg2</span><br><span class="line"></span><br><span class="line"># 定义第二个插件</span><br><span class="line">class Plugin_2:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook()&quot;)</span><br><span class="line">        return arg1 - arg2</span><br><span class="line"></span><br><span class="line"># 实例化一个插件管理的对象，注意这里的名称要与文件开头定义装饰器的时候的名称一致</span><br><span class="line">pm &#x3D; pluggy.PluginManager(&quot;myproject&quot;)</span><br><span class="line"># 将自定义的接口类加到钩子定义中去</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"># 注册定义的两个插件</span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line"># 通过插件管理对象的钩子调用方法，这时候两个插件中的这个方法都会执行，而且遵循后注册先执行即LIFO的原则，两个插件的结果讲义列表的形式返回</span><br><span class="line">results &#x3D; pm.hook.myhook(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure><p>首先看下这个函数的源代码（如下）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def add_hookspecs(self, module_or_class):</span><br><span class="line">    &quot;&quot;&quot; add new hook specifications defined in the given &#96;&#96;module_or_class&#96;&#96;.</span><br><span class="line">    Functions are recognized if they have been decorated accordingly. &quot;&quot;&quot;</span><br><span class="line">    names &#x3D; []</span><br><span class="line">    for name in dir(module_or_class):</span><br><span class="line">        spec_opts &#x3D; self.parse_hookspec_opts(module_or_class, name)</span><br><span class="line">        if spec_opts is not None:</span><br><span class="line">            hc &#x3D; getattr(self.hook, name, None)</span><br><span class="line">            if hc is None:</span><br><span class="line">                hc &#x3D; _HookCaller(name, self._hookexec, module_or_class, spec_opts)</span><br><span class="line">                setattr(self.hook, name, hc)</span><br><span class="line">            else:</span><br><span class="line">                # plugins registered this hook without knowing the spec</span><br><span class="line">                hc.set_specification(module_or_class, spec_opts)</span><br><span class="line">                for hookfunction in hc.get_hookimpls():</span><br><span class="line">                    self._verify_hook(hc, hookfunction)</span><br><span class="line">            names.append(name)</span><br><span class="line"></span><br><span class="line">    if not names:</span><br><span class="line">        raise ValueError(</span><br><span class="line">            &quot;did not find any %r hooks in %r&quot; % (self.project_name, module_or_class)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>为了详细的分析这段代码，我们下面还是同样的思路，先看一下python的一些常用语法或python的基本功底</p><ul><li>dir 内置函数<br>dir内置函数可以查看一个类或者对象的所欲属性或者方法<br>首先看下如下一小片段代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Test(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def test(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">print(dir(Test))</span><br></pre></td></tr></table></figure>执行结果为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;test&#39;]</span><br></pre></td></tr></table></figure>可见，dir函数可以获得一个类或者对象的所有属性和方法，比如这里我们定义的test函数同样也是在dir的结果列表中，在注意一下，dir的记过是一个列表，列表中的元素时这个类或者对象的所有属性或者方法的名称，比如这里的“test”是一个字符串，并不是test函数对象，这一点需要明确</li><li>setattr和getattr是给一个对象或者实例设置属性或者获取属性的，具体用例这里不再详细演示了，具体可以参考<a href="https://redrose2100.github.io/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(9)--%E5%B1%9E%E6%80%A7%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">python高级语法系列(9)–属性相关的魔法函数</a></li></ul><p>接下来就开始详细的分析pluggy中的add_hookspecs这个方法源码了</p><p>1）这个方法形参是module_or_class,而从使用实例可以知道，这个参数传进来的是我们自己定会的Spec类，即自己定义的接口类</p><p>2）for循环中的每次循环的name是接口类的属性或者方法的名称，注意这个name是一个字符串</p><p>3） 获取spec_opts的函数 parse_hookspec_opts 的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def parse_hookspec_opts(self, module_or_class, name):</span><br><span class="line">    method &#x3D; getattr(module_or_class, name)</span><br><span class="line">    return getattr(method, self.project_name + &quot;_spec&quot;, None)</span><br></pre></td></tr></table></figure><p>这里首先根据自定义接口类的方法或者属性的名称获取其对应的对象，然后根据project_name+”_spec”获取对象的属性，<br>这里就是前面讲到的HookspecMarker类会给自定义接口类总的接口函数设置一个属性，正是这个属性，只要在自定义的接口类<br>中的接口方法上加了HookspecMarker生成的装饰器，则此接口函数就拥有了project_name+”_spec”的属性，其属性值为<br>firstresult，historic，warn_on_impl这三个字符串作为key的一个字典，如果没有加装饰器装饰的<br>则就不会拥有这个属性</p><p>4）通过判断spec_opts是否为None，即当获取到的属性不为None时，则此方法就是装饰器类装饰过的即自定义的接口类的接口方法</p><p>5）hc在从hook获取name对应的属性，显然前面说过hook本质是一个空类对应的实例，显然此时hc是None</p><p>6）当hc为None时，正常情况下hc都为None，只有一种情况，即前面已经调用过add_hookspecs方法，而由于代码量很大，导致后面或者其他<br>文件中忘记是否调用过，则会出现hc不为None即走else分支，这里我们按照正常流程应该为None，此时hc继续实例化为_HookCaller类的一个实例</p><p>_HookCaller类实例化的源代码如下（这里只列出此类的实例化用到的<strong>init</strong>方法，此类还有其他方法，这里不再列出）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class _HookCaller:</span><br><span class="line">    def __init__(self, name, hook_execute, specmodule_or_class&#x3D;None, spec_opts&#x3D;None):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self._wrappers &#x3D; []</span><br><span class="line">        self._nonwrappers &#x3D; []</span><br><span class="line">        self._hookexec &#x3D; hook_execute</span><br><span class="line">        self._call_history &#x3D; None</span><br><span class="line">        self.spec &#x3D; None</span><br><span class="line">        if specmodule_or_class is not None:</span><br><span class="line">            assert spec_opts is not None</span><br><span class="line">            self.set_specification(specmodule_or_class, spec_opts)</span><br></pre></td></tr></table></figure><p>hc在实例化的时候主要也是对一些变量做初始化赋值，下面简单介绍一个每个参数的作用</p><ul><li>name 就是接口类中接口函数的名称，字符串，即add_hookspecs函数中for循环的变量name</li><li>_wrappers和_nonwrappers是两个列表，用于存放两种类型的实现函数，即在前面讲过的HookimplMarker装饰器类中，设置属性的时候有个hookwrapper=False的参数<br>如果设置为False，则此对应的函数实现则放到_nonwrappers列表中，如果设置为True，则存放到_wrappers列表中</li><li>_hookexec 即为PluginManager实例的的_inner_hookexec属性，亦即callers.py文件中的_multicall函数</li><li>_call_history 后续是为了通过判断自定义接口类中接口函数的historic属性而进行设置，如果historic属性为True，则此属性设置为列表，起始值设置为None</li><li>spec是用于HookSpec类的实例的，起始值设置为None</li></ul><p>接下来有判断，当传过来的接口类和接口的属性均非空的时候则进行spec的设置，设置的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def set_specification(self, specmodule_or_class, spec_opts):</span><br><span class="line">    assert not self.has_spec()</span><br><span class="line">    self.spec &#x3D; HookSpec(specmodule_or_class, self.name, spec_opts)</span><br><span class="line">    if spec_opts.get(&quot;historic&quot;):</span><br><span class="line">        self._call_history &#x3D; []</span><br></pre></td></tr></table></figure><p>此时可以发现_HookCaller类的spec属性已经设置值了，即为HookSpec类的一个实例，而_HookCaller类则纯粹是一个设置属性的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class HookSpec:</span><br><span class="line">    def __init__(self, namespace, name, opts):</span><br><span class="line">        self.namespace &#x3D; namespace</span><br><span class="line">        self.function &#x3D; function &#x3D; getattr(namespace, name)</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.argnames, self.kwargnames &#x3D; varnames(function)</span><br><span class="line">        self.opts &#x3D; opts</span><br><span class="line">        self.warn_on_impl &#x3D; opts.get(&quot;warn_on_impl&quot;)</span><br></pre></td></tr></table></figure><p>在HookSpec类中的参数设置解释：</p><ul><li>namespace，命名空间，通过调用函数知这个命名空间其实就是前面定义的Spec接口类，注意这个namespace是一个类对象，而不是字符串</li><li>function ,即接口类中的接口方法，是函数对象，不是字符串</li><li>name ，即接口函数名，是字符串</li><li>argnames和kwargnames则是function函数的参数，可变参数和键值对参数，通过varnames函数解析的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">def varnames(func):</span><br><span class="line">    &quot;&quot;&quot;Return tuple of positional and keywrord argument names for a function,</span><br><span class="line">    method, class or callable.</span><br><span class="line"></span><br><span class="line">    In case of a class, its &#96;&#96;__init__&#96;&#96; method is considered.</span><br><span class="line">    For methods the &#96;&#96;self&#96;&#96; parameter is not included.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    if inspect.isclass(func):</span><br><span class="line">        try:</span><br><span class="line">            func &#x3D; func.__init__</span><br><span class="line">        except AttributeError:</span><br><span class="line">            return (), ()</span><br><span class="line">    elif not inspect.isroutine(func):  # callable object?</span><br><span class="line">        try:</span><br><span class="line">            func &#x3D; getattr(func, &quot;__call__&quot;, func)</span><br><span class="line">        except Exception:</span><br><span class="line">            return (), ()</span><br><span class="line"></span><br><span class="line">    try:  # func MUST be a function or method here or we won&#39;t parse any args</span><br><span class="line">        spec &#x3D; inspect.getfullargspec(func)</span><br><span class="line">    except TypeError:</span><br><span class="line">        return (), ()</span><br><span class="line"></span><br><span class="line">    args, defaults &#x3D; tuple(spec.args), spec.defaults</span><br><span class="line">    if defaults:</span><br><span class="line">        index &#x3D; -len(defaults)</span><br><span class="line">        args, kwargs &#x3D; args[:index], tuple(args[index:])</span><br><span class="line">    else:</span><br><span class="line">        kwargs &#x3D; ()</span><br><span class="line"></span><br><span class="line">    # strip any implicit instance arg</span><br><span class="line">    # pypy3 uses &quot;obj&quot; instead of &quot;self&quot; for default dunder methods</span><br><span class="line">    implicit_names &#x3D; (&quot;self&quot;,) if not _PYPY else (&quot;self&quot;, &quot;obj&quot;)</span><br><span class="line">    if args:</span><br><span class="line">        if inspect.ismethod(func) or (</span><br><span class="line">            &quot;.&quot; in getattr(func, &quot;__qualname__&quot;, ()) and args[0] in implicit_names</span><br><span class="line">        ):</span><br><span class="line">            args &#x3D; args[1:]</span><br><span class="line"></span><br><span class="line">    return args, kwargs</span><br></pre></td></tr></table></figure>这个函数主要是inspect模块的应用以及常用的属性分析方法，这里不再详细讲这个函数了</li><li>opts 则是前面讲的装饰器设置的属性，亦即spec_opts</li><li>warn_on_impl 则是spec_opts中的一个参数</li></ul><p>OK，现在，我们开始从宏观层面总结一下add_hookspecs做了哪些事情</p><ul><li>1）首先分析出自定义的Spec类中定义的通过装饰器装饰的接口函数</li><li>2）然后给PluginManager对象的hook成员增加一个1）中分析出来的接口函数属性，即hook拥有了Spec中定义的接口函数名的属性，属性对应的就是值是_HookCaller对象</li><li>3）_HookCaller对象中存放中两种不同类型的接口wrapers类型和nonwrapper类型</li><li>4）_HookCaller对象的spec属性则存放了接口函数名，接口函数对象，接口函数的参数</li></ul><p>至此 add_hookspecs方法就分析完成了</p>]]></content>
      
      
      <categories>
          
          <category> pluggy源码解读系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pluggy源码解读系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pluggy源码解读系列(2)--PluginManager类实例化</title>
      <link href="/blog/2020/09/10/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(2)--PluginManager%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%8C%96/"/>
      <url>/blog/2020/09/10/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(2)--PluginManager%E7%B1%BB%E5%AE%9E%E4%BE%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="1-PlugginManager类简介"><a href="#1-PlugginManager类简介" class="headerlink" title="1 PlugginManager类简介"></a>1 PlugginManager类简介</h4><p>首先还是把pluggy的一个小例子放在这：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line"># HookspecMarker 和 HookimplMarker 实质上是一个装饰器带参数的装饰器类，作用是给函数增加额外的属性设置</span><br><span class="line">hookspec &#x3D; pluggy.HookspecMarker(&quot;myproject&quot;)</span><br><span class="line">hookimpl &#x3D; pluggy.HookimplMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line"># 定义自己的Spec，这里可以理解为定义接口类</span><br><span class="line">class MySpec:</span><br><span class="line">    # hookspec 是一个装饰类中的方法的装饰器，为此方法增额外的属性设置，这里myhook可以理解为定义了一个接口</span><br><span class="line">    @hookspec</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 定义了一个插件</span><br><span class="line">class Plugin_1:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的和</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook()&quot;)</span><br><span class="line">        return arg1 + arg2</span><br><span class="line"></span><br><span class="line"># 定义第二个插件</span><br><span class="line">class Plugin_2:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook()&quot;)</span><br><span class="line">        return arg1 - arg2</span><br><span class="line"></span><br><span class="line"># 实例化一个插件管理的对象，注意这里的名称要与文件开头定义装饰器的时候的名称一致</span><br><span class="line">pm &#x3D; pluggy.PluginManager(&quot;myproject&quot;)</span><br><span class="line"># 将自定义的接口类加到钩子定义中去</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"># 注册定义的两个插件</span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line"># 通过插件管理对象的钩子调用方法，这时候两个插件中的这个方法都会执行，而且遵循后注册先执行即LIFO的原则，两个插件的结果讲义列表的形式返回</span><br><span class="line">results &#x3D; pm.hook.myhook(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure><p>从上面的使用代码可以看出，通过HookspecMarker类和HookimplMarker实例化了两个对象，通过源码解读（1）知道，这两个实例实质上是两个装饰器，装饰器的作用是给函数设置一个名称为”{project_name}_spec”和”{project_name}_impl”属性</p><p>紧接着就是定义的子集的Spec类了，这个类实质上类似于面向对象编程中的定义接口，相当于在这个类中可以定义好许多接口（方法），即只要将自定义的Spec类中的方法加上@hookspec即相当于成为了插件的接口</p><p>然后即可以开始定义插件类了，插件类当然需要去对接口类中定义的方法去做接口的实现，即实现接口在不同的插件中的具体功能实现，即在插件中对方法加上@hookimpl装饰即相当于就约定好了是接口的实现（理解上可以这么理解，具体实现后面都会讲到）</p><p>紧接着就是到了PluginManager类的实例化了，这个类是pluggy模块中最最核心的一个类，它相当于pluggy的中枢大脑，pluggy的所有动作指令都是从这个类中发出的，这个类的是在manager.py文件中定义的</p><p>下面就是PluginManager类的初始化函数的源码（这个类还有很多功能代码，这里先只讲初始化，所以先只放这一小段源码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class PluginManager:</span><br><span class="line">    &quot;&quot;&quot; Core :py:class:&#96;.PluginManager&#96; class which manages registration</span><br><span class="line">    of plugin objects and 1:N hook calling.</span><br><span class="line"></span><br><span class="line">    You can register new hooks by calling :py:meth:&#96;add_hookspecs(module_or_class)</span><br><span class="line">    &lt;.PluginManager.add_hookspecs&gt;&#96;.</span><br><span class="line">    You can register plugin objects (which contain hooks) by calling</span><br><span class="line">    :py:meth:&#96;register(plugin) &lt;.PluginManager.register&gt;&#96;.  The :py:class:&#96;.PluginManager&#96;</span><br><span class="line">    is initialized with a prefix that is searched for in the names of the dict</span><br><span class="line">    of registered plugin objects.</span><br><span class="line"></span><br><span class="line">    For debugging purposes you can call :py:meth:&#96;.PluginManager.enable_tracing&#96;</span><br><span class="line">    which will subsequently send debug information to the trace helper.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, project_name):</span><br><span class="line">        self.project_name &#x3D; project_name</span><br><span class="line">        self._name2plugin &#x3D; &#123;&#125;</span><br><span class="line">        self._plugin2hookcallers &#x3D; &#123;&#125;</span><br><span class="line">        self._plugin_distinfo &#x3D; []</span><br><span class="line">        self.trace &#x3D; _tracing.TagTracer().get(&quot;pluginmanage&quot;)</span><br><span class="line">        self.hook &#x3D; _HookRelay()</span><br><span class="line">        self._inner_hookexec &#x3D; _multicall</span><br></pre></td></tr></table></figure><p>PluginManager 类实例化的时候主要是初始化了几个变量：</p><ul><li>project_name 可以理解为项目名称</li><li>_name2plugin 是一个字典，主要用于存放插件名称和插件对象的映射关系</li><li>_plugin2hookcallers 是也是一个字典，主要用于存放插件对象和插件对象对应的调用钩子函数的映射关系</li><li>_plugin_distinfo 是一个列表，用来存放通过setuptools注册的插件的信息</li><li>hook 是 _HookRelay类的实例，这个类的代码在hooks.py文件中，这个是一个空类，目的是用于存放hook函数的，所以主要用在后面注册插件的时候给这个空类的实例加设置属性的</li></ul><p>_HookRelay 类的源代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class _HookRelay:</span><br><span class="line">    &quot;&quot;&quot; hook holder object for performing 1:N hook calls where N is the number</span><br><span class="line">    of registered plugins.</span><br><span class="line"></span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure><ul><li>_inner_hookexec 是一个函数，即是_multicall，这个函数的代码在callers.py文件中，这函数是整个pluggy插件模块最最核心的一个函数，所有的被注册的插件中的接口的执行顺序以及结果返回等等逻辑都在这个函数中</li></ul><p>_multicall 的代码如下，这里先暂时不分析这个函数，现在只要知道_inner_hookexec属性其实就是_multicall这个函数即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">def _multicall(hook_name, hook_impls, caller_kwargs, firstresult):</span><br><span class="line">    &quot;&quot;&quot;Execute a call into multiple python functions&#x2F;methods and return the</span><br><span class="line">    result(s).</span><br><span class="line"></span><br><span class="line">    &#96;&#96;caller_kwargs&#96;&#96; comes from _HookCaller.__call__().</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    __tracebackhide__ &#x3D; True</span><br><span class="line">    results &#x3D; []</span><br><span class="line">    excinfo &#x3D; None</span><br><span class="line">    try:  # run impl and wrapper setup functions in a loop</span><br><span class="line">        teardowns &#x3D; []</span><br><span class="line">        try:</span><br><span class="line">            for hook_impl in reversed(hook_impls):</span><br><span class="line">                try:</span><br><span class="line">                    args &#x3D; [caller_kwargs[argname] for argname in hook_impl.argnames]</span><br><span class="line">                except KeyError:</span><br><span class="line">                    for argname in hook_impl.argnames:</span><br><span class="line">                        if argname not in caller_kwargs:</span><br><span class="line">                            raise HookCallError(</span><br><span class="line">                                &quot;hook call must provide argument %r&quot; % (argname,)</span><br><span class="line">                            )</span><br><span class="line"></span><br><span class="line">                if hook_impl.hookwrapper:</span><br><span class="line">                    try:</span><br><span class="line">                        gen &#x3D; hook_impl.function(*args)</span><br><span class="line">                        next(gen)  # first yield</span><br><span class="line">                        teardowns.append(gen)</span><br><span class="line">                    except StopIteration:</span><br><span class="line">                        _raise_wrapfail(gen, &quot;did not yield&quot;)</span><br><span class="line">                else:</span><br><span class="line">                    res &#x3D; hook_impl.function(*args)</span><br><span class="line">                    if res is not None:</span><br><span class="line">                        results.append(res)</span><br><span class="line">                        if firstresult:  # halt further impl calls</span><br><span class="line">                            break</span><br><span class="line">        except BaseException:</span><br><span class="line">            excinfo &#x3D; sys.exc_info()</span><br><span class="line">    finally:</span><br><span class="line">        if firstresult:  # first result hooks return a single value</span><br><span class="line">            outcome &#x3D; _Result(results[0] if results else None, excinfo)</span><br><span class="line">        else:</span><br><span class="line">            outcome &#x3D; _Result(results, excinfo)</span><br><span class="line"></span><br><span class="line">        # run all wrapper post-yield blocks</span><br><span class="line">        for gen in reversed(teardowns):</span><br><span class="line">            try:</span><br><span class="line">                gen.send(outcome)</span><br><span class="line">                _raise_wrapfail(gen, &quot;has second yield&quot;)</span><br><span class="line">            except StopIteration:</span><br><span class="line">                pass</span><br><span class="line"></span><br><span class="line">        return outcome.get_result()</span><br></pre></td></tr></table></figure><p>至此，PluginManager类的实例化流程就完成了</p>]]></content>
      
      
      <categories>
          
          <category> pluggy源码解读系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pluggy源码解读系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(12)--map、filter,reduce,zip</title>
      <link href="/blog/2020/09/09/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(12)--map,filter-reduce-zip/"/>
      <url>/blog/2020/09/09/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(12)--map,filter-reduce-zip/</url>
      
        <content type="html"><![CDATA[<p>map，filter，reduce，zip都是处理序列的便捷的内置函数</p><h4 id="1-map-func-iterable"><a href="#1-map-func-iterable" class="headerlink" title="1 map(func,iterable)"></a>1 map(func,iterable)</h4><p>map的作用主要是将一个函数应用于一个可迭代的序列，然后将返回值返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;[1,2,3,4,5,6]</span><br><span class="line">def func(x):</span><br><span class="line">    return x*x</span><br><span class="line"></span><br><span class="line">b&#x3D;map(func,a)</span><br><span class="line">print(list(b))</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 9, 16, 25, 36]</span><br></pre></td></tr></table></figure><h4 id="2-filter-func-iterable"><a href="#2-filter-func-iterable" class="headerlink" title="2 filter(func,iterable)"></a>2 filter(func,iterable)</h4><p>filter的功能是通过func来对可迭代的序列进行过滤，如果func的返回值为真，则对应的iterable中的值保留下来，最后一起以序列的形式返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;[1,2,3,4,5,6]</span><br><span class="line">def func(x):</span><br><span class="line">    return x%2&#x3D;&#x3D;0</span><br><span class="line"></span><br><span class="line">b&#x3D;filter(func,a)</span><br><span class="line">print(list(b))</span><br></pre></td></tr></table></figure><p>执行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 4, 6]</span><br></pre></td></tr></table></figure><h4 id="3-reduce-func-iterable"><a href="#3-reduce-func-iterable" class="headerlink" title="3 reduce(func,iterable)"></a>3 reduce(func,iterable)</h4><p>reduce 的功能是股东计算应用于可迭代序列iterable的结果，最后将结果返回，非常适合应用类似累加和累乘的场景</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line"></span><br><span class="line">a&#x3D;[1,2,3,4,5,6]</span><br><span class="line">def add(x,y):</span><br><span class="line">    return x+y</span><br><span class="line"></span><br><span class="line">def multi(x,y):</span><br><span class="line">    return x*y</span><br><span class="line">b&#x3D;reduce(add,a)</span><br><span class="line">c&#x3D;reduce(multi,a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">21</span><br><span class="line">720</span><br></pre></td></tr></table></figure><h4 id="4-zip-iterable"><a href="#4-zip-iterable" class="headerlink" title="4 zip(*iterable)"></a>4 zip(*iterable)</h4><p>zip的功能是映射多个容器的相似索引，可以方便用于来构造字典</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;[1,2,3,4,5]</span><br><span class="line">b&#x3D;[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;]</span><br><span class="line">c&#x3D;dict(zip(b,a))</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 5&#125;</span><br></pre></td></tr></table></figure><p>灵活地应用这几个内置函数，有时候可以是代码更加简洁</p>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(11)--lambda表达式</title>
      <link href="/blog/2020/09/09/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(11)--lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/blog/2020/09/09/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(11)--lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="1-匿名函数"><a href="#1-匿名函数" class="headerlink" title="1 匿名函数"></a>1 匿名函数</h4><p>lambda 表达式其实就是匿名函数，在很多比如定义一个函数，函数的功能比较简单同时又只会用一次，这时候如果像普通定义函数那样定义，总会有种不划算的感觉，这时候匿名函数的作用就来了，通过使用lambda表示定义个匿名函数，即达到了函数的功能，同时又没有定义函数</p><p>为了更好的理解匿名函数，下面先通过一个普通的函数定义来看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def add(a,b):</span><br><span class="line">    return (a+b)</span><br><span class="line"></span><br><span class="line">temp&#x3D;add(100,200)</span><br><span class="line">print(temp)</span><br></pre></td></tr></table></figure><p>显然，执行结果为300，下面采用lambda表达式来达到同样的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f&#x3D;lambda x,y:x+y</span><br><span class="line">print(f(100,200))</span><br></pre></td></tr></table></figure><p>结果同上面定义函数的方式是一样的，lambda表达式其实也挺简单的，冒号前面的就可以理解为参数的形参，冒号后面就可以理解函数的返回值</p><h4 id="2-lambda表达式通常和map，filter，zip，reduce等结合起来一起用非常方便"><a href="#2-lambda表达式通常和map，filter，zip，reduce等结合起来一起用非常方便" class="headerlink" title="2 lambda表达式通常和map，filter，zip，reduce等结合起来一起用非常方便"></a>2 lambda表达式通常和map，filter，zip，reduce等结合起来一起用非常方便</h4><p>下面看个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;[1,2,3,4,5,6]</span><br><span class="line"></span><br><span class="line">print(list(map(lambda x:x*x,a)))</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 4, 9, 16, 25, 36]</span><br></pre></td></tr></table></figure><p>代码非常的简洁</p><p>在一些开源库中，lambda表达式也经常被使用，所以这里专门把lambda表达式拿出来讲解一下</p>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pluggy源码解读系列(1)--HookspecMarker类和HookimplMarker类分析</title>
      <link href="/blog/2020/09/08/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(1)--HookspecMarker%E7%B1%BB%E5%92%8CHookimplMarker%E7%B1%BB%E5%88%86%E6%9E%90/"/>
      <url>/blog/2020/09/08/pluggy%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E7%B3%BB%E5%88%97(1)--HookspecMarker%E7%B1%BB%E5%92%8CHookimplMarker%E7%B1%BB%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h4 id="1-pluggy简介"><a href="#1-pluggy简介" class="headerlink" title="1 pluggy简介"></a>1 pluggy简介</h4><p>pluggy是一个非常优秀的插件系统，它是理解pytest的核心，只有理解了pluggy的原理，才能更好的理解和使用pytest，否则见到了pytest的很多应用都会感觉很难理解</p><p>pluggy插件总共的代码量不足一千行，而实现的功能却是如此的强大和好用，这不由得让我们对pytest的源码实现充满了好奇，接下来一段时间就详细的由浅入深的来解读pluggy源码，这个过程中，同样会继续总结一些基础的或者高级的python的知识点。</p><p>当然随着对pluggy源码的深入，也会发现很多在网上书上博客上看不到的pluggy的高级应用，同样本系列都会使用实例演示和分析。</p><h4 id="2-pluggy的简单应用"><a href="#2-pluggy的简单应用" class="headerlink" title="2 pluggy的简单应用"></a>2 pluggy的简单应用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line"># HookspecMarker 和 HookimplMarker 实质上是一个装饰器带参数的装饰器类，作用是给函数增加额外的属性设置</span><br><span class="line">hookspec &#x3D; pluggy.HookspecMarker(&quot;myproject&quot;)</span><br><span class="line">hookimpl &#x3D; pluggy.HookimplMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line"># 定义自己的Spec，这里可以理解为定义接口类</span><br><span class="line">class MySpec:</span><br><span class="line">    # hookspec 是一个装饰类中的方法的装饰器，为此方法增额外的属性设置，这里myhook可以理解为定义了一个接口</span><br><span class="line">    @hookspec</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 定义了一个插件</span><br><span class="line">class Plugin_1:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的和</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook()&quot;)</span><br><span class="line">        return arg1 + arg2</span><br><span class="line"></span><br><span class="line"># 定义第二个插件</span><br><span class="line">class Plugin_2:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook()&quot;)</span><br><span class="line">        return arg1 - arg2</span><br><span class="line"></span><br><span class="line"># 实例化一个插件管理的对象，注意这里的名称要与文件开头定义装饰器的时候的名称一致</span><br><span class="line">pm &#x3D; pluggy.PluginManager(&quot;myproject&quot;)</span><br><span class="line"># 将自定义的接口类加到钩子定义中去</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"># 注册定义的两个插件</span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line"># 通过插件管理对象的钩子调用方法，这时候两个插件中的这个方法都会执行，而且遵循后注册先执行即LIFO的原则，两个插件的结果讲义列表的形式返回</span><br><span class="line">results &#x3D; pm.hook.myhook(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inside Plugin_2.myhook()</span><br><span class="line">inside Plugin_1.myhook()</span><br><span class="line">[-1, 3]</span><br></pre></td></tr></table></figure><h4 id="3-pluggy的文件组织结构："><a href="#3-pluggy的文件组织结构：" class="headerlink" title="3 pluggy的文件组织结构："></a>3 pluggy的文件组织结构：</h4><p>pluggy模块总共就有如下6个文件，总共代码行数不到1k行，这6个文件中，caller、hooks.py和manager.py是pluggy的最核心的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pluggy</span><br><span class="line">  |--------__init__.py</span><br><span class="line">  |--------_result.py</span><br><span class="line">  |--------_tracing.py</span><br><span class="line">  |--------caller.py</span><br><span class="line">  |--------hooks.py</span><br><span class="line">  |--------manager.py</span><br></pre></td></tr></table></figure><h4 id="4-HookspecMarker类和HookimplMarker类分析"><a href="#4-HookspecMarker类和HookimplMarker类分析" class="headerlink" title="4 HookspecMarker类和HookimplMarker类分析"></a>4 HookspecMarker类和HookimplMarker类分析</h4><p>从上面的使用举例看，我们首先是看到了实例化了这两个类的实例，所以，我们就先从这两个类开始分析<br>下面看下HookspecMarker类的源码（在hooks.py文件中）</p><p>阅读源码有一个好处就是能发现一些比较高级的语法和比较好的用法，如果觉得读源码有难度，至少说明一点，我们对python的基础语法或者高级语法掌握的还不是很到位。比如下面<br>HookspecMarker类的定义，这里面涉及到python的两个相对高级一定的语法，一个是类中<strong>call</strong>魔法函数的作用，一个就是装饰器类，如果说对这两个知识点不清楚的话，那看到这个类就会有点头大了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class HookspecMarker:</span><br><span class="line">    &quot;&quot;&quot; Decorator helper class for marking functions as hook specifications.</span><br><span class="line"></span><br><span class="line">    You can instantiate it with a project_name to get a decorator.</span><br><span class="line">    Calling :py:meth:&#96;.PluginManager.add_hookspecs&#96; later will discover all marked functions</span><br><span class="line">    if the :py:class:&#96;.PluginManager&#96; uses the same project_name.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, project_name):</span><br><span class="line">        self.project_name &#x3D; project_name</span><br><span class="line"></span><br><span class="line">    def __call__(</span><br><span class="line">        self, function&#x3D;None, firstresult&#x3D;False, historic&#x3D;False, warn_on_impl&#x3D;None</span><br><span class="line">    ):</span><br><span class="line">        &quot;&quot;&quot; if passed a function, directly sets attributes on the function</span><br><span class="line">        which will make it discoverable to :py:meth:&#96;.PluginManager.add_hookspecs&#96;.</span><br><span class="line">        If passed no function, returns a decorator which can be applied to a function</span><br><span class="line">        later using the attributes supplied.</span><br><span class="line"></span><br><span class="line">        If &#96;&#96;firstresult&#96;&#96; is &#96;&#96;True&#96;&#96; the 1:N hook call (N being the number of registered</span><br><span class="line">        hook implementation functions) will stop at I&lt;&#x3D;N when the I&#39;th function</span><br><span class="line">        returns a non-&#96;&#96;None&#96;&#96; result.</span><br><span class="line"></span><br><span class="line">        If &#96;&#96;historic&#96;&#96; is &#96;&#96;True&#96;&#96; calls to a hook will be memorized and replayed</span><br><span class="line">        on later registered plugins.</span><br><span class="line"></span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        def setattr_hookspec_opts(func):</span><br><span class="line">            if historic and firstresult:</span><br><span class="line">                raise ValueError(&quot;cannot have a historic firstresult hook&quot;)</span><br><span class="line">            setattr(</span><br><span class="line">                func,</span><br><span class="line">                self.project_name + &quot;_spec&quot;,</span><br><span class="line">                dict(</span><br><span class="line">                    firstresult&#x3D;firstresult,</span><br><span class="line">                    historic&#x3D;historic,</span><br><span class="line">                    warn_on_impl&#x3D;warn_on_impl,</span><br><span class="line">                ),</span><br><span class="line">            )</span><br><span class="line">            return func</span><br><span class="line"></span><br><span class="line">        if function is not None:</span><br><span class="line">            return setattr_hookspec_opts(function)</span><br><span class="line">        else:</span><br><span class="line">            return setattr_hookspec_opts</span><br></pre></td></tr></table></figure><p>为了彻底理解上面这个类的定义，下面先搞定几个基础的语法知识：</p><ul><li><strong>call</strong>魔法函数的作用就是类的实例可以继续像函数一样调用，像函数一样调用对象的时候就会走到类的<strong>call</strong>魔法函数了<br>下面用一个实例演示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Test(object):</span><br><span class="line">    def __init__(self,a,b&#x3D;10):</span><br><span class="line">        self.a&#x3D;a</span><br><span class="line">        self.b&#x3D;b</span><br><span class="line"></span><br><span class="line">    def __call__(self,c,d&#x3D;20):</span><br><span class="line">        print(self.a+c)</span><br><span class="line">        print(self.b+d)</span><br><span class="line"></span><br><span class="line">test&#x3D;Test(10,20)</span><br><span class="line">test(100,200)</span><br></pre></td></tr></table></figure>可以看到，test本来是Test类的一个实例，下面紧接着把test当函数一样调用，而且传入了参数，执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">110</span><br><span class="line">220</span><br></pre></td></tr></table></figure></li><li>利用类中<strong>call</strong>模范函数的额特性，装饰器可以使用类实现，即装饰器类<br>下面本质是就是实现了一个装饰器类，装饰器可以传入参数a和b，被装饰器对象可以是函数，即func，也可以传入参数，代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Test(object):</span><br><span class="line">    def __init__(self,a,b&#x3D;10):</span><br><span class="line">        self.a&#x3D;a</span><br><span class="line">        self.b&#x3D;b</span><br><span class="line"></span><br><span class="line">    def __call__(self,func):</span><br><span class="line">        def wrapper(*args,**kwargs):</span><br><span class="line">            print(&quot;before func &#123;func&#125;&quot;.format(func&#x3D;func.__name__))</span><br><span class="line">            results&#x3D;func(*args,**kwargs)</span><br><span class="line">            print(&quot;after func &#123;func&#125;&quot;.format(func&#x3D;func.__name__))</span><br><span class="line">            return results</span><br><span class="line">        return wrapper</span><br><span class="line"></span><br><span class="line">@Test(10,100)</span><br><span class="line">def print_sum(v1,v2):</span><br><span class="line">    print(&quot;in print_sum()...&quot;)</span><br><span class="line">    print(v1+v2)</span><br><span class="line"></span><br><span class="line">print_sum(20,200)</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before func print_sum</span><br><span class="line">in print_sum()...</span><br><span class="line">220</span><br><span class="line">after func print_sum</span><br></pre></td></tr></table></figure></li><li>setattr的作用<br>setattr的作用即给一个对象设置属性,下面用一个最简单的例子展示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Test(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">t&#x3D;Test()</span><br><span class="line">setattr(t,&quot;a&quot;,10)</span><br><span class="line"></span><br><span class="line">print(t.a)</span><br></pre></td></tr></table></figure>结果会打印10，此时t这个实例就已经有了属性a，而且属性a的值为10</li></ul><p>熟悉了上述python基础或高级语法后，再回过头看下HookspecMarker类的代码：<br>其实它的本质就是一个装饰器类，如果只把这个类实例化，即不用语法糖加在一个具体的函数上时，<br>即此时返回的是一个setattr_hookimpl_opts，它的参数是另外一个被装饰的函数func，作用就是给<br>被装饰的函数func设置一个属性，属性名就是初始化的时候传入的名称加上”_spec”,属性值时一个字典，字典<br>里面有三个字段，分别是firstresult，historic和warm_on_impl</p><p>如下是HookspecMarker类的两种使用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line">hookspec &#x3D; pluggy.HookspecMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line">@hookspec</span><br><span class="line">def test1():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">@pluggy.HookspecMarker(&quot;myproject2&quot;)</span><br><span class="line">def test2():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(test1.myproject_spec)</span><br><span class="line">print(test2.myproject2_spec)</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;firstresult&#39;: False, &#39;historic&#39;: False, &#39;warn_on_impl&#39;: None&#125;</span><br><span class="line">&#123;&#39;firstresult&#39;: False, &#39;historic&#39;: False, &#39;warn_on_impl&#39;: None&#125;</span><br></pre></td></tr></table></figure><p>所以HookspecMarker类的本质就是为了给被装饰的函数对象增加这么一个属性</p><p>同理HookimplMarker类的代码如下，也同样是一个装饰器，也是为了给函数增加一个属性，属性名称为HookimplMarker类初始化时给的project_name加上”_impl”，其值主要有5个参数，至于每个参数做什么用的，可以到后面分析manager文件的时候再回头看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">class HookimplMarker:</span><br><span class="line">    &quot;&quot;&quot; Decorator helper class for marking functions as hook implementations.</span><br><span class="line"></span><br><span class="line">    You can instantiate with a &#96;&#96;project_name&#96;&#96; to get a decorator.</span><br><span class="line">    Calling :py:meth:&#96;.PluginManager.register&#96; later will discover all marked functions</span><br><span class="line">    if the :py:class:&#96;.PluginManager&#96; uses the same project_name.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, project_name):</span><br><span class="line">        self.project_name &#x3D; project_name</span><br><span class="line"></span><br><span class="line">    def __call__(</span><br><span class="line">        self,</span><br><span class="line">        function&#x3D;None,</span><br><span class="line">        hookwrapper&#x3D;False,</span><br><span class="line">        optionalhook&#x3D;False,</span><br><span class="line">        tryfirst&#x3D;False,</span><br><span class="line">        trylast&#x3D;False,</span><br><span class="line">        specname&#x3D;None,</span><br><span class="line">    ):</span><br><span class="line"></span><br><span class="line">        &quot;&quot;&quot; if passed a function, directly sets attributes on the function</span><br><span class="line">        which will make it discoverable to :py:meth:&#96;.PluginManager.register&#96;.</span><br><span class="line">        If passed no function, returns a decorator which can be applied to a</span><br><span class="line">        function later using the attributes supplied.</span><br><span class="line"></span><br><span class="line">        If &#96;&#96;optionalhook&#96;&#96; is &#96;&#96;True&#96;&#96; a missing matching hook specification will not result</span><br><span class="line">        in an error (by default it is an error if no matching spec is found).</span><br><span class="line"></span><br><span class="line">        If &#96;&#96;tryfirst&#96;&#96; is &#96;&#96;True&#96;&#96; this hook implementation will run as early as possible</span><br><span class="line">        in the chain of N hook implementations for a specification.</span><br><span class="line"></span><br><span class="line">        If &#96;&#96;trylast&#96;&#96; is &#96;&#96;True&#96;&#96; this hook implementation will run as late as possible</span><br><span class="line">        in the chain of N hook implementations.</span><br><span class="line"></span><br><span class="line">        If &#96;&#96;hookwrapper&#96;&#96; is &#96;&#96;True&#96;&#96; the hook implementations needs to execute exactly</span><br><span class="line">        one &#96;&#96;yield&#96;&#96;.  The code before the &#96;&#96;yield&#96;&#96; is run early before any non-hookwrapper</span><br><span class="line">        function is run.  The code after the &#96;&#96;yield&#96;&#96; is run after all non-hookwrapper</span><br><span class="line">        function have run.  The &#96;&#96;yield&#96;&#96; receives a :py:class:&#96;.callers._Result&#96; object</span><br><span class="line">        representing the exception or result outcome of the inner calls (including other</span><br><span class="line">        hookwrapper calls).</span><br><span class="line"></span><br><span class="line">        If &#96;&#96;specname&#96;&#96; is provided, it will be used instead of the function name when</span><br><span class="line">        matching this hook implementation to a hook specification during registration.</span><br><span class="line"></span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        def setattr_hookimpl_opts(func):</span><br><span class="line">            setattr(</span><br><span class="line">                func,</span><br><span class="line">                self.project_name + &quot;_impl&quot;,</span><br><span class="line">                dict(</span><br><span class="line">                    hookwrapper&#x3D;hookwrapper,</span><br><span class="line">                    optionalhook&#x3D;optionalhook,</span><br><span class="line">                    tryfirst&#x3D;tryfirst,</span><br><span class="line">                    trylast&#x3D;trylast,</span><br><span class="line">                    specname&#x3D;specname,</span><br><span class="line">                ),</span><br><span class="line">            )</span><br><span class="line">            return func</span><br><span class="line"></span><br><span class="line">        if function is None:</span><br><span class="line">            return setattr_hookimpl_opts</span><br><span class="line">        else:</span><br><span class="line">            return setattr_hookimpl_opts(function)</span><br></pre></td></tr></table></figure><p>下面用简单的代码演示HookimplMarker装饰器类给函数设置属性的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line">hookspec &#x3D; pluggy.HookimplMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line">@hookspec</span><br><span class="line">def test1():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">@pluggy.HookimplMarker(&quot;myproject2&quot;)</span><br><span class="line">def test2():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(test1.myproject_impl)</span><br><span class="line">print(test2.myproject2_impl)</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;hookwrapper&#39;: False, &#39;optionalhook&#39;: False, &#39;tryfirst&#39;: False, &#39;trylast&#39;: False, &#39;specname&#39;: None&#125;</span><br><span class="line">&#123;&#39;hookwrapper&#39;: False, &#39;optionalhook&#39;: False, &#39;tryfirst&#39;: False, &#39;trylast&#39;: False, &#39;specname&#39;: None&#125;</span><br></pre></td></tr></table></figure><p>至此 HookspecMarker类和HookimplMarker类的代码就分析完了</p>]]></content>
      
      
      <categories>
          
          <category> pluggy源码解读系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pluggy源码解读系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式python系列(4)--简单工厂模式</title>
      <link href="/blog/2020/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fpython%E7%B3%BB%E5%88%97(4)--%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2020/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fpython%E7%B3%BB%E5%88%97(4)--%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="1-简单工厂模式的含义："><a href="#1-简单工厂模式的含义：" class="headerlink" title="1 简单工厂模式的含义："></a>1 简单工厂模式的含义：</h4><p>简单工厂模式，简单地来说，就是使用一个工厂类，然后根据传入的不同的参数生产出不同类，换句话就是将不同类的实例化过程又封装了一下，放到了一个工厂类的一个函数中，这样使用者在使用类是的时候就不需要去管实例化过程了，只需要使用工厂类来返回一个即可</p><h4 id="2-简单工厂模式的使用场景："><a href="#2-简单工厂模式的使用场景：" class="headerlink" title="2 简单工厂模式的使用场景："></a>2 简单工厂模式的使用场景：</h4><p>简单工厂模式适合于工厂负责的类不是太多的场景，当负责的场景很多的时候，会导致工厂生产实例的代码很多，此时将难于维护</p><h4 id="3-简单工厂模式的实例"><a href="#3-简单工厂模式的实例" class="headerlink" title="3 简单工厂模式的实例"></a>3 简单工厂模式的实例</h4><p>如下工厂类负责Teacher类和Student类的实例化过程，使用者只需要调用工厂类的create方法，然后根据传入角色role的值即可得到对应的类型的实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def work(self):</span><br><span class="line">        print(&quot;student &#123;name&#125; begin to studying...&quot;.format(name&#x3D;self.name))</span><br><span class="line"></span><br><span class="line">class Teacher(object):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def work(self):</span><br><span class="line">        print(&quot;teacher &#123;name&#125; begin to teaching...&quot;.format(name&#x3D;self.name))</span><br><span class="line"></span><br><span class="line">class SimpleFactory(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def create(self,role,name):</span><br><span class="line">        if role&#x3D;&#x3D;&quot;student&quot;:</span><br><span class="line">            return Student(name)</span><br><span class="line">        if role&#x3D;&#x3D;&quot;teacher&quot;:</span><br><span class="line">            return Teacher(name)</span><br><span class="line"></span><br><span class="line">simple_factory&#x3D;SimpleFactory()</span><br><span class="line">s&#x3D;simple_factory.create(&quot;student&quot;,&quot;Jack&quot;)</span><br><span class="line">t&#x3D;simple_factory.create(&quot;teacher&quot;,&quot;Miss Wang&quot;)</span><br><span class="line">s.work()</span><br><span class="line">t.work()</span><br></pre></td></tr></table></figure><p>运行结果如下；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">student Jack begin to studying...</span><br><span class="line">teacher Miss Wang begin to teaching...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式python系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式python系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(10)--实例方法、类方法、静态方法的区别</title>
      <link href="/blog/2020/09/07/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(10)--%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E3%80%81%E7%B1%BB%E6%96%B9%E6%B3%95%E3%80%81%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/blog/2020/09/07/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(10)--%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E3%80%81%E7%B1%BB%E6%96%B9%E6%B3%95%E3%80%81%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="1-类方法、实例方法、静态方法的区别"><a href="#1-类方法、实例方法、静态方法的区别" class="headerlink" title="1 类方法、实例方法、静态方法的区别"></a>1 类方法、实例方法、静态方法的区别</h4><ul><li>实例方法第一个参数必须是self，只能被实例调用，实例方法可以访问实例属性和类成员变量</li><li>类方法第一个参数必须是cls，既可以给实例调用，也可以被类调用，能访问类成员，不能访问实例属性</li><li>静态方法没有必须的参数，既可以被实例调用，也可以被类调用，不能访问类成员和实例属性</li><li>python类中没有静态变量可供静态方法使用，静态方法是提供给封装一些和类实例无关的公共的方法组织用的</li></ul><p>下面先通过一个例子演示正常的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    age&#x3D;20</span><br><span class="line"></span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def print_name(self):</span><br><span class="line">        print(&quot;in print_name()...&quot;)</span><br><span class="line">        print(self.name,self.age)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def print_age(cls):</span><br><span class="line">        print(&quot;in print_age()...&quot;)</span><br><span class="line">        print(cls.age)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def print_info(name,age):</span><br><span class="line">        print(&quot;in print_info()...&quot;)</span><br><span class="line">        print(name,age)</span><br><span class="line"></span><br><span class="line">s&#x3D;Student(&quot;Jack&quot;)</span><br><span class="line">s.print_name()</span><br><span class="line">s.print_age()</span><br><span class="line">s.print_info(&quot;Tom&quot;,20)</span><br><span class="line"></span><br><span class="line">Student.print_age()</span><br><span class="line">Student.print_info(&quot;Sam&quot;,30)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">in print_name()...</span><br><span class="line">Jack 20</span><br><span class="line">in print_age()...</span><br><span class="line">20</span><br><span class="line">in print_info()...</span><br><span class="line">Tom 20</span><br><span class="line">in print_age()...</span><br><span class="line">20</span><br><span class="line">in print_info()...</span><br><span class="line">Sam 30</span><br></pre></td></tr></table></figure><p>下面的例子演示了在实例方法中对类成员做了修改，其实类成员并未被修改，实例方法修改的仅仅是属于自己的和类成员同名的属性的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    age&#x3D;20</span><br><span class="line"></span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def print_name(self):</span><br><span class="line">        print(&quot;in print_name()...&quot;)</span><br><span class="line">        print(self.name,self.age)</span><br><span class="line">        self.age&#x3D;30</span><br><span class="line">        print(self.name, self.age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s&#x3D;Student(&quot;Jack&quot;)</span><br><span class="line">s.print_name()</span><br><span class="line"></span><br><span class="line">print(Student.age)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">in print_name()...</span><br><span class="line">Jack 20</span><br><span class="line">Jack 30</span><br><span class="line">20</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式python系列(3)--单例模式</title>
      <link href="/blog/2020/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fpython%E7%B3%BB%E5%88%97(3)--%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2020/09/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fpython%E7%B3%BB%E5%88%97(3)--%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="1-单例模式："><a href="#1-单例模式：" class="headerlink" title="1 单例模式："></a>1 单例模式：</h4><p>单例模式是设计模式中最为简单的一种，单例模式就是在这个系统中一个类只有一个实例，目的就是根据场景的需要节省资源比如读取配置文件，当然有一些场景是必须要单例的，比如日志等</p><h4 id="2-单例模式常见的使用场景："><a href="#2-单例模式常见的使用场景：" class="headerlink" title="2 单例模式常见的使用场景："></a>2 单例模式常见的使用场景：</h4><p>1）. Windows的任务管理器就是很典型的单例模式</p><p>2）. 应用程序的日志应用，一般都何用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。</p><p>3）. 应用的配置对象的读取，一般也应用单例模式，这个是由于配置文件是共享的资源。</p><p>4）. 数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。数据库软件系统中使用数据库连接池，主要是节省打开或者关闭数据库连接所引起的效率损耗，这种效率上的损耗还是非常昂贵的，因为何用单例模式来维护，就可以大大降低这种损耗。</p><p>5）. 多线程的线程池的设计一般也是采用单例模式，这是由于线程池要方便对池中的线程进行控制。</p><p>6）. 操作系统的文件系统，也是大的单例模式实现的具体例子，一个操作系统只能有一个文件系统。</p><h4 id="3-在python中单例模式实现的方式有以下几种"><a href="#3-在python中单例模式实现的方式有以下几种" class="headerlink" title="3 在python中单例模式实现的方式有以下几种"></a>3 在python中单例模式实现的方式有以下几种</h4><ul><li>1）使用模块导入的方式</li><li>2）使用装饰器控制</li><li>3）使用类方法实例化的方式</li><li>4）使用静态方法实例化的方式</li><li>5）基于<strong>new</strong>方法实现</li><li>6）基于metaclass方式实现</li></ul><h4 id="4-实例演示python实现单例模式的方式"><a href="#4-实例演示python实现单例模式的方式" class="headerlink" title="4 实例演示python实现单例模式的方式"></a>4 实例演示python实现单例模式的方式</h4><ul><li>1）使用模块导入的方式<br>首先建立三个文件，test.py，test01.py，在test.py中定义个Student类并且初始化一个实例，然后在另外一个测试文件连续两次导入test.py中的实例，打印其内容以及id观察是否一致<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#test.py</span><br><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">student&#x3D;Student(&quot;Jack&quot;)</span><br></pre></td></tr></table></figure>test01.py的代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from test import student</span><br><span class="line"></span><br><span class="line">print(student.name)</span><br><span class="line">print(id(student))</span><br><span class="line"></span><br><span class="line">from test import student as student2</span><br><span class="line"></span><br><span class="line">print(student2.name)</span><br><span class="line">print(id(student2))</span><br></pre></td></tr></table></figure>test01.py执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jack</span><br><span class="line">2911141618064</span><br><span class="line">Jack</span><br><span class="line">2911141618064</span><br></pre></td></tr></table></figure></li><li>使用装饰器的方式</li></ul><p>参照<a href="https://redrose2100.github.io/blog/2020/08/31/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(4)--%E8%A3%85%E9%A5%B0%E5%99%A8/" target="_blank" rel="noopener">python高级语法系列(4)</a><br>中被装饰对象是类的场景，下面选择装饰器是函数，被装饰器是类的场景实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def singleton_decorator(cls):</span><br><span class="line">    __instance&#x3D;&#123;&#125;</span><br><span class="line">    def _singleton_decorator(*args,**kwargs):</span><br><span class="line">        if cls.__name__ not in __instance.keys():</span><br><span class="line">            __instance[cls.__name__]&#x3D;cls(*args,**kwargs)</span><br><span class="line">        return __instance[cls.__name__]</span><br><span class="line">    return _singleton_decorator</span><br><span class="line"></span><br><span class="line">@singleton_decorator</span><br><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">s1&#x3D;Student(&quot;Jack&quot;)</span><br><span class="line">print(s1.name)</span><br><span class="line">print(id(s1))</span><br><span class="line"></span><br><span class="line">s2&#x3D;Student(&quot;Tom&quot;)</span><br><span class="line">print(s2.name)</span><br><span class="line">print(id(s2))</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jack</span><br><span class="line">3003422531792</span><br><span class="line">Jack</span><br><span class="line">3003422531792</span><br></pre></td></tr></table></figure><ul><li>使用类方法的方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def student(cls,*args,**kwargs):</span><br><span class="line">        if not hasattr(Student,&quot;_student&quot;):</span><br><span class="line">            Student._student&#x3D;Student(*args,**kwargs)</span><br><span class="line">        return Student._student</span><br><span class="line"></span><br><span class="line">s1&#x3D;Student.student(&quot;Jack&quot;)</span><br><span class="line">print(s1.name)</span><br><span class="line">print(id(s1))</span><br><span class="line"></span><br><span class="line">s2&#x3D;Student.student(&quot;Tom&quot;)</span><br><span class="line">print(s2.name)</span><br><span class="line">print(id(s2))</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jack</span><br><span class="line">2481198283504</span><br><span class="line">Jack</span><br><span class="line">2481198283504</span><br></pre></td></tr></table></figure></li><li>使用静态方法实例化的方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def student(*args,**kwargs):</span><br><span class="line">        if not hasattr(Student,&quot;_student&quot;):</span><br><span class="line">            Student._student&#x3D;Student(*args,**kwargs)</span><br><span class="line">        return Student._student</span><br><span class="line"></span><br><span class="line">s1&#x3D;Student.student(&quot;Jack&quot;)</span><br><span class="line">print(s1.name)</span><br><span class="line">print(id(s1))</span><br><span class="line"></span><br><span class="line">s2&#x3D;Student.student(&quot;Tom&quot;)</span><br><span class="line">print(s2.name)</span><br><span class="line">print(id(s2))</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jack</span><br><span class="line">1572367645424</span><br><span class="line">Jack</span><br><span class="line">1572367645424</span><br></pre></td></tr></table></figure><h1 id="使用new方法实现"><a href="#使用new方法实现" class="headerlink" title="使用new方法实现"></a>使用<strong>new</strong>方法实现</h1>这里初始化的时候需要注意下需要判断是否为第一次初始化，如果不是则不作任何操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    _instance&#x3D;None</span><br><span class="line">    _first_init&#x3D;True</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        cls&#x3D;type(self)</span><br><span class="line">        if cls._first_init:</span><br><span class="line">            self.name&#x3D;name</span><br><span class="line">            cls._first_init&#x3D;False</span><br><span class="line"></span><br><span class="line">    def __new__(cls,*args,**kwargs):</span><br><span class="line">        if not cls._instance:</span><br><span class="line">            cls._instance&#x3D;super().__new__(cls)</span><br><span class="line">        return cls._instance</span><br><span class="line"></span><br><span class="line">s1&#x3D;Student(&quot;Jack&quot;)</span><br><span class="line">print(s1.name)</span><br><span class="line">print(id(s1))</span><br><span class="line"></span><br><span class="line">s2&#x3D;Student(&quot;Tom&quot;)</span><br><span class="line">print(s2.name)</span><br><span class="line">print(id(s2))</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jack</span><br><span class="line">1503017427392</span><br><span class="line">Jack</span><br><span class="line">1503017427392</span><br></pre></td></tr></table></figure></li><li>基于metaclass方式实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class StudentMetaclass(type):</span><br><span class="line">    _instance&#x3D;None</span><br><span class="line">    def __init__(self,*args,**kwargs):</span><br><span class="line">        super(StudentMetaclass,self).__init__(*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    def __call__(cls,*args,**kwargs):</span><br><span class="line">        if not cls._instance:</span><br><span class="line">            cls._instance&#x3D;super(StudentMetaclass,cls).__call__(*args,**kwargs)</span><br><span class="line">        return cls._instance</span><br><span class="line"></span><br><span class="line">class Student(metaclass&#x3D;StudentMetaclass):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">s1&#x3D;Student(&quot;Jack&quot;)</span><br><span class="line">print(s1.name)</span><br><span class="line">print(id(s1))</span><br><span class="line"></span><br><span class="line">s2&#x3D;Student(&quot;Tom&quot;)</span><br><span class="line">print(s2.name)</span><br><span class="line">print(id(s2))</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jack</span><br><span class="line">2074432889184</span><br><span class="line">Jack</span><br><span class="line">2074432889184</span><br></pre></td></tr></table></figure>总结：在上面讲述的实现python单例模式的方式中，推荐使用<strong>new</strong>的方式，简单容易理解，而且使用方式和普通类的使用方式保持一致，metaclass方式也不错，不过对python高级语法的理解要求比较高</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式python系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式python系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法超详细通俗易懂系列总结</title>
      <link href="/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E8%B6%85%E8%AF%A6%E7%BB%86%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/"/>
      <url>/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E8%B6%85%E8%AF%A6%E7%BB%86%E9%80%9A%E4%BF%97%E6%98%93%E6%87%82%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><a href="https://redrose2100.github.io/blog/2020/08/10/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(1)--python%E4%B8%AD%E7%9A%84%E4%B8%80%E5%88%87%E7%9A%86%E5%AF%B9%E8%B1%A1/" target="_blank" rel="noopener">python高级语法系列(1)–python中的一切皆对象</a></p><p><a href="https://redrose2100.github.io/blog/2020/08/17/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(2)--type%E3%80%81object%E5%92%8Cclass%E7%9A%84%E5%85%B3%E7%B3%BB/" target="_blank" rel="noopener">python高级语法系列(2)–type、object和class的关系</a></p><p><a href="https://redrose2100.github.io/blog/2020/08/17/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(3)--python%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B/" target="_blank" rel="noopener">python高级语法系列(3)–python中常见内置类型</a></p><p><a href="https://redrose2100.github.io/blog/2020/08/31/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(4)--%E8%A3%85%E9%A5%B0%E5%99%A8/" target="_blank" rel="noopener">python高级语法系列(4)–装饰器</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(5)-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">python高级语法系列(5)–字符串相关的魔法函数</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(6)--%E5%AE%B9%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">python高级语法系列(6)–容器相关的魔法函数</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(7)--%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">python高级语法系列(7)–迭代器相关的魔法函数</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(8)--%E7%B1%BB%E3%80%81call%E3%80%81%E6%95%B0%E5%AD%97%E8%BD%AC%E5%8C%96%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">python高级语法系列(8)–类、call、数字转化相关的魔法函数</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(9)--%E5%B1%9E%E6%80%A7%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/" target="_blank" rel="noopener">python高级语法系列(9)–属性相关的魔法函数</a></p><p><a href="https://redrose2100.github.io/blog/2020/09/07/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(10)--%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E3%80%81%E7%B1%BB%E6%96%B9%E6%B3%95%E3%80%81%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank" rel="noopener">python高级语法系列(10)–实例方法、类方法、静态方法的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(9)--属性相关的魔法函数</title>
      <link href="/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(9)--%E5%B1%9E%E6%80%A7%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/"/>
      <url>/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(9)--%E5%B1%9E%E6%80%A7%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">__getattr__(self, name) 定义当用户试图获取一个不存在的属性时的行为</span><br><span class="line"></span><br><span class="line">__setattr__(self, name, value) 定义当一个属性被设置时的行为</span><br><span class="line"></span><br><span class="line">__delattr__(self, name) 定义当一个属性被删除时的行为</span><br><span class="line"></span><br><span class="line">__getattribute__(self, name) 定义当该类的属性被访问时的行为</span><br><span class="line"></span><br><span class="line">__dir__(self) 定义当 dir() 被调用时的行为</span><br><span class="line"></span><br><span class="line">__get__(self, instance, owner) 定义当描述符的值被取得时的行为</span><br><span class="line"></span><br><span class="line">__set__(self, instance, value) 定义当描述符的值被改变时的行为</span><br></pre></td></tr></table></figure><ul><li>__getattr__，__setattr__，__delattr__<br>当我们访问一个不存在的属性的时候，会抛出异常，提示我们不存在这个属性。而这个异常就是<strong>getattr</strong>方法抛出的，其原因在于他是访问一个不存在的属性的最后落脚点，作为异常抛出的地方提示出错再适合不过了</li></ul><p>如果不重写<strong>getattr</strong>魔法函数，当访问不存在属性时会自动报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">s&#x3D;Student(&quot;Jack&quot;)</span><br><span class="line">print(s.age)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;G:&#x2F;python_flask&#x2F;test.py&quot;, line 7, in &lt;module&gt;</span><br><span class="line">    print(s.age)</span><br><span class="line">AttributeError: &#39;Student&#39; object has no attribute &#39;age&#39;</span><br></pre></td></tr></table></figure><p>__getattr__可以在有一些属性不存在的时候异常处理可以更灵活</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Student2(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def __getattr__(self,item):</span><br><span class="line">        print(&quot;no &#123;attr&#125; exist...&quot;.format(attr&#x3D;item))</span><br><span class="line">        return 0</span><br><span class="line"></span><br><span class="line">s &#x3D; Student2(&quot;Jack&quot;)</span><br><span class="line">print(s.name)</span><br><span class="line">print(s.age)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Jack</span><br><span class="line">no age exist...</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>同样<strong>setattr</strong>也可以在属性设置的时候做一些功能增强功能,包括初始化的时候如果有初始化变量也会走到这个魔法函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Student2(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def __setattr__(self,key,value):</span><br><span class="line">        print(&quot;in __setattr__...key&#x3D;&#123;key&#125;,value&#x3D;&#123;value&#125;&quot;.format(key&#x3D;key,value&#x3D;value))</span><br><span class="line">        object.__setattr__(self,key,value)</span><br><span class="line"></span><br><span class="line">s &#x3D; Student2(&quot;Jack&quot;)</span><br><span class="line">s.age&#x3D;20</span><br><span class="line">s.name&#x3D;&quot;hello&quot;</span><br><span class="line">print(s.age)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">in __setattr__...key&#x3D;name,value&#x3D;Jack</span><br><span class="line">in __setattr__...key&#x3D;age,value&#x3D;20</span><br><span class="line">in __setattr__...key&#x3D;name,value&#x3D;hello</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>需要注意的是下面一段代码是一个死循环,具体来说当实例化的时候进入<strong>init</strong>函数，然后对name进行设置，<br>然后进入<strong>setattr</strong>函数，进入之后又开始进行self.key=value的设置，则再次进入<strong>setattr</strong>函数，<br>即已经进入死循环了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Student2(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def __setattr__(self,key,value):</span><br><span class="line">        print(&quot;in __setattr__...key&#x3D;&#123;key&#125;,value&#x3D;&#123;value&#125;&quot;.format(key&#x3D;key,value&#x3D;value))</span><br><span class="line">        self.key&#x3D;value</span><br><span class="line"></span><br><span class="line">s &#x3D; Student2(&quot;Jack&quot;)</span><br><span class="line">s.age&#x3D;20</span><br><span class="line">print(s.age)</span><br></pre></td></tr></table></figure><p>魔法函数<strong>delattr</strong>和<strong>setattr</strong>的使用方法基本是一致的，同样要注意容易陷入死循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Student2(object):</span><br><span class="line">    def __init__(self, name,age):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line">        self.age&#x3D;age</span><br><span class="line"></span><br><span class="line">s &#x3D; Student2(&quot;Jack&quot;,20)</span><br><span class="line">print(s.age)</span><br><span class="line">del s.age</span><br><span class="line">print(s.age)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">20</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;G:&#x2F;python_flask&#x2F;test.py&quot;, line 9, in &lt;module&gt;</span><br><span class="line">    print(s.age)</span><br><span class="line">AttributeError: &#39;Student2&#39; object has no attribute &#39;age&#39;</span><br></pre></td></tr></table></figure><p>最后需要注意的是<strong>getattr</strong>方法只有当属性不存在的时候才会走进来，而<strong>setattr</strong>只要是对属性设置，不管属性是否已经存在，都会走进来</p><ul><li>__getattribute__:调用对象的属性时，都会进入到<strong>getattribute</strong>魔法函数，然后进入基类的<strong>getattribute</strong>,所以<strong>getattribute</strong>功能也是给获取属性<br>的时候做功能增强，如果属性存在，则不会调用<em>getattr__方法，如果属性不存在，则会抛出AttributeError异常，此时则会进入<strong>getattr</strong>方法<br>需要注意的是：如果重写了<em>_getattribute</em></em>,则需要判断如果属性不存在应继续主动抛出异常，因为此时不会自动触发异常了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Student2(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def __getattribute__(self, item):</span><br><span class="line">        print(&quot;in __getattribute__  get attr &#123;attr&#125;&quot;.format(attr&#x3D;item))</span><br><span class="line">        return object.__getattribute__(self,item)</span><br><span class="line"></span><br><span class="line">    def __getattr__(self,item):</span><br><span class="line">        print(&quot;no &#123;attr&#125; exist...&quot;.format(attr&#x3D;item))</span><br><span class="line">        return 0</span><br><span class="line"></span><br><span class="line">s &#x3D; Student2(&quot;Jack&quot;)</span><br><span class="line">print(s.name)</span><br><span class="line">print(s.age)</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">in __getattribute__  get attr name</span><br><span class="line">Jack</span><br><span class="line">in __getattribute__  get attr age</span><br><span class="line">no age exist...</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li>__get__与<strong>set</strong><br>__get__和<strong>set</strong>方法通俗点来说就是在至少两个类中起作用，说白了就是实现对象的绑定关系的</li></ul><p>注意：如下只有在Group类的类成员变量用Student类初始化进行赋值的时候，才会走到Student类中的<strong>get</strong>和<strong>set</strong>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def __get__(self,instance,owner):</span><br><span class="line">        print(&quot;in Student __get__ name is &#123;name&#125;&quot;.format(name&#x3D;self.name))</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __set__(self,instance,value):</span><br><span class="line">        self &#x3D; value</span><br><span class="line">        print(&quot;in Student __set__ name is &#123;name&#125;&quot;.format(name&#x3D;self.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Group(object):</span><br><span class="line">    menber1&#x3D;Student(&quot;Jack&quot;)</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.menber2&#x3D;Student(&quot;Hellen&quot;)</span><br><span class="line"></span><br><span class="line">group&#x3D;Group()</span><br><span class="line">print(group.menber1)</span><br><span class="line">print(group.menber2)</span><br><span class="line">stu1&#x3D;Student(&quot;Tom&quot;)</span><br><span class="line">group.menber1&#x3D;stu1</span><br><span class="line">stu2&#x3D;Student(&quot;Sam&quot;)</span><br><span class="line">group.menber2&#x3D;stu2</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">in Student __get__ name is Jack</span><br><span class="line">&lt;__main__.Student object at 0x000001DCD3423B50&gt;</span><br><span class="line">&lt;__main__.Student object at 0x000001DCD342E430&gt;</span><br><span class="line">in Student __set__ name is Tom</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(8)--类、call、数字转化相关的魔法函数</title>
      <link href="/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(8)--%E7%B1%BB%E3%80%81call%E3%80%81%E6%95%B0%E5%AD%97%E8%BD%AC%E5%8C%96%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/"/>
      <url>/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(8)--%E7%B1%BB%E3%80%81call%E3%80%81%E6%95%B0%E5%AD%97%E8%BD%AC%E5%8C%96%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="1-类中实现了-call-函数之后，则该类的对象也可以像函数一样调用，而调用的时候就是调用这个魔法函数，一个非常常用的场景就是装饰器类"><a href="#1-类中实现了-call-函数之后，则该类的对象也可以像函数一样调用，而调用的时候就是调用这个魔法函数，一个非常常用的场景就是装饰器类" class="headerlink" title="1 类中实现了__call__()函数之后，则该类的对象也可以像函数一样调用，而调用的时候就是调用这个魔法函数，一个非常常用的场景就是装饰器类"></a>1 类中实现了__call__()函数之后，则该类的对象也可以像函数一样调用，而调用的时候就是调用这个魔法函数，一个非常常用的场景就是装饰器类</h4><p>先看一个简单的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def __call__(self,age,sex):</span><br><span class="line">        print(&quot;age is :&#123;age&#125;,sex is :&#123;sex&#125;&quot;.format(age&#x3D;age,sex&#x3D;sex))</span><br><span class="line"></span><br><span class="line">s&#x3D;Student(&quot;Jack&quot;)</span><br><span class="line">s(20,&quot;man&quot;)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age is :20,sex is :man</span><br></pre></td></tr></table></figure><p>下面是之前装饰器的专题讲过的一个例子，现在再来看就好理解了，decorator(name=”func_decorator”)已经是一个类的实例了，再当做装饰器用，就相当于把对象当函数调用了，即会调用到call函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self, name&#x3D;&quot;hello world&quot;):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def __call__(self, func):</span><br><span class="line">        def wrapper(*args, **kwargs):</span><br><span class="line">            print(&quot;before func &#123;func&#125;()...&quot;.format(func&#x3D;func.__name__))</span><br><span class="line">            print(&quot;name&#x3D; &#123;name&#125;&quot;.format(name&#x3D;self.name))</span><br><span class="line">            result &#x3D; func(*args, **kwargs)</span><br><span class="line">            print(&quot;after func &#123;func&#125;()...&quot;.format(func&#x3D;func.__name__))</span><br><span class="line">            return result</span><br><span class="line"></span><br><span class="line">        return wrapper</span><br><span class="line"></span><br><span class="line">@decorator(name&#x3D;&quot;func_decorator&quot;)</span><br><span class="line">def func(a, b&#x3D;10):</span><br><span class="line">    print(&quot;in func func3()...&quot;)</span><br><span class="line">    print(&quot;a&#x3D;&#123;a&#125;, b&#x3D; &#123;b&#125;&quot;.format(a&#x3D;a, b&#x3D;b))</span><br><span class="line"></span><br><span class="line">func(10,b&#x3D;100)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before func func()...</span><br><span class="line">name&#x3D; func_decorator</span><br><span class="line">in func func3()...</span><br><span class="line">a&#x3D;10, b&#x3D; 100</span><br><span class="line">after func func()...</span><br></pre></td></tr></table></figure><h4 id="2-with上下文管理器-enter-exit"><a href="#2-with上下文管理器-enter-exit" class="headerlink" title="2 with上下文管理器 __enter__(),__exit__()"></a>2 with上下文管理器 __enter__(),__exit__()</h4><p>这两个魔法函数是实现with上下文管理器的，with 后面的语句会实例化一个类，同时进入类的<br>__enter__方法，Enter方法返回值可以使用as xxx接受，然后执行with语句下面的内容，随后<br>执行<strong>exit</strong>()方法中的内容，如果类的<strong>init</strong>()或者<strong>enter</strong>()方法爆出了异常，则代码<br>不会进入到<strong>exit</strong>()函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def __enter__(self):</span><br><span class="line">        return self.name</span><br><span class="line"></span><br><span class="line">    def __exit__(self,exc_type,exc_val,exc_tb):</span><br><span class="line">        print(&quot;in exit...&quot;)</span><br><span class="line"></span><br><span class="line">with Student(&quot;Jack&quot;) as stunet_name:</span><br><span class="line">    print(stunet_name)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Jack</span><br><span class="line">in exit...</span><br></pre></td></tr></table></figure><h4 id="3-数值转换相关abs-bool-int-float"><a href="#3-数值转换相关abs-bool-int-float" class="headerlink" title="3 数值转换相关abs,__bool__,__int__,__float__"></a>3 数值转换相关<strong>abs</strong>,__bool__,__int__,__float__</h4><p>一个类如果实现了这几个魔法函数，就可以直接对类的对象使用abs(),bool(),int(),float()函数了，否则不能使用这几个函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name,age,score):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line">        self.age&#x3D;age</span><br><span class="line">        self.score&#x3D;score</span><br><span class="line">    def __abs__(self):</span><br><span class="line">        return abs(self.age)</span><br><span class="line"></span><br><span class="line">    def __bool__(self):</span><br><span class="line">        return bool(self.age)</span><br><span class="line"></span><br><span class="line">    def __int__(self):</span><br><span class="line">        return int(self.age)</span><br><span class="line"></span><br><span class="line">    def __float__(self):</span><br><span class="line">        return float(self.score)</span><br><span class="line"></span><br><span class="line">s&#x3D;Student(&quot;jack&quot;,20,98.5)</span><br><span class="line">print(abs(s))</span><br><span class="line">print(bool(s))</span><br><span class="line">print(int(s))</span><br><span class="line">print(float(s))</span><br></pre></td></tr></table></figure><h4 id="4-类的实例化相关new-init-del"><a href="#4-类的实例化相关new-init-del" class="headerlink" title="4 类的实例化相关new,__init__,__del__"></a>4 类的实例化相关<strong>new</strong>,__init__,__del__</h4><p>new方法是创建类的实例，init方法是实例的初始化，而del方法则是类的析构函数，所以<br>如果同时又new又有init方法，则肯定是先执行new方法，然后在执行init方法的，用于垃圾回收的<br>new和init最大的区别是当继承一个不可变类型（如str，int）等的时候，通过init是无法改变数据的内容的，<br>而这时候需要改变数据的内容太，则此时需要使用new方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class MyInt(int):</span><br><span class="line">    def __init__(self,a):</span><br><span class="line">        self.a&#x3D;abs(a)</span><br><span class="line"></span><br><span class="line">temp&#x3D;MyInt(-123)</span><br><span class="line">print(temp)</span><br><span class="line"></span><br><span class="line">class MyInt2(int):</span><br><span class="line">    def __new__(cls,a):</span><br><span class="line">        return super(MyInt2,cls).__new__(cls,abs(a))</span><br><span class="line"></span><br><span class="line">temp2&#x3D;MyInt2(-123)</span><br><span class="line">print(temp2)</span><br><span class="line"></span><br><span class="line">class Student(object):</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line">        print(&quot;in __init__...&quot;)</span><br><span class="line"></span><br><span class="line">    def __new__(cls,*args,**kwargs):</span><br><span class="line">        print(&quot;in __new__...&quot;)</span><br><span class="line">        return object.__new__(cls)</span><br><span class="line"></span><br><span class="line">    def __del__(self):</span><br><span class="line">        print(&quot;in __del__...&quot;)</span><br><span class="line"></span><br><span class="line">s&#x3D;Student(&quot;Jack&quot;)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-123</span><br><span class="line">123</span><br><span class="line">in __new__...</span><br><span class="line">in __init__...</span><br><span class="line">in __del__...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(7)--迭代器相关的魔法函数</title>
      <link href="/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(7)--%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/"/>
      <url>/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(7)--%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>Iterable，可迭代：<br>一个类实现了<strong>iter</strong>()函数，则这个类是可迭代的，通常<strong>iter</strong>()函数必须返回一个<br>实现了<strong>next</strong>()的类的对象，当然如果自己实现了<strong>next</strong>()，也可以返回自己</li><li>Iterator 迭代器：<br>同时实现了<strong>iter</strong>()和<strong>next</strong>()的对象，就是迭代器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Student():</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line">        self.start&#x3D;0</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        if self.start &lt;len(self.name):</span><br><span class="line">            result&#x3D;self.name[self.start]</span><br><span class="line">            self.start+&#x3D;1</span><br><span class="line">            return result</span><br><span class="line">        else:</span><br><span class="line">            raise StopIteration</span><br><span class="line"></span><br><span class="line">s&#x3D;Student(&quot;Jack Macial&quot;)</span><br><span class="line">for elem in s:</span><br><span class="line">    print(elem)</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">J</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">k</span><br><span class="line"> </span><br><span class="line">M</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">i</span><br><span class="line">a</span><br><span class="line">l</span><br></pre></td></tr></table></figure>下面查看next函数的使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Student():</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line">        self.start&#x3D;0</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        if self.start &lt;len(self.name):</span><br><span class="line">            result&#x3D;self.name[self.start]</span><br><span class="line">            self.start+&#x3D;1</span><br><span class="line">            return result</span><br><span class="line">        else:</span><br><span class="line">            raise StopIteration</span><br><span class="line"></span><br><span class="line">s&#x3D;Student(&quot;Jack Macial&quot;)</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br><span class="line">print(next(s))</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">J</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">k</span><br><span class="line"> </span><br><span class="line">M</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">i</span><br><span class="line">a</span><br><span class="line">l</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;G:&#x2F;python_flask&#x2F;test.py&quot;, line 29, in &lt;module&gt;</span><br><span class="line">    print(next(s))</span><br><span class="line">  File &quot;G:&#x2F;python_flask&#x2F;test.py&quot;, line 15, in __next__</span><br><span class="line">    raise StopIteration</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(6)--容器相关的魔法函数</title>
      <link href="/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(6)--%E5%AE%B9%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/"/>
      <url>/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(6)--%E5%AE%B9%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__len__(self) 定义当被 len() 调用时的行为（返回容器中元素的个数）</span><br><span class="line"></span><br><span class="line">__getitem__(self, key) 定义获取容器中指定元素的行为，相当于 self[key]</span><br><span class="line"></span><br><span class="line">__setitem__(self, key, value) 定义设置容器中指定元素的行为，相当于 self[key] &#x3D; value</span><br><span class="line"></span><br><span class="line">__delitem__(self, key) 定义删除容器中指定元素的行为，相当于 del self[key]</span><br><span class="line"></span><br><span class="line">__contains__(self, item) 定义当使用成员测试运算符（in 或 not in）时的行为</span><br></pre></td></tr></table></figure><ul><li>如果一个勒种重写了<strong>len</strong>()魔法函数后，则可以直接对该类的对象使用len()方法计算长度，否则则不可以<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student():</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">s&#x3D;Student(&quot;Jack&quot;)</span><br><span class="line">print(len(s))</span><br></pre></td></tr></table></figure>执行结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;G:&#x2F;python_flask&#x2F;test.py&quot;, line 6, in &lt;module&gt;</span><br><span class="line">    print(len(s))</span><br><span class="line">TypeError: object of type &#39;Student&#39; has no len()</span><br></pre></td></tr></table></figure>下面给上面的类中加一个<strong>len</strong>()方法的重写，返回学生名字的长度<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Student():</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.name)</span><br><span class="line"></span><br><span class="line">s&#x3D;Student(&quot;Jack&quot;)</span><br><span class="line">print(len(s))</span><br></pre></td></tr></table></figure>执行结果为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></li><li>如果一个类重写了<strong>contains</strong>()方法，则对该类的对象可以使用in方法，否则不可以<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student():</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">s&#x3D;Student(&quot;Jack&quot;)</span><br><span class="line">print(&quot;J&quot; in s)</span><br></pre></td></tr></table></figure>执行结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;G:&#x2F;python_flask&#x2F;test.py&quot;, line 8, in &lt;module&gt;</span><br><span class="line">    print(&quot;J&quot; in s)</span><br><span class="line">TypeError: argument of type &#39;Student&#39; is not iterable</span><br></pre></td></tr></table></figure>下面给上面的类中增加<strong>contains</strong>方法的实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Student():</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def __contains__(self,item):</span><br><span class="line">        return item in self.name</span><br><span class="line"></span><br><span class="line">s&#x3D;Student(&quot;Jack&quot;)</span><br><span class="line">print(&quot;J&quot; in s)</span><br></pre></td></tr></table></figure>执行结果为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">True</span><br></pre></td></tr></table></figure></li><li><strong>getitem</strong>()，<strong>setitem</strong>() 可以让一个类拥有类似dict的使用方式去获取、设置属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Student():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.attr&#x3D;&#123;&#125;</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        self.attr[key]&#x3D;value</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, item):</span><br><span class="line">        return self.attr[item]</span><br><span class="line"></span><br><span class="line">s&#x3D;Student()</span><br><span class="line">s[&quot;name&quot;]&#x3D;&quot;Jack&quot;</span><br><span class="line">s[&quot;age&quot;]&#x3D;20</span><br><span class="line">print(s[&quot;name&quot;])</span><br><span class="line">print(s[&quot;age&quot;])</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Jack</span><br><span class="line">20</span><br></pre></td></tr></table></figure></li><li><strong>delitem</strong>() 可以使用del 方法去删除类对象的某一个属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Student():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.attr&#x3D;&#123;&#125;</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        self.attr[key]&#x3D;value</span><br><span class="line"></span><br><span class="line">    def __getitem__(self, item):</span><br><span class="line">        return self.attr[item]</span><br><span class="line"></span><br><span class="line">    def __delitem__(self, key):</span><br><span class="line">        del self.attr[key]</span><br><span class="line"></span><br><span class="line">s&#x3D;Student()</span><br><span class="line">s[&quot;name&quot;]&#x3D;&quot;Jack&quot;</span><br><span class="line">s[&quot;age&quot;]&#x3D;20</span><br><span class="line">print(s[&quot;name&quot;])</span><br><span class="line">print(s[&quot;age&quot;])</span><br><span class="line">del s[&quot;name&quot;]</span><br><span class="line">print(s[&quot;age&quot;])</span><br><span class="line">print(s[&quot;name&quot;])</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Jack</span><br><span class="line">20</span><br><span class="line">20</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;G:&#x2F;python_flask&#x2F;test.py&quot;, line 21, in &lt;module&gt;</span><br><span class="line">    print(s[&quot;name&quot;])</span><br><span class="line">  File &quot;G:&#x2F;python_flask&#x2F;test.py&quot;, line 9, in __getitem__</span><br><span class="line">    return self.attr[item]</span><br><span class="line">KeyError: &#39;name&#39;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(5)--字符串相关的魔法函数</title>
      <link href="/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(5)-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/"/>
      <url>/blog/2020/09/06/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(5)-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E7%9A%84%E9%AD%94%E6%B3%95%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="字符串表示-repr-和str"><a href="#字符串表示-repr-和str" class="headerlink" title="字符串表示:__repr__()和str()"></a>字符串表示:__repr__()和<strong>str</strong>()</h4><ul><li>相同点：两个方法都是为了更好的显示类对象的，当使用print打印类对象的时候，这两个函数的作用是完全相同的<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Student1():</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">s&#x3D;Student1(&quot;Jack&quot;)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line">class Student2():</span><br><span class="line">    def __init__(self,name):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &quot;Name:&#123;name&#125;&quot;.format(name&#x3D;self.name)</span><br><span class="line"></span><br><span class="line">s&#x3D;Student2(&quot;Jack&quot;)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line">class Student3():</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name &#x3D; name</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &quot;Name:&#123;name&#125;&quot;.format(name&#x3D;self.name)</span><br><span class="line"></span><br><span class="line">s &#x3D; Student3(&quot;Jack&quot;)</span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;__main__.Student1 object at 0x0000019F359D3B50&gt;</span><br><span class="line">Name:Jack</span><br><span class="line">Name:Jack</span><br></pre></td></tr></table></figure></li><li>不同点：在python交互式环境解释器中，不使用print，直接输入类对象名时，如果想定制化输出，则必须重写<strong>repr</strong>方法，此时重写<strong>str</strong>并没有什么作用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; class Student1():</span><br><span class="line">...     def __init__(self,name):</span><br><span class="line">...             self.name&#x3D;name</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; class Student2():</span><br><span class="line">...     def __init__(self,name):</span><br><span class="line">...             self.name&#x3D;name</span><br><span class="line">...     def __repr__(self):</span><br><span class="line">...             return &quot;Name:&#123;name&#125;&quot;.format(name&#x3D;self.name)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; class Student3():</span><br><span class="line">...     def __init__(self,name):</span><br><span class="line">...             self.name&#x3D;name</span><br><span class="line">...     def __str__(self):</span><br><span class="line">...             return &quot;Name:&#123;name&#125;&quot;.format(name&#x3D;self.name)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; s&#x3D;Student1(&quot;Jack&quot;)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&lt;__main__.Student1 object at 0x000001FFAE390820&gt;</span><br><span class="line">&gt;&gt;&gt; s&#x3D;Student2(&quot;Jack&quot;)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">Name:Jack</span><br><span class="line">&gt;&gt;&gt; s&#x3D;Student3(&quot;Jack&quot;)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&lt;__main__.Student3 object at 0x000001FFAE390820&gt;</span><br></pre></td></tr></table></figure>总结：为了无论在使用print还是不适用print时，都能友好的显示类的对象，推荐重写<strong>repr</strong>()魔法函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python专题系列(5)--pluggy详解</title>
      <link href="/blog/2020/09/03/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(5)--pluggy%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/09/03/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(5)--pluggy%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-pluggy-简介"><a href="#1-pluggy-简介" class="headerlink" title="1 pluggy 简介"></a>1 pluggy 简介</h4><ul><li>pluggy 作用：提供了一个简易便捷的插件系统，可以做到插件与主题功能松耦合</li><li>pluggy 是pytest，tox，devpi的核心框架</li></ul><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h4><p>执行如下命令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pluggy</span><br></pre></td></tr></table></figure><h4 id="3-使用初体验"><a href="#3-使用初体验" class="headerlink" title="3 使用初体验"></a>3 使用初体验</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line"># HookspecMarker 和 HookimplMarker 实质上是一个装饰器带参数的装饰器类，作用是给函数增加额外的属性设置</span><br><span class="line">hookspec &#x3D; pluggy.HookspecMarker(&quot;myproject&quot;)</span><br><span class="line">hookimpl &#x3D; pluggy.HookimplMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line"># 定义自己的Spec，这里可以理解为定义接口类</span><br><span class="line">class MySpec:</span><br><span class="line">    # hookspec 是一个装饰类中的方法的装饰器，为此方法增额外的属性设置，这里myhook可以理解为定义了一个接口</span><br><span class="line">    @hookspec</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 定义了一个插件</span><br><span class="line">class Plugin_1:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的和</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook()&quot;)</span><br><span class="line">        return arg1 + arg2</span><br><span class="line"></span><br><span class="line"># 定义第二个插件</span><br><span class="line">class Plugin_2:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook()&quot;)</span><br><span class="line">        return arg1 - arg2</span><br><span class="line"></span><br><span class="line"># 实例化一个插件管理的对象，注意这里的名称要与文件开头定义装饰器的时候的名称一致</span><br><span class="line">pm &#x3D; pluggy.PluginManager(&quot;myproject&quot;)</span><br><span class="line"># 将自定义的接口类加到钩子定义中去</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"># 注册定义的两个插件</span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line"># 通过插件管理对象的钩子调用方法，这时候两个插件中的这个方法都会执行，而且遵循后注册先执行即LIFO的原则，两个插件的结果讲义列表的形式返回</span><br><span class="line">results &#x3D; pm.hook.myhook(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inside Plugin_2.myhook()</span><br><span class="line">inside Plugin_1.myhook()</span><br><span class="line">[-1, 3]</span><br></pre></td></tr></table></figure><h4 id="4-详解解释"><a href="#4-详解解释" class="headerlink" title="4 详解解释"></a>4 详解解释</h4><p>从代码上看比较绕，其实通俗一点理解，其实挺简单的，可以理解为首先定义一个接口类，然后定义很多插件类，插件类想要多少就定义多少，<br>接口类中要定义接口，上面的例子值定义了一个接口，其实可以定义很多接口，在每个插件类中需要选择接口类中的接口去实现，当然也不需要每个<br>都需要去实现，可以根据自己的需要有选择的去实现。</p><p>举个例子：</p><p>比如定义了一个接口类，接口类中定义了10个接口，同时定义了3个类，这三个类分别实现<br>了接口类中3个接口，6个接口和10个接口，然后实例化一个插件管理的对象，实例化对象将<br>接口类加入定义模板中，然后去注册这三个类，注册之后，就可以通过插件管理对象的钩子去<br>调用接口类中的每个方法了，比如调用头三个方法，因为每个插件中都实现了，所以就会有三个结果，<br>调用后面4-6的接口时，因为只有两个插件实现了，所以只会有两个结果返回，调用7-10的接口<br>因为只有一个插件类实现了，所以就会只有一个结果返回，这样插件使用起来就非常灵活，<br>可以真正做到“热插拔”</p><p>下面用代码示例演示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line"># HookspecMarker 和 HookimplMarker 实质上是一个装饰器带参数的装饰器类，作用是给函数增加额外的属性设置</span><br><span class="line">hookspec &#x3D; pluggy.HookspecMarker(&quot;myproject&quot;)</span><br><span class="line">hookimpl &#x3D; pluggy.HookimplMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line"># 定义自己的Spec，这里可以理解为定义接口类</span><br><span class="line">class MySpec:</span><br><span class="line">    # hookspec 是一个装饰类中的方法的装饰器，为此方法增额外的属性设置，这里myhook可以理解为定义了3个接口</span><br><span class="line">    @hookspec</span><br><span class="line">    def myhook1(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    @hookspec</span><br><span class="line">    def myhook2(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    @hookspec</span><br><span class="line">    def myhook3(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 定义了一个插件</span><br><span class="line">class Plugin_1:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的和</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook1(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook1()&quot;)</span><br><span class="line">        return arg1 + arg2</span><br><span class="line"></span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook2(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook2()&quot;)</span><br><span class="line">        return arg1 + arg2 +1</span><br><span class="line"></span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook4(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook4()&quot;)</span><br><span class="line">        return arg1 + arg2 + 2</span><br><span class="line"></span><br><span class="line"># 定义第二个插件</span><br><span class="line">class Plugin_2:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook1(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook1()&quot;)</span><br><span class="line">        return arg1 - arg2</span><br><span class="line"></span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook2(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook2()&quot;)</span><br><span class="line">        return arg1 - arg2 -1</span><br><span class="line"></span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook3(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook3()&quot;)</span><br><span class="line">        return arg1 - arg2 -2</span><br><span class="line"></span><br><span class="line"># 实例化一个插件管理的对象，注意这里的名称要与文件开头定义装饰器的时候的名称一致</span><br><span class="line">pm &#x3D; pluggy.PluginManager(&quot;myproject&quot;)</span><br><span class="line"># 将自定义的接口类加到钩子定义中去</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"># 注册定义的两个插件</span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line"># 通过插件管理对象的钩子调用方法，这时候两个插件中的这个方法都会执行，而且遵循后注册先执行即LIFO的原则，两个插件的结果讲义列表的形式返回</span><br><span class="line">results &#x3D; pm.hook.myhook1(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br><span class="line">results &#x3D; pm.hook.myhook2(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br><span class="line">results &#x3D; pm.hook.myhook3(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br><span class="line">results &#x3D; pm.hook.myhook4(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">inside Plugin_2.myhook1()</span><br><span class="line">inside Plugin_1.myhook1()</span><br><span class="line">[-1, 3]</span><br><span class="line">inside Plugin_2.myhook2()</span><br><span class="line">inside Plugin_1.myhook2()</span><br><span class="line">[-2, 4]</span><br><span class="line">inside Plugin_2.myhook3()</span><br><span class="line">[-3]</span><br><span class="line">inside Plugin_1.myhook4()</span><br><span class="line">[5]</span><br></pre></td></tr></table></figure><p>从上面的代码示例可以看出：</p><ul><li>1）myhook1 和 myhook2 因为两个插件都实现了，所有返回两个结果，而且是倒序的</li><li>2）myhook3 因为只有插件2实现了，所以只有一个返回结果</li><li>3）myhook4 在spec中未定义，这里却也有结果，目前理解可能是pluggy的bug，待后续看源码后解释</li></ul><h4 id="5-HookspeckMarker装饰器支持传入一些特定的参数，当传入firstresult-True时，获取第一个plugin执行结果后就停止继续执行"><a href="#5-HookspeckMarker装饰器支持传入一些特定的参数，当传入firstresult-True时，获取第一个plugin执行结果后就停止继续执行" class="headerlink" title="5 HookspeckMarker装饰器支持传入一些特定的参数，当传入firstresult=True时，获取第一个plugin执行结果后就停止继续执行"></a>5 HookspeckMarker装饰器支持传入一些特定的参数，当传入firstresult=True时，获取第一个plugin执行结果后就停止继续执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line"># HookspecMarker 和 HookimplMarker 实质上是一个装饰器带参数的装饰器类，作用是给函数增加额外的属性设置</span><br><span class="line">hookspec &#x3D; pluggy.HookspecMarker(&quot;myproject&quot;)</span><br><span class="line">hookimpl &#x3D; pluggy.HookimplMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line"># 定义自己的Spec，这里可以理解为定义接口类</span><br><span class="line">class MySpec:</span><br><span class="line">    # hookspec 是一个装饰类中的方法的装饰器，为此方法增额外的属性设置，这里myhook可以理解为定义了一个接口</span><br><span class="line">    @hookspec(firstresult&#x3D;True)</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 定义了一个插件</span><br><span class="line">class Plugin_1:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的和</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook()&quot;)</span><br><span class="line">        return arg1 + arg2</span><br><span class="line"></span><br><span class="line"># 定义第二个插件</span><br><span class="line">class Plugin_2:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook()&quot;)</span><br><span class="line">        return arg1 - arg2</span><br><span class="line"></span><br><span class="line"># 实例化一个插件管理的对象，注意这里的名称要与文件开头定义装饰器的时候的名称一致</span><br><span class="line">pm &#x3D; pluggy.PluginManager(&quot;myproject&quot;)</span><br><span class="line"># 将自定义的接口类加到钩子定义中去</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"># 注册定义的两个插件</span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line"># 通过插件管理对象的钩子调用方法，这时候两个插件中的这个方法都会执行，而且遵循后注册先执行即LIFO的原则，两个插件的结果讲义列表的形式返回</span><br><span class="line">results &#x3D; pm.hook.myhook(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inside Plugin_2.myhook()</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><h4 id="6-HookImplMarker装饰器也支持传入一些特定的参数，常用的有tryfirst和trylast以及hookwrapper"><a href="#6-HookImplMarker装饰器也支持传入一些特定的参数，常用的有tryfirst和trylast以及hookwrapper" class="headerlink" title="6 HookImplMarker装饰器也支持传入一些特定的参数，常用的有tryfirst和trylast以及hookwrapper"></a>6 HookImplMarker装饰器也支持传入一些特定的参数，常用的有tryfirst和trylast以及hookwrapper</h4><ul><li>当传入tryfirst=True时，表示这个类的hook函数会优先执行，其他的仍然按照后进先出的顺序执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line"># HookspecMarker 和 HookimplMarker 实质上是一个装饰器带参数的装饰器类，作用是给函数增加额外的属性设置</span><br><span class="line">hookspec &#x3D; pluggy.HookspecMarker(&quot;myproject&quot;)</span><br><span class="line">hookimpl &#x3D; pluggy.HookimplMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line"># 定义自己的Spec，这里可以理解为定义接口类</span><br><span class="line">class MySpec:</span><br><span class="line">    # hookspec 是一个装饰类中的方法的装饰器，为此方法增额外的属性设置，这里myhook可以理解为定义了一个接口</span><br><span class="line">    @hookspec</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 定义了一个插件</span><br><span class="line">class Plugin_1:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的和</span><br><span class="line">    @hookimpl(tryfirst&#x3D;True)</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook()&quot;)</span><br><span class="line">        return arg1 + arg2</span><br><span class="line"></span><br><span class="line"># 定义第二个插件</span><br><span class="line">class Plugin_2:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook()&quot;)</span><br><span class="line">        return arg1 - arg2</span><br><span class="line"></span><br><span class="line"># 定义第三个插件</span><br><span class="line">class Plugin_3:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_3.myhook()&quot;)</span><br><span class="line">        return arg1 - arg2+10</span><br><span class="line"></span><br><span class="line"># 实例化一个插件管理的对象，注意这里的名称要与文件开头定义装饰器的时候的名称一致</span><br><span class="line">pm &#x3D; pluggy.PluginManager(&quot;myproject&quot;)</span><br><span class="line"># 将自定义的接口类加到钩子定义中去</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"># 注册定义的两个插件</span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line">pm.register(Plugin_3())</span><br><span class="line"># 通过插件管理对象的钩子调用方法，这时候两个插件中的这个方法都会执行，而且遵循后注册先执行即LIFO的原则，两个插件的结果讲义列表的形式返回</span><br><span class="line">results &#x3D; pm.hook.myhook(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure>执行结果让如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inside Plugin_1.myhook()</span><br><span class="line">inside Plugin_3.myhook()</span><br><span class="line">inside Plugin_2.myhook()</span><br><span class="line">[3, 9, -1]</span><br></pre></td></tr></table></figure></li><li>当传入trylast=True，表示当前插件的hook函数会尽可能晚的执行，其他的仍然按照后进先出的顺序执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line"># HookspecMarker 和 HookimplMarker 实质上是一个装饰器带参数的装饰器类，作用是给函数增加额外的属性设置</span><br><span class="line">hookspec &#x3D; pluggy.HookspecMarker(&quot;myproject&quot;)</span><br><span class="line">hookimpl &#x3D; pluggy.HookimplMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line"># 定义自己的Spec，这里可以理解为定义接口类</span><br><span class="line">class MySpec:</span><br><span class="line">    # hookspec 是一个装饰类中的方法的装饰器，为此方法增额外的属性设置，这里myhook可以理解为定义了一个接口</span><br><span class="line">    @hookspec</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 定义了一个插件</span><br><span class="line">class Plugin_1:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的和</span><br><span class="line">    @hookimpl()</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook()&quot;)</span><br><span class="line">        return arg1 + arg2</span><br><span class="line"></span><br><span class="line"># 定义第二个插件</span><br><span class="line">class Plugin_2:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl(trylast&#x3D;True)</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook()&quot;)</span><br><span class="line">        return arg1 - arg2</span><br><span class="line"></span><br><span class="line"># 定义第三个插件</span><br><span class="line">class Plugin_3:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_3.myhook()&quot;)</span><br><span class="line">        return arg1 - arg2+10</span><br><span class="line"></span><br><span class="line"># 实例化一个插件管理的对象，注意这里的名称要与文件开头定义装饰器的时候的名称一致</span><br><span class="line">pm &#x3D; pluggy.PluginManager(&quot;myproject&quot;)</span><br><span class="line"># 将自定义的接口类加到钩子定义中去</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"># 注册定义的两个插件</span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line">pm.register(Plugin_3())</span><br><span class="line"># 通过插件管理对象的钩子调用方法，这时候两个插件中的这个方法都会执行，而且遵循后注册先执行即LIFO的原则，两个插件的结果讲义列表的形式返回</span><br><span class="line">results &#x3D; pm.hook.myhook(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inside Plugin_3.myhook()</span><br><span class="line">inside Plugin_1.myhook()</span><br><span class="line">inside Plugin_2.myhook()</span><br><span class="line">[9, 3, -1]</span><br></pre></td></tr></table></figure></li><li>当传入hookwrapper=True时，需要在这个plugin中实现一个yield，plugin先执行yield<br>之前的代码，然后去执行其他的pluggin，然后再回来执行yield之后的代码,同时通过yield可以<br>获取到其他插件执行的结果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import pluggy</span><br><span class="line"></span><br><span class="line"># HookspecMarker 和 HookimplMarker 实质上是一个装饰器带参数的装饰器类，作用是给函数增加额外的属性设置</span><br><span class="line">hookspec &#x3D; pluggy.HookspecMarker(&quot;myproject&quot;)</span><br><span class="line">hookimpl &#x3D; pluggy.HookimplMarker(&quot;myproject&quot;)</span><br><span class="line"></span><br><span class="line"># 定义自己的Spec，这里可以理解为定义接口类</span><br><span class="line">class MySpec:</span><br><span class="line">    # hookspec 是一个装饰类中的方法的装饰器，为此方法增额外的属性设置，这里myhook可以理解为定义了一个接口</span><br><span class="line">    @hookspec</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line"># 定义了一个插件</span><br><span class="line">class Plugin_1:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的和</span><br><span class="line">    @hookimpl()</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_1.myhook()&quot;)</span><br><span class="line">        return arg1 + arg2</span><br><span class="line"></span><br><span class="line"># 定义第二个插件</span><br><span class="line">class Plugin_2:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl(hookwrapper&#x3D;True)</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_2.myhook() before yield...&quot;)</span><br><span class="line">        output&#x3D;yield</span><br><span class="line">        result&#x3D;output.get_result()</span><br><span class="line">        print(result)</span><br><span class="line">        print(&quot;inside Plugin_2.myhook() after yield...&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义第三个插件</span><br><span class="line">class Plugin_3:</span><br><span class="line">    # 插件中实现了上面定义的接口，同样这个实现接口的方法用 hookimpl装饰器装饰，功能是返回两个参数的差</span><br><span class="line">    @hookimpl</span><br><span class="line">    def myhook(self, arg1, arg2):</span><br><span class="line">        print(&quot;inside Plugin_3.myhook()&quot;)</span><br><span class="line">        return arg1 - arg2+10</span><br><span class="line"></span><br><span class="line"># 实例化一个插件管理的对象，注意这里的名称要与文件开头定义装饰器的时候的名称一致</span><br><span class="line">pm &#x3D; pluggy.PluginManager(&quot;myproject&quot;)</span><br><span class="line"># 将自定义的接口类加到钩子定义中去</span><br><span class="line">pm.add_hookspecs(MySpec)</span><br><span class="line"># 注册定义的两个插件</span><br><span class="line">pm.register(Plugin_1())</span><br><span class="line">pm.register(Plugin_2())</span><br><span class="line">pm.register(Plugin_3())</span><br><span class="line"># 通过插件管理对象的钩子调用方法，这时候两个插件中的这个方法都会执行，而且遵循后注册先执行即LIFO的原则，两个插件的结果讲义列表的形式返回</span><br><span class="line">results &#x3D; pm.hook.myhook(arg1&#x3D;1, arg2&#x3D;2)</span><br><span class="line">print(results)</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">inside Plugin_2.myhook() before yield...</span><br><span class="line">inside Plugin_3.myhook()</span><br><span class="line">inside Plugin_1.myhook()</span><br><span class="line">[9, 3]</span><br><span class="line">inside Plugin_2.myhook() after yield...</span><br><span class="line">[9, 3]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式python系列(2)--装饰器模式</title>
      <link href="/blog/2020/09/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fpython%E7%B3%BB%E5%88%97(2)--%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2020/09/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fpython%E7%B3%BB%E5%88%97(2)--%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是面向切面编程（AOP）？"><a href="#1-什么是面向切面编程（AOP）？" class="headerlink" title="1 什么是面向切面编程（AOP）？"></a>1 什么是面向切面编程（AOP）？</h4><ul><li>AOP是Aspect Oriented Programming的缩写，即面向切面编程</li><li>面向切面编程，通俗一点说，就是在原有的业务处理流程中切开一刀，然后加入一点额外的功能，原有的整个业务流程不受任何影响</li><li>面向切面编程，说白了就是给原有的功能做功能增强，但是对原有的代码逻辑不做任何处理</li></ul><h4 id="2-装饰器的作用"><a href="#2-装饰器的作用" class="headerlink" title="2 装饰器的作用"></a>2 装饰器的作用</h4><p>在<a href="https://redrose2100.github.io/blog/2020/08/31/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(4)--%E8%A3%85%E9%A5%B0%E5%99%A8/" target="_blank" rel="noopener">python高级语法系列(4)–装饰器</a> 一篇中已经对装饰器的使用情况做了非常详细的介绍，这里简单总结一下装饰器的具体作用：</p><p>总的来说装饰器就是利用了AOP面向切面编程的思想，在既有的功能的某个切面上做功能加强</p><p>具体展开来说就在如下三个层面做功能加强：</p><ul><li>函数执行前后</li><li>类初始化前后</li><li>类中的方法执行前后</li></ul><h4 id="3-装饰器模式"><a href="#3-装饰器模式" class="headerlink" title="3 装饰器模式"></a>3 装饰器模式</h4><p>装饰器模式在python领域说白了就是装饰器的灵活应用，比如对一个主题功能做一些辅助功能的扩展，即很适合使用装饰器模式做功能加强</p><p>下面是python中支持的装饰器的使用场景，同样，装饰器模式就完全可以根据这些使用场景对既有的功能做功能加强</p><ul><li>装饰器是函数，<ul><li>被装饰对象也是函数<ul><li>装饰器无参数，被装饰对象无参数</li><li>装饰器无参数，被装饰对象有参数</li><li>装饰器有参数，被装饰对象无参数</li><li>装饰器有参数，被装饰器对象有参数</li></ul></li><li>被装饰对象是类<ul><li>装饰器无参数，被装饰类无参数</li><li>装饰器无参数，被装饰类有参数</li><li>装饰器有参数，被装饰类无参数</li><li>装饰器有参数，被装饰类有参数</li></ul></li><li>被装饰对象是类中的方法<ul><li>装饰器无参数，被装饰类中的方法无参数</li><li>装饰器无参数，被装饰类中的方法有参数</li><li>装饰器有参数，被装饰类中的方法无参数</li><li>装饰器有参数，被装饰类中的方法有参数</li></ul></li></ul></li><li>装饰器是类<ul><li>被装饰对象也是函数<ul><li>装饰器无参数，被装饰对象无参数</li><li>装饰器无参数，被装饰对象有参数</li><li>装饰器有参数，被装饰对象无参数</li><li>装饰器有参数，被装饰器对象有参数</li></ul></li><li>被装饰器对象是类<ul><li>装饰器无参数，被装饰类无参数</li><li>装饰器无参数，被装饰类有参数</li><li>装饰器有参数，被装饰类无参数</li><li>装饰器有参数，被装饰类有参数</li></ul></li><li>被装饰对象是类中的方法<ul><li>装饰器无参数，被装饰类中的方法无参数</li><li>装饰器无参数，被装饰类中的方法有参数</li><li>装饰器有参数，被装饰类中的方法无参数</li><li>装饰器有参数，被装饰类中的方法有参数</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式python系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式python系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(4)--装饰器</title>
      <link href="/blog/2020/08/31/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(4)--%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/blog/2020/08/31/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(4)--%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="根据装饰器和被装饰对象的不同类型，装饰器的使用场景主要有以下情况"><a href="#根据装饰器和被装饰对象的不同类型，装饰器的使用场景主要有以下情况" class="headerlink" title="根据装饰器和被装饰对象的不同类型，装饰器的使用场景主要有以下情况"></a>根据装饰器和被装饰对象的不同类型，装饰器的使用场景主要有以下情况</h4><ul><li>装饰器是函数，<ul><li>被装饰对象也是函数<ul><li>装饰器无参数，被装饰对象无参数</li><li>装饰器无参数，被装饰对象有参数</li><li>装饰器有参数，被装饰对象无参数</li><li>装饰器有参数，被装饰器对象有参数</li></ul></li><li>被装饰对象是类<ul><li>装饰器无参数，被装饰类无参数</li><li>装饰器无参数，被装饰类有参数</li><li>装饰器有参数，被装饰类无参数</li><li>装饰器有参数，被装饰类有参数</li></ul></li><li>被装饰对象是类中的方法<ul><li>装饰器无参数，被装饰类中的方法无参数</li><li>装饰器无参数，被装饰类中的方法有参数</li><li>装饰器有参数，被装饰类中的方法无参数</li><li>装饰器有参数，被装饰类中的方法有参数</li></ul></li></ul></li><li>装饰器是类<ul><li>被装饰对象也是函数<ul><li>装饰器无参数，被装饰对象无参数</li><li>装饰器无参数，被装饰对象有参数</li><li>装饰器有参数，被装饰对象无参数</li><li>装饰器有参数，被装饰器对象有参数</li></ul></li><li>被装饰器对象是类<ul><li>装饰器无参数，被装饰类无参数</li><li>装饰器无参数，被装饰类有参数</li><li>装饰器有参数，被装饰类无参数</li><li>装饰器有参数，被装饰类有参数</li></ul></li><li>被装饰对象是类中的方法<ul><li>装饰器无参数，被装饰类中的方法无参数</li><li>装饰器无参数，被装饰类中的方法有参数</li><li>装饰器有参数，被装饰类中的方法无参数</li><li>装饰器有参数，被装饰类中的方法有参数</li></ul></li></ul></li></ul><h4 id="实例演示不同场景下的装饰器"><a href="#实例演示不同场景下的装饰器" class="headerlink" title="实例演示不同场景下的装饰器"></a>实例演示不同场景下的装饰器</h4><ul><li>装饰器是函数，<ul><li>被装饰对象也是函数<br> 装饰器是函数，被装饰对象是函数时，此时装饰器的作用是给被装饰对象的函数做功能增强功能，思想是面向切面编程思想，即在被装饰对象的函数的之前和之后做一些额外处理，而不破坏被装饰函数原有的功能实现，主要有以下几种情况：<ul><li>装饰器无参数，被装饰对象无参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def decorator(func):</span><br><span class="line">    def _decorator():</span><br><span class="line">        print(&quot;before func......&quot;)</span><br><span class="line">        func()</span><br><span class="line">        print(&quot;after func......&quot;)</span><br><span class="line">    return _decorator</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;in func()......&quot;)</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure>执行结果为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before func......</span><br><span class="line">in func()......</span><br><span class="line">after func......</span><br></pre></td></tr></table></figure></li><li>装饰器无参数，被装饰对象有参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def decorator(func):</span><br><span class="line">    def _decorator(*args,**kwargs):</span><br><span class="line">        print(&quot;before &#123;name&#125;......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">        func(*args,**kwargs)</span><br><span class="line">        print(&quot;after &#123;name&#125;......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">    return _decorator</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;in func1()......&quot;)</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">def func2(a,b):</span><br><span class="line">    print(&quot;in func2()......&quot;)</span><br><span class="line">    print(&quot;a&#x3D;&#123;a&#125;,b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;a,b&#x3D;b))</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">def func3(a,b,c&#x3D;10):</span><br><span class="line">    print(&quot;in func3()......&quot;)</span><br><span class="line">    print(&quot;a&#x3D;&#123;a&#125;,b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;a, b&#x3D;b))</span><br><span class="line">    print(&quot;c&#x3D;&#123;c&#125;&quot;.format(c&#x3D;c))</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line">func2(1,2)</span><br><span class="line">func3(1,2,c&#x3D;100)</span><br></pre></td></tr></table></figure>运行结果为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">before func1......</span><br><span class="line">in func1()......</span><br><span class="line">after func1......</span><br><span class="line">before func2......</span><br><span class="line">in func2()......</span><br><span class="line">a&#x3D;1,b&#x3D;2</span><br><span class="line">after func2......</span><br><span class="line">before func3......</span><br><span class="line">in func3()......</span><br><span class="line">a&#x3D;1,b&#x3D;2</span><br><span class="line">c&#x3D;100</span><br><span class="line">after func3......</span><br></pre></td></tr></table></figure></li><li>装饰器有参数，被装饰对象无参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def wrapper(name):</span><br><span class="line">    def decorator(func):</span><br><span class="line">        def _decorator():</span><br><span class="line">            print(&quot;before &#123;name&#125; ,decorator param is &#123;param&#125;&quot;.format(name&#x3D;func.__name__,param&#x3D;name))</span><br><span class="line">            print(&quot;before &#123;name&#125;......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">            func()</span><br><span class="line">            print(&quot;after &#123;name&#125;......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">        return _decorator</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line">@wrapper(name&#x3D;&quot;hello world&quot;)</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;in func1()......&quot;)</span><br><span class="line"></span><br><span class="line">func1()</span><br></pre></td></tr></table></figure>运行结果为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before func1 ,decorator param is hello world</span><br><span class="line">before func1......</span><br><span class="line">in func1()......</span><br><span class="line">after func1......</span><br></pre></td></tr></table></figure></li><li>装饰器有参数，被装饰器对象有参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">def wrapper(name):</span><br><span class="line">    def decorator(func):</span><br><span class="line">        def _decorator(*args,**kwargs):</span><br><span class="line">            print(&quot;before &#123;name&#125; ,decorator param is &#123;param&#125;&quot;.format(name&#x3D;func.__name__,param&#x3D;name))</span><br><span class="line">            print(&quot;before &#123;name&#125;......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">            func(*args,**kwargs)</span><br><span class="line">            print(&quot;after &#123;name&#125;......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">        return _decorator</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line">@wrapper(name&#x3D;&quot;hello world&quot;)</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;in func1()......&quot;)</span><br><span class="line"></span><br><span class="line">@wrapper(name&#x3D;&quot;hello world&quot;)</span><br><span class="line">def func2(a, b):</span><br><span class="line">    print(&quot;in func2()......&quot;)</span><br><span class="line">    print(&quot;a&#x3D;&#123;a&#125;,b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;a, b&#x3D;b))</span><br><span class="line"></span><br><span class="line">@wrapper(name&#x3D;&quot;hello world&quot;)</span><br><span class="line">def func3(a, b, c&#x3D;10):</span><br><span class="line">    print(&quot;in func3()......&quot;)</span><br><span class="line">    print(&quot;a&#x3D;&#123;a&#125;,b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;a, b&#x3D;b))</span><br><span class="line">    print(&quot;c&#x3D;&#123;c&#125;&quot;.format(c&#x3D;c))</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line">func2(1,2)</span><br><span class="line">func3(1,2,c&#x3D;100)</span><br></pre></td></tr></table></figure>运行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">before func1 ,decorator param is hello world</span><br><span class="line">before func1......</span><br><span class="line">in func1()......</span><br><span class="line">after func1......</span><br><span class="line">before func2 ,decorator param is hello world</span><br><span class="line">before func2......</span><br><span class="line">in func2()......</span><br><span class="line">a&#x3D;1,b&#x3D;2</span><br><span class="line">after func2......</span><br><span class="line">before func3 ,decorator param is hello world</span><br><span class="line">before func3......</span><br><span class="line">in func3()......</span><br><span class="line">a&#x3D;1,b&#x3D;2</span><br><span class="line">c&#x3D;100</span><br><span class="line">after func3......</span><br></pre></td></tr></table></figure></li></ul></li><li>被装饰器对象是类<br> 被装饰器对象为类时，装饰器的作用是类在初始化的时候做功能增强，即可以在类初始化之前或者之后做一些功能增强，所以下面所说的被装饰对象有无参数是针对类的初始化函数<strong>init</strong>有无参数而言的，主要有以下几种情况：<ul><li>装饰器无参数，被装饰类无参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def decorator(cls):</span><br><span class="line">    def _decorator():</span><br><span class="line">        print(&quot;before class &#123;name&#125; init......&quot;.format(name&#x3D;cls.__name__))</span><br><span class="line">        obj&#x3D;cls()</span><br><span class="line">        print(&quot;after class &#123;name&#125; init......&quot;.format(name&#x3D;cls.__name__))</span><br><span class="line">        return obj</span><br><span class="line">    return _decorator</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">class Test(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;in class &#123;name&#125; init function......&quot;.format(name&#x3D;Test.__name__))</span><br><span class="line"></span><br><span class="line">    def func(self):</span><br><span class="line">        print(&quot;in class &#123;name&#125; func()&quot;.format(name&#x3D;Test.__name__))</span><br><span class="line"></span><br><span class="line">test&#x3D;Test()</span><br><span class="line"></span><br><span class="line">test.func()</span><br></pre></td></tr></table></figure>运行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before class Test init......</span><br><span class="line">in class _decorator init function......</span><br><span class="line">after class Test init......</span><br><span class="line">in class _decorator func()</span><br></pre></td></tr></table></figure></li><li>装饰器无参数，被装饰类有参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def decorator(cls):</span><br><span class="line">    def _decorator(*args,**kwargs):</span><br><span class="line">        print(&quot;before class &#123;name&#125; init......&quot;.format(name&#x3D;cls.__name__))</span><br><span class="line">        obj&#x3D;cls(*args,**kwargs)</span><br><span class="line">        print(&quot;after class &#123;name&#125; init......&quot;.format(name&#x3D;cls.__name__))</span><br><span class="line">        return obj</span><br><span class="line">    return _decorator</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">class Test(object):</span><br><span class="line">    def __init__(self,a,b&#x3D;10):</span><br><span class="line">        print(&quot;in class &#123;name&#125; init function......&quot;.format(name&#x3D;Test.__name__))</span><br><span class="line">        print(&quot;a&#x3D;&#123;a&#125;,b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;a,b&#x3D;b))</span><br><span class="line"></span><br><span class="line">    def func(self):</span><br><span class="line">        print(&quot;in class &#123;name&#125; func()&quot;.format(name&#x3D;Test.__name__))</span><br><span class="line"></span><br><span class="line">test&#x3D;Test(2,20)</span><br><span class="line"></span><br><span class="line">test.func()</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before class Test init......</span><br><span class="line">in class _decorator init function......</span><br><span class="line">a&#x3D;2,b&#x3D;20</span><br><span class="line">after class Test init......</span><br><span class="line">in class _decorator func()</span><br></pre></td></tr></table></figure></li><li>装饰器有参数，被装饰类无参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def wrapper(name&#x3D;&quot;hello world&quot;):</span><br><span class="line">    def decorator(cls):</span><br><span class="line">        def _decorator():</span><br><span class="line">            print(&quot;before class &#123;name&#125; init......&quot;.format(name&#x3D;cls.__name__))</span><br><span class="line">            obj&#x3D;cls()</span><br><span class="line">            print(&quot;after class &#123;name&#125; init......&quot;.format(name&#x3D;cls.__name__))</span><br><span class="line">            return obj</span><br><span class="line">        return _decorator</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line">@wrapper(&quot;hello world&quot;)</span><br><span class="line">class Test(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;in class &#123;name&#125; init function......&quot;.format(name&#x3D;Test.__name__))</span><br><span class="line"></span><br><span class="line">    def func(self):</span><br><span class="line">        print(&quot;in class &#123;name&#125; func()&quot;.format(name&#x3D;Test.__name__))</span><br><span class="line"></span><br><span class="line">test&#x3D;Test()</span><br><span class="line"></span><br><span class="line">test.func()</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before class Test init......</span><br><span class="line">in class _decorator init function......</span><br><span class="line">after class Test init......</span><br><span class="line">in class _decorator func()</span><br></pre></td></tr></table></figure></li><li>装饰器有参数，被装饰类有参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">def wrapper(name&#x3D;&quot;hello world&quot;):</span><br><span class="line">    def decorator(cls):</span><br><span class="line">        def _decorator(*args,**kwargs):</span><br><span class="line">            print(&quot;before class &#123;name&#125; init......&quot;.format(name&#x3D;cls.__name__))</span><br><span class="line">            obj&#x3D;cls(*args,**kwargs)</span><br><span class="line">            print(&quot;after class &#123;name&#125; init......&quot;.format(name&#x3D;cls.__name__))</span><br><span class="line">            return obj</span><br><span class="line">        return _decorator</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line">@wrapper(&quot;hello world&quot;)</span><br><span class="line">class Test(object):</span><br><span class="line">    def __init__(self,a,b&#x3D;10):</span><br><span class="line">        print(&quot;in class &#123;name&#125; init function......&quot;.format(name&#x3D;Test.__name__))</span><br><span class="line">        print(&quot;a&#x3D; &#123;a&#125; b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;a,b&#x3D;b))</span><br><span class="line"></span><br><span class="line">    def func(self):</span><br><span class="line">        print(&quot;in class &#123;name&#125; func()&quot;.format(name&#x3D;Test.__name__))</span><br><span class="line"></span><br><span class="line">test&#x3D;Test(2,b&#x3D;20)</span><br><span class="line"></span><br><span class="line">test.func()</span><br></pre></td></tr></table></figure>运行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before class Test init......</span><br><span class="line">in class _decorator init function......</span><br><span class="line">a&#x3D; 2 b&#x3D;20</span><br><span class="line">after class Test init......</span><br><span class="line">in class _decorator func()</span><br></pre></td></tr></table></figure></li></ul></li><li>被装饰对象是类中的方法<ul><li>装饰器无参数，被装饰类中的方法无参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def decorator(func):</span><br><span class="line">    def _decorator(self):</span><br><span class="line">        print(&quot;before class &#123;name&#125; init......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">        obj&#x3D;func(self)</span><br><span class="line">        print(&quot;after class &#123;name&#125; init......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">        return obj</span><br><span class="line">    return _decorator</span><br><span class="line"></span><br><span class="line">class Test(object):</span><br><span class="line">    def __init__(self,a&#x3D;1,b&#x3D;10):</span><br><span class="line">        self.a&#x3D;a</span><br><span class="line">        self.b&#x3D;b</span><br><span class="line">    @decorator</span><br><span class="line">    def func(self):</span><br><span class="line">        print(&quot;in class &#123;name&#125; func()&quot;.format(name&#x3D;Test.__name__))</span><br><span class="line">        print(&quot;a&#x3D;&#123;a&#125; b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;self.a,b&#x3D;self.b))</span><br><span class="line"></span><br><span class="line">test&#x3D;Test()</span><br><span class="line"></span><br><span class="line">test.func()</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before class func init......</span><br><span class="line">in class Test func()</span><br><span class="line">a&#x3D;1 b&#x3D;10</span><br><span class="line">after class func init......</span><br></pre></td></tr></table></figure></li><li>装饰器无参数，被装饰类中的方法有参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def decorator(func):</span><br><span class="line">    def _decorator(self,*args,**kwargs):</span><br><span class="line">        print(&quot;before class &#123;name&#125; init......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">        obj&#x3D;func(self,*args,**kwargs)</span><br><span class="line">        print(&quot;after class &#123;name&#125; init......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">        return obj</span><br><span class="line">    return _decorator</span><br><span class="line"></span><br><span class="line">class Test(object):</span><br><span class="line">    def __init__(self,a&#x3D;1,b&#x3D;10):</span><br><span class="line">        self.a&#x3D;a</span><br><span class="line">        self.b&#x3D;b</span><br><span class="line">    @decorator</span><br><span class="line">    def func(self,c,d&#x3D;20):</span><br><span class="line">        print(&quot;in class &#123;name&#125; func()&quot;.format(name&#x3D;Test.__name__))</span><br><span class="line">        print(&quot;a&#x3D;&#123;a&#125; b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;self.a,b&#x3D;self.b))</span><br><span class="line">        print(&quot;c&#x3D;&#123;c&#125; d&#x3D;&#123;d&#125;&quot;.format(c&#x3D;c,d&#x3D;d))</span><br><span class="line"></span><br><span class="line">test&#x3D;Test()</span><br><span class="line"></span><br><span class="line">test.func(2,d&#x3D;20)</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before class func init......</span><br><span class="line">in class Test func()</span><br><span class="line">a&#x3D;1 b&#x3D;10</span><br><span class="line">c&#x3D;2 d&#x3D;20</span><br><span class="line">after class func init......</span><br></pre></td></tr></table></figure></li><li>装饰器有参数，被装饰类中的方法无参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def wrapper(name&#x3D;&quot;hello world&quot;):</span><br><span class="line">    def decorator(func):</span><br><span class="line">        def _decorator(self):</span><br><span class="line">            print(&quot;before class &#123;name&#125; init......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">            print(&quot;name &#x3D; &#123;name&#125;&quot;.format(name&#x3D;name))</span><br><span class="line">            obj&#x3D;func(self)</span><br><span class="line">            print(&quot;after class &#123;name&#125; init......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">            return obj</span><br><span class="line">        return _decorator</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line">class Test(object):</span><br><span class="line">    def __init__(self,a&#x3D;1,b&#x3D;10):</span><br><span class="line">        self.a&#x3D;a</span><br><span class="line">        self.b&#x3D;b</span><br><span class="line">    @wrapper(name&#x3D;&quot;Test.func&quot;)</span><br><span class="line">    def func(self):</span><br><span class="line">        print(&quot;in class &#123;name&#125; func()&quot;.format(name&#x3D;Test.__name__))</span><br><span class="line">        print(&quot;a&#x3D;&#123;a&#125; b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;self.a,b&#x3D;self.b))</span><br><span class="line"></span><br><span class="line">test&#x3D;Test()</span><br><span class="line"></span><br><span class="line">test.func()</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before class func init......</span><br><span class="line">name &#x3D; Test.func</span><br><span class="line">in class Test func()</span><br><span class="line">a&#x3D;1 b&#x3D;10</span><br><span class="line">after class func init......</span><br></pre></td></tr></table></figure></li><li>装饰器有参数，被装饰类中的方法有参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">def wrapper(name&#x3D;&quot;hello world&quot;):</span><br><span class="line">    def decorator(func):</span><br><span class="line">        def _decorator(self,*args,**kwargs):</span><br><span class="line">            print(&quot;before class &#123;name&#125; init......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">            print(&quot;name &#x3D; &#123;name&#125;&quot;.format(name&#x3D;name))</span><br><span class="line">            obj&#x3D;func(self,*args,**kwargs)</span><br><span class="line">            print(&quot;after class &#123;name&#125; init......&quot;.format(name&#x3D;func.__name__))</span><br><span class="line">            return obj</span><br><span class="line">        return _decorator</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line">class Test(object):</span><br><span class="line">    def __init__(self,a&#x3D;1,b&#x3D;10):</span><br><span class="line">        self.a&#x3D;a</span><br><span class="line">        self.b&#x3D;b</span><br><span class="line">    @wrapper(name&#x3D;&quot;Test.func&quot;)</span><br><span class="line">    def func(self,c,d&#x3D;20):</span><br><span class="line">        print(&quot;in class &#123;name&#125; func()&quot;.format(name&#x3D;Test.__name__))</span><br><span class="line">        print(&quot;a&#x3D;&#123;a&#125; b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;self.a,b&#x3D;self.b))</span><br><span class="line">        print(&quot;c&#x3D;&#123;c&#125; d&#x3D;&#123;d&#125;&quot;.format(c&#x3D;c,d&#x3D;d))</span><br><span class="line"></span><br><span class="line">test&#x3D;Test()</span><br><span class="line"></span><br><span class="line">test.func(2,d&#x3D;20)</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">before class func init......</span><br><span class="line">name &#x3D; Test.func</span><br><span class="line">in class Test func()</span><br><span class="line">a&#x3D;1 b&#x3D;10</span><br><span class="line">c&#x3D;2 d&#x3D;20</span><br><span class="line">after class func init......</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>装饰器是类<ul><li>被装饰对象是函数<br>装饰器是类，被装饰对象是函数的时候，是通过装饰器类初始化的时候将被装饰对象函数传递给装饰器类，然后通过自动调用装饰器类中的<strong>call</strong>函数实现对被装饰对象的前后处理，即在这种情况下，只需要在<strong>call</strong>函数中编写在调用被装饰对象前后进行操作的代码即可<ul><li>装饰器无参数，被装饰对象无参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self,func):</span><br><span class="line">        self.func&#x3D;func</span><br><span class="line"></span><br><span class="line">    def __call__(self):</span><br><span class="line">        print(&quot;before func &#123;func&#125;()...&quot;.format(func&#x3D;self.func.__name__))</span><br><span class="line">        result&#x3D;self.func()</span><br><span class="line">        print(&quot;after func &#123;func&#125;()...&quot;.format(func&#x3D;self.func.__name__))</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;in func func()...&quot;)</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">before func func()...</span><br><span class="line">in func func()...</span><br><span class="line">after func func()...</span><br></pre></td></tr></table></figure></li><li>装饰器无参数，被装饰对象有参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self,func):</span><br><span class="line">        self.func&#x3D;func</span><br><span class="line"></span><br><span class="line">    def __call__(self,*args,**kwargs):</span><br><span class="line">        print(&quot;before func &#123;func&#125;()...&quot;.format(func&#x3D;self.func.__name__))</span><br><span class="line">        result&#x3D;self.func(*args,**kwargs)</span><br><span class="line">        print(&quot;after func &#123;func&#125;()...&quot;.format(func&#x3D;self.func.__name__))</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">def func(a,b&#x3D;10):</span><br><span class="line">    print(&quot;in func func()...&quot;)</span><br><span class="line">    print(&quot;a&#x3D; &#123;a&#125; b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;a,b&#x3D;b))</span><br><span class="line"></span><br><span class="line">func(2,b&#x3D;20)</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before func func()...</span><br><span class="line">in func func()...</span><br><span class="line">a&#x3D; 2 b&#x3D;20</span><br><span class="line">after func func()...</span><br></pre></td></tr></table></figure></li><li>装饰器有参数，被装饰对象无参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self,name&#x3D;&quot;hello world&quot;):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def __call__(self,func):</span><br><span class="line">        def wrapper():</span><br><span class="line">            print(&quot;before func &#123;func&#125;()...&quot;.format(func&#x3D;func.__name__))</span><br><span class="line">            print(&quot;name&#x3D; &#123;name&#125;&quot;.format(name&#x3D;self.name))</span><br><span class="line">            result&#x3D;func()</span><br><span class="line">            print(&quot;after func &#123;func&#125;()...&quot;.format(func&#x3D;func.__name__))</span><br><span class="line">            return result</span><br><span class="line">        return wrapper</span><br><span class="line"></span><br><span class="line">@decorator()</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;in func func2()...&quot;)</span><br><span class="line"></span><br><span class="line">@decorator(&quot;func2_decorator&quot;)</span><br><span class="line">def func2():</span><br><span class="line">    print(&quot;in func func2()...&quot;)</span><br><span class="line"></span><br><span class="line">@decorator(name&#x3D;&quot;func3_decorator&quot;)</span><br><span class="line">def func3():</span><br><span class="line">    print(&quot;in func func3()...&quot;)</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line"></span><br><span class="line">func2()</span><br><span class="line"></span><br><span class="line">func3()</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">before func func1()...</span><br><span class="line">name&#x3D; hello world</span><br><span class="line">in func func2()...</span><br><span class="line">after func func1()...</span><br><span class="line">before func func2()...</span><br><span class="line">name&#x3D; func2_decorator</span><br><span class="line">in func func2()...</span><br><span class="line">after func func2()...</span><br><span class="line">before func func3()...</span><br><span class="line">name&#x3D; func3_decorator</span><br><span class="line">in func func3()...</span><br><span class="line">after func func3()...</span><br></pre></td></tr></table></figure></li><li>装饰器有参数，被装饰器对象有参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self,name&#x3D;&quot;hello world&quot;):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def __call__(self,func):</span><br><span class="line">        def wrapper(*args,**kwargs):</span><br><span class="line">            print(&quot;before func &#123;func&#125;()...&quot;.format(func&#x3D;func.__name__))</span><br><span class="line">            print(&quot;name&#x3D; &#123;name&#125;&quot;.format(name&#x3D;self.name))</span><br><span class="line">            result&#x3D;func(*args,**kwargs)</span><br><span class="line">            print(&quot;after func &#123;func&#125;()...&quot;.format(func&#x3D;func.__name__))</span><br><span class="line">            return result</span><br><span class="line">        return wrapper</span><br><span class="line"></span><br><span class="line">@decorator()</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;in func func2()...&quot;)</span><br><span class="line"></span><br><span class="line">@decorator(&quot;func2_decorator&quot;)</span><br><span class="line">def func2(a):</span><br><span class="line">    print(&quot;in func func2()...&quot;)</span><br><span class="line">    print(&quot;a&#x3D;&#123;a&#125;&quot;.format(a&#x3D;a))</span><br><span class="line"></span><br><span class="line">@decorator(name&#x3D;&quot;func3_decorator&quot;)</span><br><span class="line">def func3(a,b&#x3D;10):</span><br><span class="line">    print(&quot;in func func3()...&quot;)</span><br><span class="line">    print(&quot;a&#x3D;&#123;a&#125;, b&#x3D; &#123;b&#125;&quot;.format(a&#x3D;a,b&#x3D;b))</span><br><span class="line"></span><br><span class="line">func1()</span><br><span class="line"></span><br><span class="line">func2(10)</span><br><span class="line"></span><br><span class="line">func3(2,b&#x3D;20)</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">before func func1()...</span><br><span class="line">name&#x3D; hello world</span><br><span class="line">in func func2()...</span><br><span class="line">after func func1()...</span><br><span class="line">before func func2()...</span><br><span class="line">name&#x3D; func2_decorator</span><br><span class="line">in func func2()...</span><br><span class="line">a&#x3D;10</span><br><span class="line">after func func2()...</span><br><span class="line">before func func3()...</span><br><span class="line">name&#x3D; func3_decorator</span><br><span class="line">in func func3()...</span><br><span class="line">a&#x3D;2, b&#x3D; 20</span><br><span class="line">after func func3()...</span><br></pre></td></tr></table></figure></li></ul></li><li>被装饰器对象是类<ul><li>装饰器无参数，被装饰类无参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self,cls):</span><br><span class="line">        self.cls&#x3D;cls</span><br><span class="line"></span><br><span class="line">    def __call__(self):</span><br><span class="line">        print(&quot;before init clsss &#123;cls&#125;...&quot;.format(cls&#x3D;self.cls.__name__))</span><br><span class="line">        obj&#x3D;self.cls()</span><br><span class="line">        print(&quot;after init class &#123;cls&#125;...&quot;.format(cls&#x3D;self.cls.__name__))</span><br><span class="line">        return obj</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">class Test():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;in Test class __init__ func...&quot;)</span><br><span class="line"></span><br><span class="line">    def test(self):</span><br><span class="line">        print(&quot;in Test class test func...&quot;)</span><br><span class="line"></span><br><span class="line">t&#x3D;Test()</span><br><span class="line">t.test()</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before init clsss Test...</span><br><span class="line">in Test class __init__ func...</span><br><span class="line">after init class Test...</span><br><span class="line">in Test class test func...</span><br></pre></td></tr></table></figure></li><li>装饰器无参数，被装饰类有参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self,cls):</span><br><span class="line">        self.cls&#x3D;cls</span><br><span class="line"></span><br><span class="line">    def __call__(self,*args,**kwargs):</span><br><span class="line">        print(&quot;before init clsss &#123;cls&#125;...&quot;.format(cls&#x3D;self.cls.__name__))</span><br><span class="line">        obj&#x3D;self.cls(*args,**kwargs)</span><br><span class="line">        print(&quot;after init class &#123;cls&#125;...&quot;.format(cls&#x3D;self.cls.__name__))</span><br><span class="line">        return obj</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line">class Test():</span><br><span class="line">    def __init__(self,a,b&#x3D;10):</span><br><span class="line">        print(&quot;in Test class __init__ func...&quot;)</span><br><span class="line">        print(&quot;a&#x3D;&#123;a&#125; b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;a,b&#x3D;b))</span><br><span class="line"></span><br><span class="line">    def test(self):</span><br><span class="line">        print(&quot;in Test class test func...&quot;)</span><br><span class="line"></span><br><span class="line">t&#x3D;Test(2,b&#x3D;20)</span><br><span class="line">t.test()</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before init clsss Test...</span><br><span class="line">in Test class __init__ func...</span><br><span class="line">a&#x3D;2 b&#x3D;20</span><br><span class="line">after init class Test...</span><br><span class="line">in Test class test func...</span><br></pre></td></tr></table></figure></li><li>装饰器有参数，被装饰类无参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self,name&#x3D;&quot;hello world&quot;):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def __call__(self,cls):</span><br><span class="line">        def wrapper():</span><br><span class="line">            print(&quot;before init class &#123;cls&#125;....&quot;.format(cls&#x3D;cls.__name__))</span><br><span class="line">            obj&#x3D;cls()</span><br><span class="line">            print(&quot;after init class &#123;cls&#125;...&quot;.format(cls&#x3D;cls.__name__))</span><br><span class="line">            return obj</span><br><span class="line">        return wrapper</span><br><span class="line"></span><br><span class="line">@decorator(name&#x3D;&quot;Test Class&quot;)</span><br><span class="line">class Test():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;in Test class __init__ func...&quot;)</span><br><span class="line"></span><br><span class="line">    def test(self):</span><br><span class="line">        print(&quot;in Test class test func...&quot;)</span><br><span class="line"></span><br><span class="line">t&#x3D;Test()</span><br><span class="line">t.test()</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before init class Test....</span><br><span class="line">in Test class __init__ func...</span><br><span class="line">after init class Test...</span><br><span class="line">in Test class test func...</span><br></pre></td></tr></table></figure></li><li>装饰器有参数，被装饰类有参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self,name&#x3D;&quot;hello world&quot;):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def __call__(self,cls):</span><br><span class="line">        def wrapper(*args,**kwargs):</span><br><span class="line">            print(&quot;before init class &#123;cls&#125;....&quot;.format(cls&#x3D;cls.__name__))</span><br><span class="line">            obj&#x3D;cls(*args,**kwargs)</span><br><span class="line">            print(&quot;after init class &#123;cls&#125;...&quot;.format(cls&#x3D;cls.__name__))</span><br><span class="line">            return obj</span><br><span class="line">        return wrapper</span><br><span class="line"></span><br><span class="line">@decorator(name&#x3D;&quot;Test Class&quot;)</span><br><span class="line">class Test():</span><br><span class="line">    def __init__(self,a,b&#x3D;10):</span><br><span class="line">        print(&quot;in Test class __init__ func...&quot;)</span><br><span class="line">        print(&quot;a&#x3D;&#123;a&#125;, b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;a,b&#x3D;b))</span><br><span class="line"></span><br><span class="line">    def test(self):</span><br><span class="line">        print(&quot;in Test class test func...&quot;)</span><br><span class="line"></span><br><span class="line">t&#x3D;Test(2,b&#x3D;20)</span><br><span class="line">t.test()</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">before init class Test....</span><br><span class="line">in Test class __init__ func...</span><br><span class="line">a&#x3D;2, b&#x3D;20</span><br><span class="line">after init class Test...</span><br><span class="line">in Test class test func...</span><br></pre></td></tr></table></figure></li></ul></li><li>被装饰对象是类中的方法<ul><li>装饰器无参数，被装饰类中的方法无参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self,func):</span><br><span class="line">        self.func&#x3D;func</span><br><span class="line"></span><br><span class="line">    def __call__(self):</span><br><span class="line">        print(&quot;before func &#123;func&#125;...&quot;.format(func&#x3D;self.func.__name__))</span><br><span class="line">        results&#x3D;self.func(self)</span><br><span class="line">        print(&quot;after func &#123;func&#125;...&quot;.format(func&#x3D;self.func.__name__))</span><br><span class="line">        return results</span><br><span class="line"></span><br><span class="line">class Test():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;in Test class __init__ func...&quot;)</span><br><span class="line"></span><br><span class="line">    @decorator</span><br><span class="line">    def test(self):</span><br><span class="line">        print(&quot;in Test class test func...&quot;)</span><br><span class="line"></span><br><span class="line">t&#x3D;Test()</span><br><span class="line">t.test()</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">in Test class __init__ func...</span><br><span class="line">before func test...</span><br><span class="line">in Test class test func...</span><br><span class="line">after func test...</span><br></pre></td></tr></table></figure></li><li>装饰器无参数，被装饰类中的方法有参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self,func):</span><br><span class="line">        self.func&#x3D;func</span><br><span class="line"></span><br><span class="line">    def __call__(self,*args,**kwargs):</span><br><span class="line">        print(&quot;before func &#123;func&#125;...&quot;.format(func&#x3D;self.func.__name__))</span><br><span class="line">        results&#x3D;self.func(self,*args,**kwargs)</span><br><span class="line">        print(&quot;after func &#123;func&#125;...&quot;.format(func&#x3D;self.func.__name__))</span><br><span class="line">        return results</span><br><span class="line"></span><br><span class="line">class Test():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;in Test class __init__ func...&quot;)</span><br><span class="line"></span><br><span class="line">    @decorator</span><br><span class="line">    def test(self,a,b&#x3D;10):</span><br><span class="line">        print(&quot;in Test class test func...&quot;)</span><br><span class="line">        print(&quot;a&#x3D;&#123;a&#125;  b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;a,b&#x3D;b))</span><br><span class="line"></span><br><span class="line">t&#x3D;Test()</span><br><span class="line">t.test(2,b&#x3D;20)</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">in Test class __init__ func...</span><br><span class="line">before func test...</span><br><span class="line">in Test class test func...</span><br><span class="line">a&#x3D;2  b&#x3D;20</span><br><span class="line">after func test...</span><br></pre></td></tr></table></figure></li><li>装饰器有参数，被装饰类中的方法无参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self,name&#x3D;&quot;hello world&quot;):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def __call__(self,func):</span><br><span class="line">        def wrapper(self):</span><br><span class="line">            print(&quot;before func &#123;func&#125;...&quot;.format(func&#x3D;func.__name__))</span><br><span class="line">            results&#x3D;func(self)</span><br><span class="line">            print(&quot;after func &#123;func&#125;...&quot;.format(func&#x3D;func.__name__))</span><br><span class="line">            return results</span><br><span class="line">        return wrapper</span><br><span class="line"></span><br><span class="line">class Test():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;in Test class __init__ func...&quot;)</span><br><span class="line"></span><br><span class="line">    @decorator(name&#x3D;&quot;Test_test&quot;)</span><br><span class="line">    def test(self):</span><br><span class="line">        print(&quot;in Test class test func...&quot;)</span><br><span class="line"></span><br><span class="line">t&#x3D;Test()</span><br><span class="line">t.test()</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">in Test class __init__ func...</span><br><span class="line">before func test...</span><br><span class="line">in Test class test func...</span><br><span class="line">after func test...</span><br></pre></td></tr></table></figure></li><li>装饰器有参数，被装饰类中的方法有参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class decorator(object):</span><br><span class="line">    def __init__(self,name&#x3D;&quot;hello world&quot;):</span><br><span class="line">        self.name&#x3D;name</span><br><span class="line"></span><br><span class="line">    def __call__(self,func):</span><br><span class="line">        def wrapper(self,*args,**kwargs):</span><br><span class="line">            print(&quot;before func &#123;func&#125;...&quot;.format(func&#x3D;func.__name__))</span><br><span class="line">            results&#x3D;func(self,*args,**kwargs)</span><br><span class="line">            print(&quot;after func &#123;func&#125;...&quot;.format(func&#x3D;func.__name__))</span><br><span class="line">            return results</span><br><span class="line">        return wrapper</span><br><span class="line"></span><br><span class="line">class Test():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&quot;in Test class __init__ func...&quot;)</span><br><span class="line"></span><br><span class="line">    @decorator(name&#x3D;&quot;Test_test&quot;)</span><br><span class="line">    def test(self,a,b&#x3D;10):</span><br><span class="line">        print(&quot;in Test class test func...&quot;)</span><br><span class="line">        print(&quot;a&#x3D;&#123;a&#125;, b&#x3D;&#123;b&#125;&quot;.format(a&#x3D;a,b&#x3D;b))</span><br><span class="line"></span><br><span class="line">t&#x3D;Test()</span><br><span class="line">t.test(2,b&#x3D;20)</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">in Test class __init__ func...</span><br><span class="line">before func test...</span><br><span class="line">in Test class test func...</span><br><span class="line">a&#x3D;2, b&#x3D;20</span><br><span class="line">after func test...</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask系列(1)--flask和django框架的对比及flask初体验</title>
      <link href="/blog/2020/08/31/flask%E7%B3%BB%E5%88%97(1)--flask%E5%92%8Cdjango%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AF%B9%E6%AF%94%E5%8F%8Aflask%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/blog/2020/08/31/flask%E7%B3%BB%E5%88%97(1)--flask%E5%92%8Cdjango%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AF%B9%E6%AF%94%E5%8F%8Aflask%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Django-Web框架"><a href="#1-Django-Web框架" class="headerlink" title="1 Django Web框架"></a>1 Django Web框架</h4><ul><li><p>优点：</p><ul><li>1 大而全，里面的组件非常的多</li><li>2 ORM models</li></ul></li><li><p>缺点：</p><ul><li>资源浪费很严重</li></ul></li><li><p>应用场景：<br> 大型应用</p></li></ul><h4 id="2-flask-Web框架"><a href="#2-flask-Web框架" class="headerlink" title="2 flask Web框架"></a>2 flask Web框架</h4><ul><li><p>优点：</p><ul><li>1 短小精悍：session</li><li>2 官方承认支持的三方组件特别多</li></ul></li><li><p>缺点；</p><ul><li>1 稳定性相对其他web框架差那么一点</li></ul></li><li><p>应用场景：小型应用</p></li></ul><h4 id="3-共同特点："><a href="#3-共同特点：" class="headerlink" title="3 共同特点："></a>3 共同特点：</h4><ul><li>都是应用于web开发的框架</li><li>都是基于socket的</li></ul><h4 id="4-启动一个最简单的flask服务"><a href="#4-启动一个最简单的flask服务" class="headerlink" title="4 启动一个最简单的flask服务"></a>4 启动一个最简单的flask服务</h4><p>新建一个python文件，编写如下三行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app&#x3D;Flask(__name__)</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>执行之后运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\Python38\python.exe G:&#x2F;python_flask&#x2F;demo_01.py</span><br><span class="line"> * Serving Flask app &quot;demo_01&quot; (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. Do not use it in a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on http:&#x2F;&#x2F;127.0.0.1:5000&#x2F; (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>打开 <a href="http://127.0.0.1:5000/" target="_blank" rel="noopener">http://127.0.0.1:5000/</a> 即可发现flask服务已经启动，只不过此时因为还没有开发具体页面，所以提示404</p><h4 id="5-为最基础的flask代码增加一个路由"><a href="#5-为最基础的flask代码增加一个路由" class="headerlink" title="5 为最基础的flask代码增加一个路由"></a>5 为最基础的flask代码增加一个路由</h4><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app&#x3D;Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(&quot;&#x2F;&quot;)</span><br><span class="line">def index():</span><br><span class="line">    return &quot;hello world&quot;</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>运行起来如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D:\Python38\python.exe G:&#x2F;python_flask&#x2F;demo_01.py</span><br><span class="line"> * Serving Flask app &quot;demo_01&quot; (lazy loading)</span><br><span class="line"> * Environment: production</span><br><span class="line">   WARNING: This is a development server. Do not use it in a production deployment.</span><br><span class="line">   Use a production WSGI server instead.</span><br><span class="line"> * Debug mode: off</span><br><span class="line"> * Running on http:&#x2F;&#x2F;127.0.0.1:5000&#x2F; (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>在浏览器中打开 <a href="http://127.0.0.1:5000/，此时页面会显示“hello" target="_blank" rel="noopener">http://127.0.0.1:5000/，此时页面会显示“hello</a> world”</p><p>OK，至此已经完成了一个最简单的flask页面的开发</p>]]></content>
      
      
      <categories>
          
          <category> flask系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5系列(2)--PyQt5第一个应用程序</title>
      <link href="/blog/2020/08/31/PyQt5%E7%B3%BB%E5%88%97(2)--PyQt5%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>/blog/2020/08/31/PyQt5%E7%B3%BB%E5%88%97(2)--PyQt5%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="1-PyQt5-QAplication和QWidget"><a href="#1-PyQt5-QAplication和QWidget" class="headerlink" title="1 PyQt5  QAplication和QWidget"></a>1 PyQt5  QAplication和QWidget</h4><p>这两个类都在PyQt5.QtWidgets中，QApplication表示一个应用程序类，QWidget表示一个窗口类，创建第一个基于桌面的应用程序，必须使用到这两个类</p><h4 id="2-代码演示第一个基于桌面的应用程序"><a href="#2-代码演示第一个基于桌面的应用程序" class="headerlink" title="2 代码演示第一个基于桌面的应用程序"></a>2 代码演示第一个基于桌面的应用程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">from PyQt5.QtWidgets import QApplication,QWidget</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    # 创建一个QApplication类的实例，即一个应用程序</span><br><span class="line">    # sys.argv 是用来获取命令行参数</span><br><span class="line">    app&#x3D;QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line">    # 创建一个窗口</span><br><span class="line">    w&#x3D;QWidget()</span><br><span class="line"></span><br><span class="line">    # 设置窗口的尺寸，单位是像素</span><br><span class="line">    w.resize(600,400)</span><br><span class="line"></span><br><span class="line">    # 移动窗口，默认（0,0）在屏幕的左上角</span><br><span class="line">    w.move(300,300)</span><br><span class="line"></span><br><span class="line">    # 设置窗口的标题</span><br><span class="line">    w.setWindowTitle(&quot;第一个基于PyQt5的桌面应用程序&quot;)</span><br><span class="line"></span><br><span class="line">    # 显示窗口 </span><br><span class="line">    w.show()</span><br><span class="line"></span><br><span class="line">    # 进入程序的主循环，通过exit函数确保主循环安全结束</span><br><span class="line">    sys.exit(app.exec())</span><br></pre></td></tr></table></figure><p>在pycharm中当前文件中右键-执行，即可运行当前应用程序，会弹出一个类似windows窗口的应用程序</p>]]></content>
      
      
      <categories>
          
          <category> PyQt5系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5系列(1)--PyQt5环境安装基于Pycharm</title>
      <link href="/blog/2020/08/31/PyQt5%E7%B3%BB%E5%88%97(1)--PyQt5%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%9F%BA%E4%BA%8EPycharm/"/>
      <url>/blog/2020/08/31/PyQt5%E7%B3%BB%E5%88%97(1)--PyQt5%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%9F%BA%E4%BA%8EPycharm/</url>
      
        <content type="html"><![CDATA[<p>####注： 本文假设python和pycharm均已安装完成，python笨版本为3.6以上</p><h4 id="1-安装PyQt5"><a href="#1-安装PyQt5" class="headerlink" title="1 安装PyQt5"></a>1 安装PyQt5</h4><p>在cmd窗口执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5</span><br></pre></td></tr></table></figure><h4 id="2-安装PyQt5-tools"><a href="#2-安装PyQt5-tools" class="headerlink" title="2 安装PyQt5-tools"></a>2 安装PyQt5-tools</h4><p>在cmd窗口执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyQt5-tools</span><br></pre></td></tr></table></figure><h4 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3 配置环境变量"></a>3 配置环境变量</h4><p>在【计算机（此电脑）】右键-【属性】-【高级系统设置】-【高级】-【环境变量】，然后在系统变量中新建一个变量：Qt_Plugin_Path，它的值为（根据自己的安装位置调整）：<br>D:\Python38\Lib\site-packages\PyQt5\Qt\plugins</p><h4 id="4-Pycharm配置"><a href="#4-Pycharm配置" class="headerlink" title="4 Pycharm配置"></a>4 Pycharm配置</h4><ul><li>（1）打开Pycharm，点击【File】-【Setting】-【Tools】-【External Tools】</li><li>（2）点击“+”，在弹出的Edit tool窗口中设置如下内容：<ul><li>Name ： 设置为：QtDesigner</li><li>Program： 设置为（根据自己的安装位置调整）：D:\Python38\Lib\site-packages\pyqt5_tools\Qt\bin\designer.exe</li><li>Working directory：设置为：$FileDir$</li></ul></li><li>（3）点击OK保存</li><li>（4）同样的方法点击“+”，在弹出的Edit Tool窗口设置如下内容：<ul><li>Name：设置为：PyUIC</li><li>Program：设置为（根据自己的安装位置调整）：D:\Python38\python.exe</li><li>Argument：设置为：-m PyQt5.uic.pyuic  $FileName$ -o $FileNameWithoutExtension$.py</li><li>Working directory：设置为：$FileDir$</li></ul></li></ul><p>至此PyQt5 就已经安装OK了</p>]]></content>
      
      
      <categories>
          
          <category> PyQt5系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lamb-common系列(3)--非常简单的对linux服务器的Telnet操作库</title>
      <link href="/blog/2020/08/30/lamb-common%E7%B3%BB%E5%88%97(3)--%E9%9D%9E%E5%B8%B8%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%B9linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84Telnet%E6%93%8D%E4%BD%9C%E5%BA%93/"/>
      <url>/blog/2020/08/30/lamb-common%E7%B3%BB%E5%88%97(3)--%E9%9D%9E%E5%B8%B8%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%B9linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84Telnet%E6%93%8D%E4%BD%9C%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h4 id="1-lamb-common-简介"><a href="#1-lamb-common-简介" class="headerlink" title="1 lamb-common 简介"></a>1 lamb-common 简介</h4><p>lamb-common是一个致力于提供一个使用起来高度便捷，更加简单的常用的高层封装库</p><h4 id="2-lamb-common-的安装"><a href="#2-lamb-common-的安装" class="headerlink" title="2 lamb-common 的安装"></a>2 lamb-common 的安装</h4><ul><li>1 安装最新版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lamb-common</span><br></pre></td></tr></table></figure></li><li>2 安装指定版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lamb-common&#x3D;&#x3D;&#123;版本号&#125;</span><br></pre></td></tr></table></figure><h4 id="3-lamb-common-的SSH功能使用方法"><a href="#3-lamb-common-的SSH功能使用方法" class="headerlink" title="3 lamb-common 的SSH功能使用方法"></a>3 lamb-common 的SSH功能使用方法</h4>从 lamb-common-0.0.6 版本开始lamb-common开始提供Telnet功能，使用起来非常简单方便</li></ul><p>通过对SSHClient类实例化，调用exec_command，close方法对本地和远端机器做对应的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from lamb_common.api.telnet import TelnetClient</span><br><span class="line"></span><br><span class="line">telnet&#x3D;TelnetClient(ip&#x3D;&quot;192.168.1.200&quot;,port&#x3D;23,username&#x3D;&quot;admin&quot;,password&#x3D;&quot;admin&quot;,prompt&#x3D;&quot;$&quot;)</span><br><span class="line"># 通过telnet方式在远端机器上执行 ls &#x2F; 的命令</span><br><span class="line">telnet.exec_command(&quot;ls &#x2F;&quot;)</span><br><span class="line"></span><br><span class="line"># 关闭telnet连接通道</span><br><span class="line">telnet.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> lamb-common系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lamb-common系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统环境安装系列(4)--centos7如何开启telnet功能</title>
      <link href="/blog/2020/08/28/Linux%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97(4)--centos7%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AFtelnet%E5%8A%9F%E8%83%BD/"/>
      <url>/blog/2020/08/28/Linux%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97(4)--centos7%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AFtelnet%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="1-执行如下安装命令"><a href="#1-执行如下安装命令" class="headerlink" title="1 执行如下安装命令"></a>1 执行如下安装命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install -y xinetd</span><br><span class="line"></span><br><span class="line">yum install -y telnet-server</span><br><span class="line"></span><br><span class="line">yum install -y telnet</span><br></pre></td></tr></table></figure><h4 id="2-执行-vi-etc-xinetd-d-telnet-命令打开文件，若存在，则将disable-yes修改为disable-no，若文件不存在在直接编辑输入如下内容，保存退出"><a href="#2-执行-vi-etc-xinetd-d-telnet-命令打开文件，若存在，则将disable-yes修改为disable-no，若文件不存在在直接编辑输入如下内容，保存退出" class="headerlink" title="2 执行 vi /etc/xinetd.d/telnet 命令打开文件，若存在，则将disable=yes修改为disable=no，若文件不存在在直接编辑输入如下内容，保存退出"></a>2 执行 vi /etc/xinetd.d/telnet 命令打开文件，若存在，则将disable=yes修改为disable=no，若文件不存在在直接编辑输入如下内容，保存退出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># default: yes</span><br><span class="line"># description: The telnet server servestelnet sessions; it uses \</span><br><span class="line">#      unencrypted username&#x2F;password pairs for authentication.</span><br><span class="line">service telnet</span><br><span class="line">&#123;  </span><br><span class="line">  flags           &#x3D; REUSE  </span><br><span class="line">  socket_type     &#x3D; stream  </span><br><span class="line">  wait            &#x3D; no  </span><br><span class="line">  user            &#x3D; root  </span><br><span class="line">  server          &#x3D;&#x2F;usr&#x2F;sbin&#x2F;in.telnetd  </span><br><span class="line">  log_on_failure  +&#x3D; USERID  </span><br><span class="line">  disable         &#x3D; no   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-执行如下命令启动telnet服务"><a href="#3-执行如下命令启动telnet服务" class="headerlink" title="3 执行如下命令启动telnet服务"></a>3 执行如下命令启动telnet服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start xinetd</span><br></pre></td></tr></table></figure><h4 id="4-执行如下命令查看服务是否已启动"><a href="#4-执行如下命令查看服务是否已启动" class="headerlink" title="4 执行如下命令查看服务是否已启动"></a>4 执行如下命令查看服务是否已启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep xinetd</span><br></pre></td></tr></table></figure><p>执行结果若如下则表示已经启动OK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@redrose2100 lamb-common]# ps -ef | grep xinetd</span><br><span class="line">root      69017      1  0 12:32 ?        00:00:00 &#x2F;usr&#x2F;sbin&#x2F;xinetd -stayalive -pidfile &#x2F;var&#x2F;run&#x2F;xinetd.pid</span><br><span class="line">root      69686   4669  0 12:33 pts&#x2F;0    00:00:00 grep --color&#x3D;auto xinetd</span><br><span class="line">[root@redrose2100 lamb-common]#</span><br></pre></td></tr></table></figure><h4 id="5-给环境增加一个用户名，比如admin，设置密码，比如admin，因为telnet不支持使用root用户远程登录"><a href="#5-给环境增加一个用户名，比如admin，设置密码，比如admin，因为telnet不支持使用root用户远程登录" class="headerlink" title="5 给环境增加一个用户名，比如admin，设置密码，比如admin，因为telnet不支持使用root用户远程登录"></a>5 给环境增加一个用户名，比如admin，设置密码，比如admin，因为telnet不支持使用root用户远程登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@redrose2100 lamb-common]# useradd admin</span><br><span class="line">[root@redrose2100 lamb-common]# passwd admin</span><br><span class="line">Changing password for user admin.</span><br><span class="line">New password:</span><br><span class="line">BAD PASSWORD: The password is shorter than 8 characters</span><br><span class="line">Retype new password:</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br><span class="line">[root@redrose2100 lamb-common]#</span><br></pre></td></tr></table></figure><h4 id="6-使用telnet验证是否可以远程登录，若只有一台服务器则可以使用telnet-127-0-0-1"><a href="#6-使用telnet验证是否可以远程登录，若只有一台服务器则可以使用telnet-127-0-0-1" class="headerlink" title="6 使用telnet验证是否可以远程登录，若只有一台服务器则可以使用telnet 127.0.0.1"></a>6 使用telnet验证是否可以远程登录，若只有一台服务器则可以使用telnet 127.0.0.1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@redrose2100 lamb-common]# telnet 127.0.0.1</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is &#39;^]&#39;.</span><br><span class="line"></span><br><span class="line">Kernel 3.10.0-1127.el7.x86_64 on an x86_64</span><br><span class="line">redrose2100 login: admin</span><br><span class="line">Password:</span><br><span class="line">[admin@redrose2100 ~]$ who am i</span><br><span class="line">admin    pts&#x2F;3        2020-08-28 12:37 (localhost)</span><br><span class="line">[admin@redrose2100 ~]$</span><br></pre></td></tr></table></figure><p>OK，至此，telnet服务已经启动OK了</p>]]></content>
      
      
      <categories>
          
          <category> Linux系统环境安装系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统环境安装系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lamb-common系列(2)--非常简单的对linux服务器的SSH操作库</title>
      <link href="/blog/2020/08/28/lamb-common%E7%B3%BB%E5%88%97(2)--%E9%9D%9E%E5%B8%B8%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%B9linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84SSH%E6%93%8D%E4%BD%9C%E5%BA%93/"/>
      <url>/blog/2020/08/28/lamb-common%E7%B3%BB%E5%88%97(2)--%E9%9D%9E%E5%B8%B8%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%B9linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84SSH%E6%93%8D%E4%BD%9C%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h4 id="1-lamb-common-简介"><a href="#1-lamb-common-简介" class="headerlink" title="1 lamb-common 简介"></a>1 lamb-common 简介</h4><p>lamb-common是一个致力于提供一个使用起来高度便捷，更加简单的常用的高层封装库</p><h4 id="2-lamb-common-的安装"><a href="#2-lamb-common-的安装" class="headerlink" title="2 lamb-common 的安装"></a>2 lamb-common 的安装</h4><ul><li>1 安装最新版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lamb-common</span><br></pre></td></tr></table></figure></li><li>2 安装指定版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lamb-common&#x3D;&#x3D;&#123;版本号&#125;</span><br></pre></td></tr></table></figure><h4 id="3-lamb-common-的SSH功能使用方法"><a href="#3-lamb-common-的SSH功能使用方法" class="headerlink" title="3 lamb-common 的SSH功能使用方法"></a>3 lamb-common 的SSH功能使用方法</h4>从 lamb-common-0.0.5 版本开始lamb-common开始提供SSH功能，使用起来非常简单方便</li></ul><p>通过对SSHClient类实例化，调用exec_command、upload，download，close方法对本地和远端机器做对应的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from lamb_common.api.ssh import SSHClient</span><br><span class="line"></span><br><span class="line">ssh&#x3D;SSHClient(ip&#x3D;&quot;192.168.1.200&quot;,port&#x3D;22,username&#x3D;&quot;root&quot;,password&#x3D;&quot;root&quot;,prompt&#x3D;&quot;#&quot;)</span><br><span class="line"># 通过ssh方式在远端机器上执行 ls &#x2F; 的命令</span><br><span class="line">ssh.exec_command(&quot;ls &#x2F;&quot;)</span><br><span class="line"></span><br><span class="line"># 将本地当前路径下的__init__.py 文件上传到远端服务器的 &#x2F;opt&#x2F;unittest_test&#x2F;__init__.py</span><br><span class="line">ssh.upload(&quot;__init__.py&quot;,&quot;&#x2F;opt&#x2F;unittest_test&#x2F;__init__.py&quot;)</span><br><span class="line"></span><br><span class="line"># 将远端服务器上的 &#x2F;etc&#x2F;lamb_common&#x2F;log.conf 下载到本地 D:&#x2F;log.conf </span><br><span class="line">self.ssh.download(&quot;&#x2F;etc&#x2F;lamb_common&#x2F;log.conf&quot;,&quot;D:&#x2F;log.conf&quot;)</span><br><span class="line"></span><br><span class="line"># 关闭ssh连接通道</span><br><span class="line">ssh.close()</span><br></pre></td></tr></table></figure><p>这样一来，对于在linux上执行命令，上传下载文件等操作实现起来非常简单方便</p>]]></content>
      
      
      <categories>
          
          <category> lamb-common系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lamb-common系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git专题(3)--git回退操作命令</title>
      <link href="/blog/2020/08/24/git%E4%B8%93%E9%A2%98(3)--git%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2020/08/24/git%E4%B8%93%E9%A2%98(3)--git%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>git 回退操作主要有四种：</p><ul><li>对文件做了修改之后，未执行任何git命令，此时想恢复被修改的文件</li><li>对文件做了修改之后，执行了git add 命令之后，想撤销git add命令的操作</li><li>对文件做了修改之后，执行了git add之后，且执行了git commit 命令，想撤回git commit命令</li><li>对文件做了修改之后，执行了git add ，git commit， 而且执行了git push操作，这时候想撤回git push命令<h4 id="1-对文件了做了修改，但未执行任何git命令，想放弃对文件已经做的修改，恢复到之前的代码状态"><a href="#1-对文件了做了修改，但未执行任何git命令，想放弃对文件已经做的修改，恢复到之前的代码状态" class="headerlink" title="1 对文件了做了修改，但未执行任何git命令，想放弃对文件已经做的修改，恢复到之前的代码状态"></a>1 对文件了做了修改，但未执行任何git命令，想放弃对文件已经做的修改，恢复到之前的代码状态</h4></li><li>若是新增文件，则直接删除即可</li><li>若是修改了已存在的文件。执行 git checkout – file 即可<ul><li>1）首先对test.txt文件做一些修改，比如增加几行代码，执行git status和git diff 查看一下状态和修改的内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes not staged for commit:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">#</span><br><span class="line">#       modified:   test.txt</span><br><span class="line">#</span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git diff test.txt</span><br><span class="line">diff --git a&#x2F;test.txt b&#x2F;test.txt</span><br><span class="line">index abbeded..7f91275 100644</span><br><span class="line">--- a&#x2F;test.txt</span><br><span class="line">+++ b&#x2F;test.txt</span><br><span class="line">@@ -1,3 +1,7 @@</span><br><span class="line"> hello world</span><br><span class="line"> hello china</span><br><span class="line"> hahaha hahahaha</span><br><span class="line">+</span><br><span class="line">+test 1</span><br><span class="line">+test 2</span><br><span class="line">+test 3</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure></li><li>2）此时若想恢复，则只需执行 git checkout – test.txt<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git checkout -- test.txt</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git status</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure>此时之前的修改已经恢复了</li></ul></li></ul><h4 id="2-对文件做了修改之后，执行了git-add-命令之后，想撤销git-add命令的操作"><a href="#2-对文件做了修改之后，执行了git-add-命令之后，想撤销git-add命令的操作" class="headerlink" title="2 对文件做了修改之后，执行了git add 命令之后，想撤销git add命令的操作"></a>2 对文件做了修改之后，执行了git add 命令之后，想撤销git add命令的操作</h4><p>使用的命令有如下两个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD # 上一次git add的内容全部撤销</span><br><span class="line">git reset HEAD file 撤销上次git add的file文件</span><br></pre></td></tr></table></figure><ul><li>1） 首先对test.txt做一下修改，然后执行git add . 命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes not staged for commit:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">#</span><br><span class="line">#       modified:   test.txt</span><br><span class="line">#</span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git add .</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">#</span><br><span class="line">#       modified:   test.txt</span><br><span class="line">#</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure></li><li>2）此时想撤销上一次的git add 操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git reset HEAD test.txt</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M       test.txt</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes not staged for commit:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">#</span><br><span class="line">#       modified:   test.txt</span><br><span class="line">#</span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure>此时即撤销了git add操作，若继续恢复则可参考上述 1 继续操作</li></ul><h4 id="3-对文件做了修改之后，执行了git-add之后，且执行了git-commit-命令，想撤回git-commit命令"><a href="#3-对文件做了修改之后，执行了git-add之后，且执行了git-commit-命令，想撤回git-commit命令" class="headerlink" title="3 对文件做了修改之后，执行了git add之后，且执行了git commit 命令，想撤回git commit命令"></a>3 对文件做了修改之后，执行了git add之后，且执行了git commit 命令，想撤回git commit命令</h4><ul><li>1）首先对test.txt文件做一些修改，然后依次执行git add 和gitcommit操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git add .</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">#</span><br><span class="line">#       modified:   test.txt</span><br><span class="line">#</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git commit -m &quot;update for commit &quot;</span><br><span class="line">[master 19b71ac] update for commit</span><br><span class="line"> 1 file changed, 4 insertions(+)</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure></li><li>2）执行git log命令，根据git commit的信息提示找到需要回退到的commit的id，如这里需要回退到16db0b48e14ce8e0377085d891c473cef873febb的位置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git log</span><br><span class="line">commit 19b71ac466e2c30269e983deada775f3b393681f</span><br><span class="line">Author: hitredrose@163.com &lt;hitredrose@163.com&gt;</span><br><span class="line">Date:   Mon Aug 24 01:20:27 2020 +0800</span><br><span class="line"></span><br><span class="line">    update for commit</span><br><span class="line"></span><br><span class="line">commit 16db0b48e14ce8e0377085d891c473cef873febb</span><br><span class="line">Author: root &lt;root@redrose2100.com&gt;</span><br><span class="line">Date:   Mon Aug 24 00:33:26 2020 +0800</span><br><span class="line"></span><br><span class="line">    test for git</span><br><span class="line"></span><br><span class="line">commit 9d5b788cef89dbf3929586c9df43bf429fda8bd2</span><br><span class="line">Author: redrose2100 &lt;hitredrose@163.com&gt;</span><br><span class="line">Date:   Mon Aug 24 00:10:23 2020 +0800</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure></li><li>3) 如果想仅仅是撤销commit操作，即修改的代码保留，只不过状态处于commit之前，需要执行git reset –soft commit-id<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git reset --soft 16db0b48e14ce8e0377085d891c473cef873febb</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes to be committed:</span><br><span class="line">#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line">#</span><br><span class="line">#       modified:   test.txt</span><br><span class="line">#</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure>此时若想再提交，直接git commit就可以了，修改的源代码都在</li><li>4）在执行上述3之前，若想撤销commit并且丢弃源代码，则执行 git reset –hard commit-id命令进行回退<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git reset --hard 16db0b48e14ce8e0377085d891c473cef873febb</span><br><span class="line">HEAD is now at 16db0b4 test for git</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git status</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure>此时上次commit的代码也同步丢弃了</li></ul><h4 id="4-对文件做了修改之后，执行了git-add-，git-commit，-而且执行了git-push操作，这时候想撤回git-push命令"><a href="#4-对文件做了修改之后，执行了git-add-，git-commit，-而且执行了git-push操作，这时候想撤回git-push命令" class="headerlink" title="4 对文件做了修改之后，执行了git add ，git commit， 而且执行了git push操作，这时候想撤回git push命令"></a>4 对文件做了修改之后，执行了git add ，git commit， 而且执行了git push操作，这时候想撤回git push命令</h4><ul><li>1）首先对test.txt文件做一些修改，然后依次执行git add 和gitcommit操作，并且执行git push操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git add .</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git commit -m &quot;update for push&quot;</span><br><span class="line">[master a6396af] update for push</span><br><span class="line"> 1 file changed, 4 insertions(+)</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git push origin master</span><br><span class="line">Counting objects: 5, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (3&#x2F;3), done.</span><br><span class="line">Writing objects: 100% (3&#x2F;3), 341 bytes | 0 bytes&#x2F;s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:redrose2100&#x2F;test_for_git.git</span><br><span class="line">   16db0b4..a6396af  master -&gt; master</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure></li><li>2）此时想撤销刚刚的git push操作，首先在本地执行git log查看提交记录，找到要恢复的commit的id，如这里需要恢复到commit的id为：16db0b48e14ce8e0377085d891c473cef873febb<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git log</span><br><span class="line">commit a6396af3876db489dbb73509a9e3008ca185290f</span><br><span class="line">Author: hitredrose@163.com &lt;hitredrose@163.com&gt;</span><br><span class="line">Date:   Mon Aug 24 01:33:55 2020 +0800</span><br><span class="line"></span><br><span class="line">    update for push</span><br><span class="line"></span><br><span class="line">commit 16db0b48e14ce8e0377085d891c473cef873febb</span><br><span class="line">Author: root &lt;root@redrose2100.com&gt;</span><br><span class="line">Date:   Mon Aug 24 00:33:26 2020 +0800</span><br><span class="line"></span><br><span class="line">    test for git</span><br><span class="line"></span><br><span class="line">commit 9d5b788cef89dbf3929586c9df43bf429fda8bd2</span><br><span class="line">Author: redrose2100 &lt;hitredrose@163.com&gt;</span><br><span class="line">Date:   Mon Aug 24 00:10:23 2020 +0800</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure></li><li>3）执行 git reset –hard commit-id命令先将本地代码恢复到指定的commit的版本，并且丢弃已经上次提交的源代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git reset --hard 16db0b48e14ce8e0377085d891c473cef873febb</span><br><span class="line">HEAD is now at 16db0b4 test for git</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git status</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git log</span><br><span class="line">commit 16db0b48e14ce8e0377085d891c473cef873febb</span><br><span class="line">Author: root &lt;root@redrose2100.com&gt;</span><br><span class="line">Date:   Mon Aug 24 00:33:26 2020 +0800</span><br><span class="line"></span><br><span class="line">    test for git</span><br><span class="line"></span><br><span class="line">commit 9d5b788cef89dbf3929586c9df43bf429fda8bd2</span><br><span class="line">Author: redrose2100 &lt;hitredrose@163.com&gt;</span><br><span class="line">Date:   Mon Aug 24 00:10:23 2020 +0800</span><br><span class="line"></span><br><span class="line">    Initial commit</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure></li><li>4）然后执行 git push -f origin master即强制提交push即可恢复<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git push -f origin master</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:redrose2100&#x2F;test_for_git.git</span><br><span class="line"> + a6396af...16db0b4 master -&gt; master (forced update)</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure>常见的恢复操作主要有以上四种</li></ul>]]></content>
      
      
      <categories>
          
          <category> git专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git专题(2)--git基础操作命令行-下载提交代码</title>
      <link href="/blog/2020/08/23/git%E4%B8%93%E9%A2%98(2)--git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E8%A1%8C-%E4%B8%8B%E8%BD%BD%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81/"/>
      <url>/blog/2020/08/23/git%E4%B8%93%E9%A2%98(2)--git%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E8%A1%8C-%E4%B8%8B%E8%BD%BD%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>注：本文以 <a href="mailto:git@github.com">git@github.com</a>:redrose2100/test_for_git.git 仓库为例</p><h4 id="1-下载代码"><a href="#1-下载代码" class="headerlink" title="1 下载代码"></a>1 下载代码</h4><ul><li>1）可以直接使用git clone 下载代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test]# git clone git@github.com:redrose2100&#x2F;test_for_git.git</span><br><span class="line">Cloning into &#39;test_for_git&#39;...</span><br><span class="line">remote: Enumerating objects: 3, done.</span><br><span class="line">remote: Counting objects: 100% (3&#x2F;3), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Receiving objects: 100% (3&#x2F;3), done.</span><br><span class="line">(base) [root@redrose2100 test]# ls -l</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x. 3 root root 35 Aug 24 00:11 test_for_git</span><br></pre></td></tr></table></figure></li><li>2）可以先建好文件夹，然后初始化一个仓库，关联远端仓库，在使用pull更新代码<br>执行的命令如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init  初始化一个本地仓库</span><br><span class="line">git remote add origin git@github.com:redrose2100&#x2F;test_for_git.git   将本地仓库和github远端关联</span><br><span class="line">git pull origin master  更新远端master分支</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test]# mkdir test_for_git</span><br><span class="line">(base) [root@redrose2100 test]# cd test_for_git&#x2F;</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git init</span><br><span class="line">Initialized empty Git repository in &#x2F;opt&#x2F;test&#x2F;test_for_git&#x2F;.git&#x2F;</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git remote add origin git@github.com:redrose2100&#x2F;test_for_git.git</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git pull origin master</span><br><span class="line">remote: Enumerating objects: 3, done.</span><br><span class="line">remote: Counting objects: 100% (3&#x2F;3), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3&#x2F;3), done.</span><br><span class="line">From github.com:redrose2100&#x2F;test_for_git</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">(base) [root@redrose2100 test_for_git]# ls -l</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 14 Aug 24 00:14 README.md</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure><h4 id="2-查看代码状态"><a href="#2-查看代码状态" class="headerlink" title="2 查看代码状态"></a>2 查看代码状态</h4></li><li>1）直接执行git status<br>运行如下：表示代码没有修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git status</span><br><span class="line"># On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure></li><li>2）下面新建一个文件，比如test.txt,随便加一点东西，然后在执行git status，如下提示test.txt未跟踪，需要使用git add 命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git status</span><br><span class="line"># On branch master</span><br><span class="line"># Untracked files:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">#</span><br><span class="line">#       test.txt</span><br><span class="line">#       &quot;\357\274\201&quot;</span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure></li><li>3）下面修改一下已经存在READ.md文件，随便写入一点东西，然后执行git status，发现READ.md为modified表示修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git status</span><br><span class="line"># On branch master</span><br><span class="line"># Changes not staged for commit:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">#</span><br><span class="line">#       modified:   README.md</span><br><span class="line">#</span><br><span class="line"># Untracked files:</span><br><span class="line">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">#</span><br><span class="line">#       test.txt</span><br><span class="line">#       &quot;\357\274\201&quot;</span><br><span class="line">no changes added to commit (use &quot;git add&quot; and&#x2F;or &quot;git commit -a&quot;)</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure></li><li>4）使用git diff 可以查看修改的内容，开头-表示删除的内容，开头+表示增加的内容，修改的内容一目了然<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git diff README.md</span><br><span class="line">diff --git a&#x2F;README.md b&#x2F;README.md</span><br><span class="line">index 96724f2..170807c 100644</span><br><span class="line">--- a&#x2F;README.md</span><br><span class="line">+++ b&#x2F;README.md</span><br><span class="line">@@ -1 +1,4 @@</span><br><span class="line">-# test_for_git</span><br><span class="line">\ No newline at end of file</span><br><span class="line">+# test_for_git</span><br><span class="line">+test for git</span><br><span class="line">+hello world</span><br><span class="line">+hello china</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure><h4 id="3-代码提交"><a href="#3-代码提交" class="headerlink" title="3 代码提交"></a>3 代码提交</h4>代码提交主要有以下三步：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . # 将所有修改都增加到暂存区</span><br><span class="line">git commit -m “提交代码的说明”  提交代码到本地仓库，并加提交代码的修改说明</span><br><span class="line">git push origin master  推送到github远端仓库</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test_for_git]# git add .</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git commit -m &quot;test for git“</span><br><span class="line">(base) [root@redrose2100 test_for_git]# git push origin master</span><br><span class="line">Counting objects: 6, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (3&#x2F;3), done.</span><br><span class="line">Writing objects: 100% (4&#x2F;4), 357 bytes | 0 bytes&#x2F;s, done.</span><br><span class="line">Total 4 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:redrose2100&#x2F;test_for_git.git</span><br><span class="line">   9d5b788..16db0b4  master -&gt; master</span><br><span class="line">(base) [root@redrose2100 test_for_git]#</span><br></pre></td></tr></table></figure>此时可以去github的仓库中查看是否已更新了新增的内容</li></ul>]]></content>
      
      
      <categories>
          
          <category> git专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git专题(1)--如何在github上配置centos7的公钥</title>
      <link href="/blog/2020/08/23/git%E4%B8%93%E9%A2%98(1)--%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E9%85%8D%E7%BD%AEcentos7%E7%9A%84%E5%85%AC%E9%92%A5/"/>
      <url>/blog/2020/08/23/git%E4%B8%93%E9%A2%98(1)--%E5%A6%82%E4%BD%95%E5%9C%A8github%E4%B8%8A%E9%85%8D%E7%BD%AEcentos7%E7%9A%84%E5%85%AC%E9%92%A5/</url>
      
        <content type="html"><![CDATA[<h4 id="1-在centos7上配置git的邮箱和用户名"><a href="#1-在centos7上配置git的邮箱和用户名" class="headerlink" title="1 在centos7上配置git的邮箱和用户名"></a>1 在centos7上配置git的邮箱和用户名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;yourEmail@email&quot;</span><br><span class="line">git config --global user.name &quot;yourEmail@email&quot;</span><br></pre></td></tr></table></figure><h4 id="2-在centos7上生成公钥和私钥"><a href="#2-在centos7上生成公钥和私钥" class="headerlink" title="2 在centos7上生成公钥和私钥"></a>2 在centos7上生成公钥和私钥</h4><p>执行如下命令，其中邮箱为注册github使用的邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keyen -t rsa -C &quot;yourEmail@email&quot;</span><br></pre></td></tr></table></figure><h4 id="3-复制公钥"><a href="#3-复制公钥" class="headerlink" title="3 复制公钥"></a>3 复制公钥</h4><p>在步骤2的回显中会有如下一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your public key has been saved in &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后将回显的内容复制</p><h4 id="4-github上创建公钥"><a href="#4-github上创建公钥" class="headerlink" title="4 github上创建公钥"></a>4 github上创建公钥</h4><ul><li><p>1）在github上（已经在github上注册了账号）依次点击【右上角自己的头像】-【setting】-【SSH and GPG keys】</p></li><li><p>2）然后点击【new SSH keys】，自己定义一个title，然后将步骤3复制的公钥内容粘贴到key中，点击【Add SSH Key】</p><h4 id="5-检查公钥是否配置OK"><a href="#5-检查公钥是否配置OK" class="headerlink" title="5 检查公钥是否配置OK"></a>5 检查公钥是否配置OK</h4><p>执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现如下提示表示已经配置OK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 test]# ssh -T git@github.com</span><br><span class="line">Warning: Permanently added the RSA host key for IP address &#39;13.229.188.59&#39; to the list of known hosts.</span><br><span class="line">Hi redrose2100! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">(base) [root@redrose2100 test]#</span><br></pre></td></tr></table></figure></li></ul><p>windows上配置方式基本类似，在cmd窗口执行上述命令即可</p>]]></content>
      
      
      <categories>
          
          <category> git专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统环境安装系列(2)--centos7如何卸载mongodb</title>
      <link href="/blog/2020/08/23/Linux%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97(2)--centos7%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BDmongodb/"/>
      <url>/blog/2020/08/23/Linux%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97(2)--centos7%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BDmongodb/</url>
      
        <content type="html"><![CDATA[<h4 id="1-查看当前mongodb运行状态"><a href="#1-查看当前mongodb运行状态" class="headerlink" title="1 查看当前mongodb运行状态"></a>1 查看当前mongodb运行状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mongod</span><br></pre></td></tr></table></figure><p>如下表示运行状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@redrose2100 yum.repos.d]# systemctl status mongod</span><br><span class="line">● mongod.service - MongoDB Database Server</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mongod.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2020-08-17 12:37:09 CST; 5 days ago</span><br><span class="line">     Docs: https:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual</span><br><span class="line"> Main PID: 1514 (mongod)</span><br><span class="line">    Tasks: 20</span><br><span class="line">   CGroup: &#x2F;system.slice&#x2F;mongod.service</span><br><span class="line">           └─1514 &#x2F;usr&#x2F;bin&#x2F;mongod -f &#x2F;etc&#x2F;mongod.conf</span><br><span class="line"></span><br><span class="line">Warning: Journal has been rotated since unit was started. Log output is incomplete or unavailable.</span><br></pre></td></tr></table></figure><h4 id="2-停止运行mongodb服务"><a href="#2-停止运行mongodb服务" class="headerlink" title="2 停止运行mongodb服务"></a>2 停止运行mongodb服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop  mongod</span><br></pre></td></tr></table></figure><h4 id="3-删除安装包"><a href="#3-删除安装包" class="headerlink" title="3 删除安装包"></a>3 删除安装包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum erase $(rpm -qa | grep mongodb-org)</span><br></pre></td></tr></table></figure><h4 id="4-删除数据目录"><a href="#4-删除数据目录" class="headerlink" title="4 删除数据目录"></a>4 删除数据目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -r &#x2F;var&#x2F;log&#x2F;mongodb</span><br><span class="line">sudo rm -r &#x2F;var&#x2F;lib&#x2F;mongo</span><br></pre></td></tr></table></figure><p>至此，mongodb已卸载完成</p>]]></content>
      
      
      <categories>
          
          <category> Linux系统环境安装系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统环境安装系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统环境安装系列(3)--centos7如何安装社区版mongodb</title>
      <link href="/blog/2020/08/23/Linux%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97(3)--centos7%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E7%A4%BE%E5%8C%BA%E7%89%88mongodb/"/>
      <url>/blog/2020/08/23/Linux%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97(3)--centos7%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E7%A4%BE%E5%8C%BA%E7%89%88mongodb/</url>
      
        <content type="html"><![CDATA[<h4 id="1-配置yum源"><a href="#1-配置yum源" class="headerlink" title="1 配置yum源"></a>1 配置yum源</h4><p>通过 vi /etc/yum.repos.d/mongodb-org-4.4.repo ，然后将如下内容写入文件中，保存退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-4.4]</span><br><span class="line">name&#x3D;MongoDB Repository</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;repo.mongodb.org&#x2F;yum&#x2F;redhat&#x2F;$releasever&#x2F;mongodb-org&#x2F;4.4&#x2F;x86_64&#x2F;</span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;www.mongodb.org&#x2F;static&#x2F;pgp&#x2F;server-4.4.asc</span><br></pre></td></tr></table></figure><h4 id="2-执行如下命令使配置的yum源生效"><a href="#2-执行如下命令使配置的yum源生效" class="headerlink" title="2 执行如下命令使配置的yum源生效"></a>2 执行如下命令使配置的yum源生效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum clean all</span><br><span class="line"></span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><h4 id="3-执行如下命令安装mongodb"><a href="#3-执行如下命令安装mongodb" class="headerlink" title="3 执行如下命令安装mongodb"></a>3 执行如下命令安装mongodb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y mongodb-org</span><br></pre></td></tr></table></figure><h4 id="4-编辑配置文件"><a href="#4-编辑配置文件" class="headerlink" title="4 编辑配置文件"></a>4 编辑配置文件</h4><p>vi /etc/mongod.conf<br>主要做如下修改</p><ul><li>将 bindIp 修改为0.0.0.0，这样在其他机器就可以通过此服务器的ip地址类访问数据库了</li><li>（可选） 设置mongodb的日志目录，可以不修改，默认为 /var/log/mongodb/mongod.log</li><li>（可选） 设置mongodb数据存放目录，可以不修改，默认为 /var/lib/mongo<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"># mongod.conf</span><br><span class="line"></span><br><span class="line"># for documentation of all options, see:</span><br><span class="line">#   http:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual&#x2F;reference&#x2F;configuration-options&#x2F;</span><br><span class="line"></span><br><span class="line"># where to write logging data.</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  logAppend: true</span><br><span class="line">  path: &#x2F;var&#x2F;log&#x2F;mongodb&#x2F;mongod.log</span><br><span class="line"></span><br><span class="line"># Where and how to store data.</span><br><span class="line">storage:</span><br><span class="line">  dbPath: &#x2F;var&#x2F;lib&#x2F;mongo</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">#  engine:</span><br><span class="line">#  wiredTiger:</span><br><span class="line"></span><br><span class="line"># how the process runs</span><br><span class="line">processManagement:</span><br><span class="line">  fork: true  # fork and run in background</span><br><span class="line">  pidFilePath: &#x2F;var&#x2F;run&#x2F;mongodb&#x2F;mongod.pid  # location of pidfile</span><br><span class="line">  timeZoneInfo: &#x2F;usr&#x2F;share&#x2F;zoneinfo</span><br><span class="line"></span><br><span class="line"># network interfaces</span><br><span class="line">net:</span><br><span class="line">  port: 27017</span><br><span class="line">  bindIp: 0.0.0.0  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#security:</span><br><span class="line"></span><br><span class="line">#operationProfiling:</span><br><span class="line"></span><br><span class="line">#replication:</span><br><span class="line"></span><br><span class="line">#sharding:</span><br><span class="line"></span><br><span class="line">## Enterprise-Only Options</span><br><span class="line"></span><br><span class="line">#auditLog:</span><br><span class="line"></span><br><span class="line">#snmp:</span><br><span class="line">~</span><br></pre></td></tr></table></figure><h4 id="5-启动mongodb服务"><a href="#5-启动mongodb服务" class="headerlink" title="5 启动mongodb服务"></a>5 启动mongodb服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mongod</span><br></pre></td></tr></table></figure><h4 id="6-查看mongodb服务启动后状态是否正常"><a href="#6-查看mongodb服务启动后状态是否正常" class="headerlink" title="6 查看mongodb服务启动后状态是否正常"></a>6 查看mongodb服务启动后状态是否正常</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mongod</span><br></pre></td></tr></table></figure>如下表示正常<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@redrose2100 yum.repos.d]# systemctl status  mongod</span><br><span class="line">● mongod.service - MongoDB Database Server</span><br><span class="line">   Loaded: loaded (&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mongod.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sun 2020-08-23 10:16:14 CST; 56s ago</span><br><span class="line">     Docs: https:&#x2F;&#x2F;docs.mongodb.org&#x2F;manual</span><br><span class="line">  Process: 31713 ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;mongod $OPTIONS (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line">  Process: 31709 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;chmod 0755 &#x2F;var&#x2F;run&#x2F;mongodb (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line">  Process: 31707 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;chown mongod:mongod &#x2F;var&#x2F;run&#x2F;mongodb (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line">  Process: 31702 ExecStartPre&#x3D;&#x2F;usr&#x2F;bin&#x2F;mkdir -p &#x2F;var&#x2F;run&#x2F;mongodb (code&#x3D;exited, status&#x3D;0&#x2F;SUCCESS)</span><br><span class="line"> Main PID: 31717 (mongod)</span><br><span class="line">    Tasks: 32</span><br><span class="line">   CGroup: &#x2F;system.slice&#x2F;mongod.service</span><br><span class="line">           └─31717 &#x2F;usr&#x2F;bin&#x2F;mongod -f &#x2F;etc&#x2F;mongod.conf</span><br><span class="line"></span><br><span class="line">Aug 23 10:16:12 redrose2100.com systemd[1]: Starting MongoDB Database Server...</span><br><span class="line">Aug 23 10:16:13 redrose2100.com mongod[31713]: about to fork child process, waiting until server is ready for connections.</span><br><span class="line">Aug 23 10:16:13 redrose2100.com mongod[31713]: forked process: 31717</span><br><span class="line">Aug 23 10:16:14 redrose2100.com mongod[31713]: child process started successfully, parent exiting</span><br><span class="line">Aug 23 10:16:14 redrose2100.com systemd[1]: Started MongoDB Database Server.</span><br></pre></td></tr></table></figure><h4 id="7-如果想停止mongodb服务执行如下命令："><a href="#7-如果想停止mongodb服务执行如下命令：" class="headerlink" title="7 如果想停止mongodb服务执行如下命令："></a>7 如果想停止mongodb服务执行如下命令：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mongod</span><br></pre></td></tr></table></figure><h4 id="8-若对mongodb的配置有修改，需要重启mongodb，可以先stop再start，也可以执行如下直接restart"><a href="#8-若对mongodb的配置有修改，需要重启mongodb，可以先stop再start，也可以执行如下直接restart" class="headerlink" title="8 若对mongodb的配置有修改，需要重启mongodb，可以先stop再start，也可以执行如下直接restart"></a>8 若对mongodb的配置有修改，需要重启mongodb，可以先stop再start，也可以执行如下直接restart</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mongod</span><br></pre></td></tr></table></figure><h4 id="9-检查mongodb数据库是否已真正OK"><a href="#9-检查mongodb数据库是否已真正OK" class="headerlink" title="9 检查mongodb数据库是否已真正OK"></a>9 检查mongodb数据库是否已真正OK</h4>执行如下命令进入数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure>如下表示已经进入数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@redrose2100 yum.repos.d]# mongo</span><br><span class="line">MongoDB shell version v4.4.0</span><br><span class="line">connecting to: mongodb:&#x2F;&#x2F;127.0.0.1:27017&#x2F;?compressors&#x3D;disabled&amp;gssapiServiceName&#x3D;mongodb</span><br><span class="line">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;0cfb0cc6-7134-4551-bc54-0552d7cab62d&quot;) &#125;</span><br><span class="line">MongoDB server version: 4.4.0</span><br><span class="line">---</span><br><span class="line">The server generated these startup warnings when booting:</span><br><span class="line">        2020-08-23T10:16:13.155+08:00: ***** SERVER RESTARTED *****</span><br><span class="line">        2020-08-23T10:16:14.064+08:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted</span><br><span class="line">        2020-08-23T10:16:14.064+08:00: &#x2F;sys&#x2F;kernel&#x2F;mm&#x2F;transparent_hugepage&#x2F;enabled is &#39;always&#39;. We suggest setting it to &#39;never&#39;</span><br><span class="line">        2020-08-23T10:16:14.064+08:00: &#x2F;sys&#x2F;kernel&#x2F;mm&#x2F;transparent_hugepage&#x2F;defrag is &#39;always&#39;. We suggest setting it to &#39;never&#39;</span><br><span class="line">---</span><br><span class="line">---</span><br><span class="line">        Enable MongoDB&#39;s free cloud-based monitoring service, which will then receive and display</span><br><span class="line">        metrics about your deployment (disk utilization, CPU, operation statistics, etc).</span><br><span class="line"></span><br><span class="line">        The monitoring data will be available on a MongoDB website with a unique URL accessible to you</span><br><span class="line">        and anyone you share the URL with. MongoDB may use this information to make product</span><br><span class="line">        improvements and to suggest MongoDB products and deployment options to you.</span><br><span class="line"></span><br><span class="line">        To enable free monitoring, run the following command: db.enableFreeMonitoring()</span><br><span class="line">        To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</span><br><span class="line">---</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>执行如下命令查看当前mongodb中有哪些数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>如下表示当前mongodb中有三个数据库，分别为admin、config、local<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="10-输入exit即可退出数据库"><a href="#10-输入exit即可退出数据库" class="headerlink" title="10 输入exit即可退出数据库"></a>10 输入exit即可退出数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; exit</span><br><span class="line">bye</span><br><span class="line">[root@redrose2100 yum.repos.d]#</span><br></pre></td></tr></table></figure>至此，mongodb数据库已经安装完成</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux系统环境安装系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统环境安装系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统环境安装系列(1)--centos7 上手动安装python3</title>
      <link href="/blog/2020/08/23/Linux%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97(1)--centos7%E4%B8%8A%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85python3/"/>
      <url>/blog/2020/08/23/Linux%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E7%B3%BB%E5%88%97(1)--centos7%E4%B8%8A%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85python3/</url>
      
        <content type="html"><![CDATA[<p>因为centos7自带的python是2.7.5版本，但是当前已经在使用python3了，这里详细演示如何手动安装python3</p><h4 id="1-安装python3前的准备工作："><a href="#1-安装python3前的准备工作：" class="headerlink" title="1 安装python3前的准备工作："></a>1 安装python3前的准备工作：</h4><p>使用root用户执行如下命令，安装 底层依赖工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development tools&quot;</span><br><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line">yum install -y libffi-devel zlib1g-dev</span><br><span class="line">yum install zlib* -y</span><br></pre></td></tr></table></figure><h4 id="2-在-opt-目录下下载python3-8-5的安装包"><a href="#2-在-opt-目录下下载python3-8-5的安装包" class="headerlink" title="2 在/opt/目录下下载python3.8.5的安装包"></a>2 在/opt/目录下下载python3.8.5的安装包</h4><p>从python官网找到源码下载的地方，即Gzipped source tarball上【右键】-【复制链接地址】，如这里是3.8.5的链接：然后使用wget即可下载，如果linux未连网可以手工下载后上传linux服务器</p><p><a href="https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tgz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tgz</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.8.5&#x2F;Python-3.8.5.tgz</span><br></pre></td></tr></table></figure><h4 id="3-解压下载的python安装包"><a href="#3-解压下载的python安装包" class="headerlink" title="3 解压下载的python安装包"></a>3 解压下载的python安装包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf Python-3.8.5.tgz</span><br></pre></td></tr></table></figure><h4 id="4-然后进入解压缩的目录中"><a href="#4-然后进入解压缩的目录中" class="headerlink" title="4 然后进入解压缩的目录中"></a>4 然后进入解压缩的目录中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd Python-3.8.5&#x2F;</span><br></pre></td></tr></table></figure><h4 id="5-分别执行如下两条命令进行安装"><a href="#5-分别执行如下两条命令进行安装" class="headerlink" title="5 分别执行如下两条命令进行安装"></a>5 分别执行如下两条命令进行安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3 --enable-optimizations --with-ssl</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h4 id="6-分别执行如下两条命令检查是否安装ok"><a href="#6-分别执行如下两条命令检查是否安装ok" class="headerlink" title="6 分别执行如下两条命令检查是否安装ok"></a>6 分别执行如下两条命令检查是否安装ok</h4><p>注意：这里因为没有卸载系统的python2.7.5，所以python命令默认的还是python2.7.5，如果使用安装的python3.8.5需要使用python3命令<br>pip也同样需要使用pip3命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 --version</span><br><span class="line"></span><br><span class="line">pip3 --version</span><br></pre></td></tr></table></figure><p>如下能正确显示版本号，则表示安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@redrose2100 Python-3.8.5]# python3 --version</span><br><span class="line">Python 3.8.5</span><br><span class="line">[root@redrose2100 Python-3.8.5]# pip3 --version</span><br><span class="line">pip 20.2.2 from &#x2F;usr&#x2F;local&#x2F;python3&#x2F;lib&#x2F;python3.8&#x2F;site-packages&#x2F;pip (python 3.8)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux系统环境安装系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统环境安装系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lamb-common系列(1)--便捷高效简单的的python项目日志功能</title>
      <link href="/blog/2020/08/23/lamb-common%E7%B3%BB%E5%88%97(1)--%E4%BE%BF%E6%8D%B7%E9%AB%98%E6%95%88%E7%AE%80%E5%8D%95%E7%9A%84%E7%9A%84python%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/"/>
      <url>/blog/2020/08/23/lamb-common%E7%B3%BB%E5%88%97(1)--%E4%BE%BF%E6%8D%B7%E9%AB%98%E6%95%88%E7%AE%80%E5%8D%95%E7%9A%84%E7%9A%84python%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h4 id="1-lamb-common-简介"><a href="#1-lamb-common-简介" class="headerlink" title="1 lamb-common 简介"></a>1 lamb-common 简介</h4><p>lamb-common是一个致力于提供一个使用起来高度便捷，更加简单的常用的高层封装库</p><h4 id="2-lamb-common-的安装"><a href="#2-lamb-common-的安装" class="headerlink" title="2 lamb-common 的安装"></a>2 lamb-common 的安装</h4><ul><li>1 安装最新版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lamb-common</span><br></pre></td></tr></table></figure></li><li>2 安装指定版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lamb-common&#x3D;&#x3D;&#123;版本号&#125;</span><br></pre></td></tr></table></figure><h4 id="3-lamb-common-的日志功能使用方法"><a href="#3-lamb-common-的日志功能使用方法" class="headerlink" title="3 lamb-common 的日志功能使用方法"></a>3 lamb-common 的日志功能使用方法</h4></li></ul><h4 id="lamb-common-0-0-5"><a href="#lamb-common-0-0-5" class="headerlink" title="lamb-common-0.0.5"></a>lamb-common-0.0.5</h4><ul><li><p>日志功能同 lamb-common-0.0.4</p><h4 id="lamb-common-0-0-4"><a href="#lamb-common-0-0-4" class="headerlink" title="lamb-common-0.0.4"></a>lamb-common-0.0.4</h4></li><li><p>1 linux平台</p><ul><li>（1）vi /etc/lamb-common/log.conf 编辑log配置文件，默认文件如下，为lanb-common包本身提供的日志系统<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[lamb-common]</span><br><span class="line">name&#x3D;lamb-common</span><br><span class="line">path&#x3D;&#x2F;var&#x2F;log&#x2F;lamb-common&#x2F;</span><br><span class="line">console_level&#x3D;INFO</span><br><span class="line">file_level&#x3D;INFO</span><br><span class="line">fmt&#x3D;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s</span><br><span class="line">datafmt&#x3D;%Y-%m-%d_%H:%M:%S</span><br></pre></td></tr></table></figure></li><li>（2）例如在一个新的项目如demo_test中使用lamb-common提供的日志系统，只需要将上述配置复制一份，然后将lamb-common修改为demo_test即可，如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[lamb-common]</span><br><span class="line">name&#x3D;lamb-common</span><br><span class="line">path&#x3D;&#x2F;var&#x2F;log&#x2F;lamb-common&#x2F;</span><br><span class="line">console_level&#x3D;INFO</span><br><span class="line">file_level&#x3D;INFO</span><br><span class="line">fmt&#x3D;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s</span><br><span class="line">datafmt&#x3D;%Y-%m-%d_%H:%M:%S</span><br><span class="line">  </span><br><span class="line">[demo_test]</span><br><span class="line">name&#x3D;demo_test</span><br><span class="line">path&#x3D;&#x2F;var&#x2F;log&#x2F;demo_test&#x2F;</span><br><span class="line">console_level&#x3D;INFO</span><br><span class="line">file_level&#x3D;INFO</span><br><span class="line">fmt&#x3D;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s</span><br><span class="line">datafmt&#x3D;%Y-%m-%d_%H:%M:%S</span><br></pre></td></tr></table></figure></li><li>（3）然后在新的模块中直接写入下面三行，即可随意使用log进行打印日志了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from lamb_common.api.log import logger</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">log&#x3D;logging.getLogger(&quot;demo_test&quot;)</span><br></pre></td></tr></table></figure>实例如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from lamb_common.api.log import logger</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">log&#x3D;logging.getLogger(&quot;demo_test&quot;)</span><br><span class="line">def func01():</span><br><span class="line">    log.info(&quot;info&quot;)</span><br><span class="line">    log.debug(&quot;debug&quot;)</span><br><span class="line">    log.error(&quot;error&quot;)</span><br><span class="line">    log.warning(&quot;warning&quot;)</span><br><span class="line"></span><br><span class="line">func01()</span><br></pre></td></tr></table></figure>执行结果如下，且保存到日志文件 /var/log/demo_test/demo_test.log中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log saved at &#x2F;var&#x2F;log&#x2F;demo_test&#x2F;demo_test.log</span><br><span class="line">2020-08-22_23:59:16 | tests&#x2F;test.py:6 in func01() | INFO | info</span><br><span class="line">2020-08-22_23:59:16 | tests&#x2F;test.py:8 in func01() | ERROR | error</span><br><span class="line">2020-08-22_23:59:16 | tests&#x2F;test.py:9 in func01() | WARNING | warning</span><br></pre></td></tr></table></figure></li></ul></li><li><p>2 windows 平台<br> windows平台使用方式与linux平台基本是一致的，注意点主要有以下两点：</p><ul><li><p>配置文件在代码中，即 */site-packages/lamb_common/conf/log.conf</p></li><li><p>生成日志的路径在脚本所在的盘的根目录/var/log/lamb_common/lamb_common.log</p><p>例如如下测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from lamb_common.api.log import logger</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">log&#x3D;logging.getLogger(&quot;lamb_common&quot;)</span><br><span class="line">def func01():</span><br><span class="line">    log.info(&quot;info&quot;)</span><br><span class="line">    log.debug(&quot;debug&quot;)</span><br><span class="line">    log.error(&quot;error&quot;)</span><br><span class="line">    log.warning(&quot;warning&quot;)</span><br><span class="line"></span><br><span class="line">func01()</span><br></pre></td></tr></table></figure><p>执行结果如下，因为此例子测试代码再G盘，所以日志路径为 G:/var/log/lamb_common/lamb_common.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\Python38\python.exe G:&#x2F;lamb-common&#x2F;tests&#x2F;test.py</span><br><span class="line">2020-08-23_00:05:05 | G:&#x2F;lamb-common&#x2F;tests&#x2F;test.py:6 in func01() | INFO | info</span><br><span class="line">2020-08-23_00:05:05 | G:&#x2F;lamb-common&#x2F;tests&#x2F;test.py:8 in func01() | ERROR | error</span><br><span class="line">2020-08-23_00:05:05 | G:&#x2F;lamb-common&#x2F;tests&#x2F;test.py:9 in func01() | WARNING | warning</span><br><span class="line">log saved at &#x2F;var&#x2F;log&#x2F;lamb_common&#x2F;lamb_common.log</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="lamb-common-0-0-3"><a href="#lamb-common-0-0-3" class="headerlink" title="lamb-common-0.0.3"></a>lamb-common-0.0.3</h4><ul><li><p>1 linux平台</p><ul><li>（1）vi /etc/lamb-common/log.conf 编辑log配置文件，默认文件如下，为lanb-common包本身提供的日志系统<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[lamb-common]</span><br><span class="line">name&#x3D;lamb-common</span><br><span class="line">path&#x3D;&#x2F;var&#x2F;log&#x2F;lamb-common&#x2F;</span><br><span class="line">console_level&#x3D;INFO</span><br><span class="line">file_level&#x3D;INFO</span><br><span class="line">fmt&#x3D;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s</span><br><span class="line">datafmt&#x3D;%Y-%m-%d_%H:%M:%S</span><br></pre></td></tr></table></figure></li><li>（2）例如在一个新的项目如demo_test中使用lamb-common提供的日志系统，只需要将上述配置复制一份，然后将lamb-common修改为demo_test即可，如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[lamb-common]</span><br><span class="line">name&#x3D;lamb-common</span><br><span class="line">path&#x3D;&#x2F;var&#x2F;log&#x2F;lamb-common&#x2F;</span><br><span class="line">console_level&#x3D;INFO</span><br><span class="line">file_level&#x3D;INFO</span><br><span class="line">fmt&#x3D;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s</span><br><span class="line">datafmt&#x3D;%Y-%m-%d_%H:%M:%S</span><br><span class="line">  </span><br><span class="line">[demo_test]</span><br><span class="line">name&#x3D;demo_test</span><br><span class="line">path&#x3D;&#x2F;var&#x2F;log&#x2F;demo_test&#x2F;</span><br><span class="line">console_level&#x3D;INFO</span><br><span class="line">file_level&#x3D;INFO</span><br><span class="line">fmt&#x3D;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s</span><br><span class="line">datafmt&#x3D;%Y-%m-%d_%H:%M:%S</span><br></pre></td></tr></table></figure></li><li>（3）然后在新的模块中直接写入下面三行，即可随意使用log进行打印日志了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from lamb_common.api.log import lamb_common_logger</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">log&#x3D;logging.getLogger(&quot;demo_test&quot;)</span><br></pre></td></tr></table></figure>实例如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from lamb_common.api.log import lamb_common_logger</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">log&#x3D;logging.getLogger(&quot;demo_test&quot;)</span><br><span class="line">def func01():</span><br><span class="line">    log.info(&quot;info&quot;)</span><br><span class="line">    log.debug(&quot;debug&quot;)</span><br><span class="line">    log.error(&quot;error&quot;)</span><br><span class="line">    log.warning(&quot;warning&quot;)</span><br><span class="line"></span><br><span class="line">func01()</span><br></pre></td></tr></table></figure>执行结果如下，且保存到日志文件 /var/log/demo_test/demo_test.log中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log saved at &#x2F;var&#x2F;log&#x2F;demo_test&#x2F;demo_test.log</span><br><span class="line">2020-08-22_23:59:16 | tests&#x2F;test.py:6 in func01() | INFO | info</span><br><span class="line">2020-08-22_23:59:16 | tests&#x2F;test.py:8 in func01() | ERROR | error</span><br><span class="line">2020-08-22_23:59:16 | tests&#x2F;test.py:9 in func01() | WARNING | warning</span><br></pre></td></tr></table></figure></li></ul></li><li><p>2 windows 平台<br> windows平台使用方式与linux平台基本是一致的，注意点主要有以下两点：</p><ul><li><p>配置文件在代码中，即 */site-packages/lamb_common/conf/log.conf</p></li><li><p>生成日志的路径在脚本所在的盘的根目录/var/log/lamb_common/lamb_common.log</p><p>例如如下测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from lamb_common.api.log import lamb_common_logger</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">log&#x3D;logging.getLogger(&quot;lamb_common&quot;)</span><br><span class="line">def func01():</span><br><span class="line">    log.info(&quot;info&quot;)</span><br><span class="line">    log.debug(&quot;debug&quot;)</span><br><span class="line">    log.error(&quot;error&quot;)</span><br><span class="line">    log.warning(&quot;warning&quot;)</span><br><span class="line"></span><br><span class="line">func01()</span><br></pre></td></tr></table></figure><p>执行结果如下，因为此例子测试代码再G盘，所以日志路径为 G:/var/log/lamb_common/lamb_common.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\Python38\python.exe G:&#x2F;lamb-common&#x2F;tests&#x2F;test.py</span><br><span class="line">2020-08-23_00:05:05 | G:&#x2F;lamb-common&#x2F;tests&#x2F;test.py:6 in func01() | INFO | info</span><br><span class="line">2020-08-23_00:05:05 | G:&#x2F;lamb-common&#x2F;tests&#x2F;test.py:8 in func01() | ERROR | error</span><br><span class="line">2020-08-23_00:05:05 | G:&#x2F;lamb-common&#x2F;tests&#x2F;test.py:9 in func01() | WARNING | warning</span><br><span class="line">log saved at &#x2F;var&#x2F;log&#x2F;lamb_common&#x2F;lamb_common.log</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="lamb-common-0-0-2"><a href="#lamb-common-0-0-2" class="headerlink" title="lamb-common-0.0.2"></a>lamb-common-0.0.2</h4><ul><li><p>1 linux平台</p><ul><li>（1）vi /etc/lamb-common/log.conf 编辑log配置文件，默认文件如下，为lanb-common包本身提供的日志系统<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[lamb-common]</span><br><span class="line">name&#x3D;lamb-common</span><br><span class="line">path&#x3D;&#x2F;var&#x2F;log&#x2F;lamb-common&#x2F;</span><br><span class="line">console_level&#x3D;INFO</span><br><span class="line">file_level&#x3D;INFO</span><br><span class="line">fmt&#x3D;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s</span><br><span class="line">datafmt&#x3D;%Y-%m-%d_%H:%M:%S</span><br></pre></td></tr></table></figure></li><li>（2）例如在一个新的项目如demo_test中使用lamb-common提供的日志系统，只需要将上述配置复制一份，然后将lamb-common修改为demo_test即可，如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[lamb-common]</span><br><span class="line">name&#x3D;lamb-common</span><br><span class="line">path&#x3D;&#x2F;var&#x2F;log&#x2F;lamb-common&#x2F;</span><br><span class="line">console_level&#x3D;INFO</span><br><span class="line">file_level&#x3D;INFO</span><br><span class="line">fmt&#x3D;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s</span><br><span class="line">datafmt&#x3D;%Y-%m-%d_%H:%M:%S</span><br><span class="line">  </span><br><span class="line">[demo_test]</span><br><span class="line">name&#x3D;demo_test</span><br><span class="line">path&#x3D;&#x2F;var&#x2F;log&#x2F;demo_test&#x2F;</span><br><span class="line">console_level&#x3D;INFO</span><br><span class="line">file_level&#x3D;INFO</span><br><span class="line">fmt&#x3D;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s</span><br><span class="line">datafmt&#x3D;%Y-%m-%d_%H:%M:%S</span><br></pre></td></tr></table></figure></li><li>（3）然后在新的模块中直接写入下面三行，即可随意使用log进行打印日志了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from lamb_common.lib.common.log.log import lamb_common_logger</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">log&#x3D;logging.getLogger(&quot;demo_test&quot;)</span><br></pre></td></tr></table></figure>实例如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from lamb_common.lib.common.log.log import lamb_common_logger</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">log&#x3D;logging.getLogger(&quot;demo_test&quot;)</span><br><span class="line">def func01():</span><br><span class="line">    log.info(&quot;info&quot;)</span><br><span class="line">    log.debug(&quot;debug&quot;)</span><br><span class="line">    log.error(&quot;error&quot;)</span><br><span class="line">    log.warning(&quot;warning&quot;)</span><br><span class="line"></span><br><span class="line">func01()</span><br></pre></td></tr></table></figure>执行结果如下，且保存到日志文件 /var/log/demo_test/demo_test.log中<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log saved at &#x2F;var&#x2F;log&#x2F;demo_test&#x2F;demo_test.log</span><br><span class="line">2020-08-22_23:59:16 | tests&#x2F;test.py:6 in func01() | INFO | info</span><br><span class="line">2020-08-22_23:59:16 | tests&#x2F;test.py:8 in func01() | ERROR | error</span><br><span class="line">2020-08-22_23:59:16 | tests&#x2F;test.py:9 in func01() | WARNING | warning</span><br></pre></td></tr></table></figure></li></ul></li><li><p>2 windows 平台<br> windows平台使用方式与linux平台基本是一致的，注意点主要有以下两点：</p><ul><li><p>配置文件在代码中，即 */site-packages/lamb_common/conf/log.conf</p></li><li><p>生成日志的路径在脚本所在的盘的根目录/var/log/lamb_common/lamb_common.log</p><p>例如如下测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from lamb_common.lib.common.log.log import lamb_common_logger</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">log&#x3D;logging.getLogger(&quot;lamb_common&quot;)</span><br><span class="line">def func01():</span><br><span class="line">    log.info(&quot;info&quot;)</span><br><span class="line">    log.debug(&quot;debug&quot;)</span><br><span class="line">    log.error(&quot;error&quot;)</span><br><span class="line">    log.warning(&quot;warning&quot;)</span><br><span class="line"></span><br><span class="line">func01()</span><br></pre></td></tr></table></figure><p>执行结果如下，因为此例子测试代码再G盘，所以日志路径为 G:/var/log/lamb_common/lamb_common.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\Python38\python.exe G:&#x2F;lamb-common&#x2F;tests&#x2F;test.py</span><br><span class="line">2020-08-23_00:05:05 | G:&#x2F;lamb-common&#x2F;tests&#x2F;test.py:6 in func01() | INFO | info</span><br><span class="line">2020-08-23_00:05:05 | G:&#x2F;lamb-common&#x2F;tests&#x2F;test.py:8 in func01() | ERROR | error</span><br><span class="line">2020-08-23_00:05:05 | G:&#x2F;lamb-common&#x2F;tests&#x2F;test.py:9 in func01() | WARNING | warning</span><br><span class="line">log saved at &#x2F;var&#x2F;log&#x2F;lamb_common&#x2F;lamb_common.log</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> lamb-common系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lamb-common系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(3)--python中常见内置类型</title>
      <link href="/blog/2020/08/17/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(3)--python%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/blog/2020/08/17/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(3)--python%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="1-对象三个特征"><a href="#1-对象三个特征" class="headerlink" title="1 对象三个特征"></a>1 对象三个特征</h4><ul><li>身份 ，可以通过id()获得</li><li>类型</li><li>值<h4 id="2-python中常见的内置类型"><a href="#2-python中常见的内置类型" class="headerlink" title="2 python中常见的内置类型"></a>2 python中常见的内置类型</h4></li><li>（1）None（全局唯一）</li><li>（2）数值<ul><li>int</li><li>float</li><li>complex</li><li>bool</li></ul></li><li>（3）序列类型<ul><li>list</li><li>bytes,bytearray,memoryview</li><li>range</li><li>tuple</li><li>str</li><li>array</li></ul></li><li>（4）迭代类型</li><li>（5）映射类型（dict）</li><li>（6）集合<ul><li>set</li><li>frozenset</li></ul></li><li>（7）上下文管理类型(with)</li><li>其他<ul><li>模块类型</li><li>class 和 实例</li><li>函数类型</li><li>方法类型</li><li>代码类型</li><li>object对象</li><li>type类型</li><li>ellipsis</li><li>notimplemented类型</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(2)--type、object和class的关系</title>
      <link href="/blog/2020/08/17/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(2)--type%E3%80%81object%E5%92%8Cclass%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/blog/2020/08/17/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(2)--type%E3%80%81object%E5%92%8Cclass%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="1-type类生成具体的类，具体的类则生成具体的实例，type-gt-int-gt-1-type-gt-str-gt-”abc”"><a href="#1-type类生成具体的类，具体的类则生成具体的实例，type-gt-int-gt-1-type-gt-str-gt-”abc”" class="headerlink" title="1 type类生成具体的类，具体的类则生成具体的实例，type-&gt;int-&gt;1,type-&gt;str-&gt;”abc”"></a>1 type类生成具体的类，具体的类则生成具体的实例，type-&gt;int-&gt;1,type-&gt;str-&gt;”abc”</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;100</span><br><span class="line">b&#x3D;&quot;hello world&quot;</span><br><span class="line">print(type(a))</span><br><span class="line">print(type(int))</span><br><span class="line">print(type(b))</span><br><span class="line">print(type(str))</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&lt;class &#39;type&#39;&gt;</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br><span class="line">&lt;class &#39;type&#39;&gt;</span><br></pre></td></tr></table></figure><h4 id="2-对于自定义类，对象由自定义的类生成的，而自定义的类同样也是由type生成的"><a href="#2-对于自定义类，对象由自定义的类生成的，而自定义的类同样也是由type生成的" class="headerlink" title="2 对于自定义类，对象由自定义的类生成的，而自定义的类同样也是由type生成的"></a>2 对于自定义类，对象由自定义的类生成的，而自定义的类同样也是由type生成的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">stu&#x3D;Student()</span><br><span class="line">print(type(stu))</span><br><span class="line">print(type(Student))</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;__main__.Student&#39;&gt;</span><br><span class="line">&lt;class &#39;type&#39;&gt;</span><br></pre></td></tr></table></figure><h4 id="3-object类是所有类的最顶层的基类"><a href="#3-object类是所有类的最顶层的基类" class="headerlink" title="3 object类是所有类的最顶层的基类"></a>3 object类是所有类的最顶层的基类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(int.__bases__)</span><br><span class="line">print(str.__bases__)</span><br><span class="line"></span><br><span class="line">class People:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Person(People):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(Person.__bases__)</span><br><span class="line">print(People.__bases__)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(&lt;class &#39;object&#39;&gt;,)</span><br><span class="line">(&lt;class &#39;object&#39;&gt;,)</span><br><span class="line">(&lt;class &#39;__main__.People&#39;&gt;,)</span><br><span class="line">(&lt;class &#39;object&#39;&gt;,)</span><br></pre></td></tr></table></figure><h4 id="4、object类是由type类实例化而来的，而type的基类又是object，而object的基类则为空"><a href="#4、object类是由type类实例化而来的，而type的基类又是object，而object的基类则为空" class="headerlink" title="4、object类是由type类实例化而来的，而type的基类又是object，而object的基类则为空"></a>4、object类是由type类实例化而来的，而type的基类又是object，而object的基类则为空</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(type(object))</span><br><span class="line">print(type.__bases__)</span><br><span class="line">print(object.__bases__)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;type&#39;&gt;</span><br><span class="line">(&lt;class &#39;object&#39;&gt;,)</span><br><span class="line">()</span><br></pre></td></tr></table></figure><h4 id="5-type，object-和class-的关系"><a href="#5-type，object-和class-的关系" class="headerlink" title="5 type，object 和class 的关系"></a>5 type，object 和class 的关系</h4><ul><li>object 是所有类的顶层基类</li><li>type 的基类也是object</li><li>object是type的实例</li><li>type 是 type的实例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">实例-------&gt;|</span><br><span class="line"> |         |</span><br><span class="line"> |         |&lt;---实例-----|     </span><br><span class="line"> |--------type        object&lt;--继承---|</span><br><span class="line">           |----继承----&gt;|            |</span><br><span class="line">           |                         |</span><br><span class="line">           |&lt;----------实例----------list</span><br><span class="line">           |&lt;----------实例----------str</span><br><span class="line">           |&lt;----------实例----------dict</span><br><span class="line">           |&lt;----------实例----------tuple</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式python系列(1)--设计模式简介</title>
      <link href="/blog/2020/08/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fpython%E7%B3%BB%E5%88%97(1)--%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/"/>
      <url>/blog/2020/08/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fpython%E7%B3%BB%E5%88%97(1)--%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="1-设计模式简介"><a href="#1-设计模式简介" class="headerlink" title="1 设计模式简介"></a>1 设计模式简介</h4><ul><li>设计模式（Design Pattern）是一套被反复使用，多数人知晓的，经过分类编目的、代码设计经验的总结</li><li>设计模式是为了可重用代码，让代码更容易被他人理解、保证代码可靠性</li><li>设计模式使代码编程真正的工程化，设计模式是软件工程的基石</li></ul><h4 id="2-设计模式的分类"><a href="#2-设计模式的分类" class="headerlink" title="2 设计模式的分类"></a>2 设计模式的分类</h4><ul><li>创建型模式<ul><li>简单工厂模式（Simple Factory）</li><li>工厂方法模式（Factory Method）</li><li>抽象工厂模式（Abstract Factory）</li><li>创建者模式（Builder）</li><li>原型模式（Prototype）</li><li>单例模式（Singleton）</li></ul></li><li>结构型模式<ul><li>外观模式（Facade）</li><li>适配器模式（Adapter）</li><li>代理模式（Proxy）</li><li>装饰模式（Decorator）</li><li>桥模式（Bridge）</li><li>组合模式（Composite）</li><li>享元模式（Flyweight）</li></ul></li><li>行为型模式<ul><li>模板方法模式（Template Method）</li><li>观察者模式（Observer）</li><li>状态模式（State）</li><li>策略模式（Strategy）</li><li>职责链模式（Chain of Responsibility）</li><li>命令模式（Command）</li><li>访问者模式（Visitor)</li><li>调停者模式（Mediator）</li><li>备忘录模式（Memento）</li><li>迭代器模式（Iterator）</li><li>解释器模式（Interpreter）<h4 id="3-设计模式的六大原则"><a href="#3-设计模式的六大原则" class="headerlink" title="3 设计模式的六大原则"></a>3 设计模式的六大原则</h4></li></ul></li><li>开闭原则(Open Close Principle)<ul><li>开闭原则就是对扩展开放，对修改关闭</li></ul></li><li>里氏代换原则(Liskow Substitution Principle)<ul><li>里氏代换原则是面向对象设计的基本原则之一，任何基类可以出现的地方，子类一定可以出现</li></ul></li><li>依赖倒转原则(Dependence Inversion Principle)<ul><li>只对接口编程，依赖于抽象而不依赖于具体</li></ul></li><li>接口隔离原则(Interface Segregation Principle)<ul><li>使用多个隔离的接口，比使用单个接口更好</li></ul></li><li>迪米特法则（最少知道原则）(Demeter Principle)<ul><li>一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立</li></ul></li><li>合成复用原则(Composite Reuse Principle)<ul><li>原则是尽量使用合成/聚合，尽量减少使用继承</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式python系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式python系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础知识超详细实战系列总结</title>
      <link href="/blog/2020/08/10/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%B6%85%E8%AF%A6%E7%BB%86%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/"/>
      <url>/blog/2020/08/10/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%B6%85%E8%AF%A6%E7%BB%86%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="python基础系列-1-–python简介"><a href="#python基础系列-1-–python简介" class="headerlink" title="python基础系列(1)–python简介"></a><a href="https://redrose2100.github.io/blog/2020/07/20/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--python%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">python基础系列(1)–python简介</a></h3><h3 id="python基础系列-2-–Python环境的安装-miniconda的使用"><a href="#python基础系列-2-–Python环境的安装-miniconda的使用" class="headerlink" title="python基础系列(2)–Python环境的安装-miniconda的使用"></a><a href="https://redrose2100.github.io/blog/2020/07/10/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--Python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-miniconda%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">python基础系列(2)–Python环境的安装-miniconda的使用</a></h3><h3 id="python基础系列-3-–python的基本类型-数字"><a href="#python基础系列-3-–python的基本类型-数字" class="headerlink" title="python基础系列(3)–python的基本类型-数字"></a><a href="https://redrose2100.github.io/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E6%95%B0%E5%AD%97/" target="_blank" rel="noopener">python基础系列(3)–python的基本类型-数字</a></h3><h3 id="python基础系列-4-–python的基本类型-字符串"><a href="#python基础系列-4-–python的基本类型-字符串" class="headerlink" title="python基础系列(4)–python的基本类型-字符串"></a><a href="https://redrose2100.github.io/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E4%B8%B2/" target="_blank" rel="noopener">python基础系列(4)–python的基本类型-字符串</a></h3><h3 id="python基础系列-5-–python的基本类型-列表"><a href="#python基础系列-5-–python的基本类型-列表" class="headerlink" title="python基础系列(5)–python的基本类型-列表"></a><a href="https://redrose2100.github.io/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%88%97%E8%A1%A8/" target="_blank" rel="noopener">python基础系列(5)–python的基本类型-列表</a></h3><h3 id="python基础系列-6-–python的基本类型-元组"><a href="#python基础系列-6-–python的基本类型-元组" class="headerlink" title="python基础系列(6)–python的基本类型-元组"></a><a href="https://redrose2100.github.io/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(6)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%85%83%E7%BB%84/" target="_blank" rel="noopener">python基础系列(6)–python的基本类型-元组</a></h3><h3 id="python基础系列-7-–python的基本类型-集合"><a href="#python基础系列-7-–python的基本类型-集合" class="headerlink" title="python基础系列(7)–python的基本类型-集合"></a><a href="https://redrose2100.github.io/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(7)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E9%9B%86%E5%90%88/" target="_blank" rel="noopener">python基础系列(7)–python的基本类型-集合</a></h3><h3 id="python基础系列-8-–python的基本类型-字典"><a href="#python基础系列-8-–python的基本类型-字典" class="headerlink" title="python基础系列(8)–python的基本类型-字典"></a><a href="https://redrose2100.github.io/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(8)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E5%85%B8/" target="_blank" rel="noopener">python基础系列(8)–python的基本类型-字典</a></h3>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(1)--python中的一切皆对象</title>
      <link href="/blog/2020/08/10/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(1)--python%E4%B8%AD%E7%9A%84%E4%B8%80%E5%88%87%E7%9A%86%E5%AF%B9%E8%B1%A1/"/>
      <url>/blog/2020/08/10/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(1)--python%E4%B8%AD%E7%9A%84%E4%B8%80%E5%88%87%E7%9A%86%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="1-python中一切皆对象，类和函数都是“一等公民”，其中一等公民的含义如下："><a href="#1-python中一切皆对象，类和函数都是“一等公民”，其中一等公民的含义如下：" class="headerlink" title="1 python中一切皆对象，类和函数都是“一等公民”，其中一等公民的含义如下："></a>1 python中一切皆对象，类和函数都是“一等公民”，其中一等公民的含义如下：</h4><ul><li>赋值给一个变量</li><li>可以增加到集合对象中</li><li>可以作为参数传递给参数</li><li>可以作为函数的返回值</li></ul><h4 id="2-下面用代码演示在python中类和函数都是一等公民"><a href="#2-下面用代码演示在python中类和函数都是一等公民" class="headerlink" title="2 下面用代码演示在python中类和函数都是一等公民"></a>2 下面用代码演示在python中类和函数都是一等公民</h4><ul><li><p>（1） 类和函数都可以进行赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 定义一个函数</span><br><span class="line">def func(name&#x3D;&quot;default&quot;):</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"># 函数赋值</span><br><span class="line">my_func&#x3D;func</span><br><span class="line">my_func(&quot;jack&quot;)</span><br><span class="line"></span><br><span class="line"># 定义一个类</span><br><span class="line">class Person:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&#39;person&#39;)</span><br><span class="line"></span><br><span class="line"># 类进行赋值</span><br><span class="line">MyPerson&#x3D;Person</span><br><span class="line">p&#x3D;MyPerson()</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jack</span><br><span class="line">person</span><br></pre></td></tr></table></figure></li><li><p>（2）类和函数都可以加到列表中去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个函数</span><br><span class="line">def func(name&#x3D;&quot;default&quot;):</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"># 定义一个类</span><br><span class="line">class Person:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&#39;person&#39;)</span><br><span class="line"></span><br><span class="line"># 定义一个列表</span><br><span class="line">obj_list&#x3D;[]</span><br><span class="line"># 函数和类可以加到列表中</span><br><span class="line">obj_list.append(func)</span><br><span class="line">obj_list.append(Person)</span><br><span class="line">for item in obj_list:</span><br><span class="line">    item()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">default</span><br><span class="line">person</span><br></pre></td></tr></table></figure></li><li><p>（3）类和函数都可以作为参数传入函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个函数</span><br><span class="line">def func(name&#x3D;&quot;default&quot;):</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"># 定义一个类</span><br><span class="line">class Person:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&#39;person&#39;)</span><br><span class="line"></span><br><span class="line"># 定义一个执行函数，参数为一个函数</span><br><span class="line">def run(func):</span><br><span class="line">    print(&quot;begin to run func&quot;)</span><br><span class="line">    func()</span><br><span class="line">    print(&quot;finish running func...&quot;)</span><br><span class="line"></span><br><span class="line">run(func)</span><br><span class="line">run(Person)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">begin to run func</span><br><span class="line">default</span><br><span class="line">finish running func...</span><br><span class="line">begin to run func</span><br><span class="line">person</span><br><span class="line">finish running func...</span><br></pre></td></tr></table></figure></li><li><p>（4）类和函数都可以作为函数的返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 函数作为函数的返回值</span><br><span class="line">def func_01():</span><br><span class="line">    def func():</span><br><span class="line">        print(&quot;jack&quot;)</span><br><span class="line">    return func</span><br><span class="line"></span><br><span class="line"># 类作为函数的返回值</span><br><span class="line">def func_02():</span><br><span class="line">    class Person():</span><br><span class="line">        def __init__(self):</span><br><span class="line">            print(&quot;person&quot;)</span><br><span class="line">    return Person</span><br><span class="line"></span><br><span class="line">f&#x3D;func_01()</span><br><span class="line">f()</span><br><span class="line">p&#x3D;func_02()</span><br><span class="line">p()</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jack</span><br><span class="line">person</span><br></pre></td></tr></table></figure><p>总结：在python中，函数和类都和普通的变量一样，都可以赋值，加到列表中，也可以作为函数的参数传入函数，也可以作为函数的返回值返回</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest自动化测试框架超详细实战系列总结</title>
      <link href="/blog/2020/08/10/pytest%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E8%B6%85%E8%AF%A6%E7%BB%86%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/"/>
      <url>/blog/2020/08/10/pytest%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E8%B6%85%E8%AF%A6%E7%BB%86%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="pytest系列-1-–安装以及快速入门"><a href="#pytest系列-1-–安装以及快速入门" class="headerlink" title="pytest系列(1)–安装以及快速入门"></a><a href="https://redrose2100.github.io/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(1)--%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">pytest系列(1)–安装以及快速入门</a></h3><h3 id="pytest系列-2-–测试用例的组织及运行"><a href="#pytest系列-2-–测试用例的组织及运行" class="headerlink" title="pytest系列(2)–测试用例的组织及运行"></a><a href="https://redrose2100.github.io/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(2)--%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%BB%84%E7%BB%87%E5%8F%8A%E8%BF%90%E8%A1%8C/" target="_blank" rel="noopener">pytest系列(2)–测试用例的组织及运行</a></h3><h3 id="pytest系列-3-–断言的使用"><a href="#pytest系列-3-–断言的使用" class="headerlink" title="pytest系列(3)–断言的使用"></a><a href="https://redrose2100.github.io/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(3)--%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">pytest系列(3)–断言的使用</a></h3><h3 id="pytest系列-4-–setup与teardown"><a href="#pytest系列-4-–setup与teardown" class="headerlink" title="pytest系列(4)–setup与teardown"></a><a href="https://redrose2100.github.io/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(4)--setup%E4%B8%8Eteardown/" target="_blank" rel="noopener">pytest系列(4)–setup与teardown</a></h3><h3 id="pytest系列-5-–fixture详解"><a href="#pytest系列-5-–fixture详解" class="headerlink" title="pytest系列(5)–fixture详解"></a><a href="https://redrose2100.github.io/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(5)--fixture%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">pytest系列(5)–fixture详解</a></h3><h3 id="pytest系列-6-–skip和skipif详解"><a href="#pytest系列-6-–skip和skipif详解" class="headerlink" title="pytest系列(6)–skip和skipif详解"></a><a href="https://redrose2100.github.io/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(6)--skip%E5%92%8Cskipif%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">pytest系列(6)–skip和skipif详解</a></h3><h3 id="pytest系列-7-–parametrize参数化详解"><a href="#pytest系列-7-–parametrize参数化详解" class="headerlink" title="pytest系列(7)–parametrize参数化详解"></a><a href="https://redrose2100.github.io/blog/2020/08/10/pytest%E7%B3%BB%E5%88%97(7)--parametrize%E5%8F%82%E6%95%B0%E5%8C%96%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">pytest系列(7)–parametrize参数化详解</a></h3><h3 id="pytest系列-8-–repeat插件详解"><a href="#pytest系列-8-–repeat插件详解" class="headerlink" title="pytest系列(8)–repeat插件详解"></a><a href="https://redrose2100.github.io/blog/2020/08/10/pytest%E7%B3%BB%E5%88%97(8)--repeat%E6%8F%92%E4%BB%B6%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">pytest系列(8)–repeat插件详解</a></h3>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(8)--repeat插件详解</title>
      <link href="/blog/2020/08/10/pytest%E7%B3%BB%E5%88%97(8)--repeat%E6%8F%92%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/10/pytest%E7%B3%BB%E5%88%97(8)--repeat%E6%8F%92%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-安装pytest-repeat插件"><a href="#1-安装pytest-repeat插件" class="headerlink" title="1 安装pytest-repeat插件"></a>1 安装pytest-repeat插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pip install pytest-repeat</span><br><span class="line">Collecting pytest-repeat</span><br><span class="line">  Downloading pytest_repeat-0.8.0-py2.py3-none-any.whl (4.2 kB)</span><br><span class="line">Requirement already satisfied: pytest&gt;&#x3D;3.6 in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest-repeat) (5.4.3)</span><br><span class="line">Requirement already satisfied: colorama; sys_platform &#x3D;&#x3D; &quot;win32&quot; in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (0.4.3)</span><br><span class="line">Requirement already satisfied: pluggy&lt;1.0,&gt;&#x3D;0.12 in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (0.13.1)</span><br><span class="line">Requirement already satisfied: packaging in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (20.4)</span><br><span class="line">Requirement already satisfied: more-itertools&gt;&#x3D;4.0.0 in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (8.4.0)</span><br><span class="line">Requirement already satisfied: py&gt;&#x3D;1.5.0 in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (1.9.0)</span><br><span class="line">Requirement already satisfied: attrs&gt;&#x3D;17.4.0 in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (19.3.0)</span><br><span class="line">Requirement already satisfied: atomicwrites&gt;&#x3D;1.0; sys_platform &#x3D;&#x3D; &quot;win32&quot; in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (1.4.0)</span><br><span class="line">Requirement already satisfied: wcwidth in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (0.2.5)</span><br><span class="line">Requirement already satisfied: pyparsing&gt;&#x3D;2.0.2 in d:\miniconda\envs\pytestenv\lib\site-packages (from packaging-&gt;pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (2.4.7)</span><br><span class="line">Requirement already satisfied: six in d:\miniconda\envs\pytestenv\lib\site-packages (from packaging-&gt;pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (1.15.0)</span><br><span class="line">Installing collected packages: pytest-repeat</span><br><span class="line">Successfully installed pytest-repeat-0.8.0</span><br></pre></td></tr></table></figure><h4 id="2-使用-pytest-s-–count-3-命令可以重复执行-不管结果成功还是失败"><a href="#2-使用-pytest-s-–count-3-命令可以重复执行-不管结果成功还是失败" class="headerlink" title="2 使用 pytest -s –count=3 命令可以重复执行,不管结果成功还是失败"></a>2 使用 pytest -s –count=3 命令可以重复执行,不管结果成功还是失败</h4><p>test_example.py中编写如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def test_01():</span><br><span class="line">    assert 1&#x3D;&#x3D;1</span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    assert 1&#x3D;&#x3D;2</span><br></pre></td></tr></table></figure><p>重复执行的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s --count&#x3D;3</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ...FFF</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_____________________________________________________________________________ test_02[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">_____________________________________________________________________________ test_02[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">_____________________________________________________________________________ test_02[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_02[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_02[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_02[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 failed, 3 passed in 0.24s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="3-使用-pytest-s-–count-3-x-命令可以重复执行，直到失败位置，如果执行满三次了还没有失败，也不再继续了"><a href="#3-使用-pytest-s-–count-3-x-命令可以重复执行，直到失败位置，如果执行满三次了还没有失败，也不再继续了" class="headerlink" title="3 使用 pytest -s –count=3 -x 命令可以重复执行，直到失败位置，如果执行满三次了还没有失败，也不再继续了"></a>3 使用 pytest -s –count=3 -x 命令可以重复执行，直到失败位置，如果执行满三次了还没有失败，也不再继续了</h4><p>test_example.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def test_01():</span><br><span class="line">    assert 1&#x3D;&#x3D;1</span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    assert 1&#x3D;&#x3D;2</span><br></pre></td></tr></table></figure><p>使用如下命令执行：test_02因为第一次就失败了，所以不再继续执行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s --count&#x3D;3 -x</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s --count&#x3D;3 -x</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ...F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_____________________________________________________________________________ test_02[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:6: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_02[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 3 passed in 0.18s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="4-使用装饰器标记重复执行的次数"><a href="#4-使用装饰器标记重复执行的次数" class="headerlink" title="4 使用装饰器标记重复执行的次数"></a>4 使用装饰器标记重复执行的次数</h4><p>在test_example.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    assert 1&#x3D;&#x3D;1</span><br><span class="line"></span><br><span class="line">@pytest.mark.repeat(3)</span><br><span class="line">def test_02():</span><br><span class="line">    assert 1&#x3D;&#x3D;2</span><br></pre></td></tr></table></figure><p>此时执行只需要使用 pytest -s即可，运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 4 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .FFF</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_____________________________________________________________________________ test_02[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    @pytest.mark.repeat(3)</span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:8: AssertionError</span><br><span class="line">_____________________________________________________________________________ test_02[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    @pytest.mark.repeat(3)</span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:8: AssertionError</span><br><span class="line">_____________________________________________________________________________ test_02[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    @pytest.mark.repeat(3)</span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:8: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_02[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_02[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_02[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 failed, 1 passed in 0.19s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="5-重复执行类，只需要在类上加上装饰器即可"><a href="#5-重复执行类，只需要在类上加上装饰器即可" class="headerlink" title="5 重复执行类，只需要在类上加上装饰器即可"></a>5 重复执行类，只需要在类上加上装饰器即可</h4><p>test_example.py 中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.mark.repeat(3)</span><br><span class="line">class TestExample():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        assert 1&#x3D;&#x3D;1</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        assert 1&#x3D;&#x3D;2</span><br></pre></td></tr></table></figure><p>使用pytest -s执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ...FFF</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_______________________________________________________________________ TestExample.test_02[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x00000239A98BC370&gt;</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;3</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 3</span><br><span class="line"></span><br><span class="line">test_example.py:9: AssertionError</span><br><span class="line">_______________________________________________________________________ TestExample.test_02[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x00000239A98CB6D0&gt;</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;3</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 3</span><br><span class="line"></span><br><span class="line">test_example.py:9: AssertionError</span><br><span class="line">_______________________________________________________________________ TestExample.test_02[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x00000239A98CBAC0&gt;</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;3</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 3</span><br><span class="line"></span><br><span class="line">test_example.py:9: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::TestExample::test_02[1-3] - assert 1 &#x3D;&#x3D; 3</span><br><span class="line">FAILED test_example.py::TestExample::test_02[2-3] - assert 1 &#x3D;&#x3D; 3</span><br><span class="line">FAILED test_example.py::TestExample::test_02[3-3] - assert 1 &#x3D;&#x3D; 3</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 failed, 3 passed in 0.23s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="6-pytest-命令行可通过-–repeat-scope指定重复执行的单元，可选值有：session，module，class，function"><a href="#6-pytest-命令行可通过-–repeat-scope指定重复执行的单元，可选值有：session，module，class，function" class="headerlink" title="6 pytest 命令行可通过 –repeat-scope指定重复执行的单元，可选值有：session，module，class，function"></a>6 pytest 命令行可通过 –repeat-scope指定重复执行的单元，可选值有：session，module，class，function</h4><ul><li>(1) function（默认）范围针对每个用例重复执行，再执行下一个用例</li><li>(2) class 以class为用例集合单位，重复执行class里面的用例，再执行下一个</li><li>(3) module 以模块为单位，重复执行模块里面的用例，再执行下一个</li><li>(4) session 重复整个测试会话，即所有收集的测试执行一次，然后所有这些测试再次执行等等</li></ul><p>创建如下结构的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_demo</span><br><span class="line">    |----test_example.py</span><br><span class="line">    |----test_example_02.py</span><br></pre></td></tr></table></figure><p>在两个py文件中都编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_001():</span><br><span class="line">    assert 1&#x3D;&#x3D;1</span><br><span class="line"></span><br><span class="line">def test_002():</span><br><span class="line">    assert 1&#x3D;&#x3D;2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample():</span><br><span class="line">    def test_003(self):</span><br><span class="line">        assert 3&#x3D;&#x3D;3</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">        assert 3&#x3D;&#x3D;4</span><br></pre></td></tr></table></figure><p>pytest -s –count=3 –repeat-scope=function 运行的结果如下，每个函数都运行三次后在进行下一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s --count&#x3D;3 --repeat-scope&#x3D;function</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 24 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py ...FFF...FFF</span><br><span class="line">test_example_02.py ...FFF...FFF</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001DD9BD0E730&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001DD9BCFBDF0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001DD9BCFB460&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001DD9BD2E7C0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001DD9BD9F6A0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001DD9BD16DC0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 12 failed, 12 passed in 0.34s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>pytest -s –count=3 –repeat-scope=class 运行结果如下，以类为单位进行重复执行3此，然后执行下一个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s --count&#x3D;3 --repeat-scope&#x3D;class</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 24 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py .F.F.F.F.F.F</span><br><span class="line">test_example_02.py .F.F.F.F.F.F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001DAE249AB50&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001DAE24B0430&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001DAE24B0FA0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001DAE24C30A0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001DAE24C3F70&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001DAE24BD1C0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 12 failed, 12 passed in 0.26s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>pytest -s –count=3 –repeat-scope=module运行结果如下：以模块为单位进行重复执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 24 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py .F.F.F.F.F.F</span><br><span class="line">test_example_02.py .F.F.F.F.F.F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001C76ED3D760&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001C76ED74D90&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001C76ED74D00&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001C76ED9D2E0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001C76ED7D850&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001C76ED9D9A0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 12 failed, 12 passed in 0.28s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>pytest -s –count=3 –repeat-scope=session 运行结果如下，以整个测试过程为单位重复执行3此</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s --count&#x3D;3 --repeat-scope&#x3D;session</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 24 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py .F.F</span><br><span class="line">test_example_02.py .F.F</span><br><span class="line">test_example.py .F.F</span><br><span class="line">test_example_02.py .F.F</span><br><span class="line">test_example.py .F.F</span><br><span class="line">test_example_02.py .F.F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x0000018975001730&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001897504FD60&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001897504F130&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x0000018975060100&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001897505EC10&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001897505E670&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 12 failed, 12 passed in 0.27s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(7)--parametrize参数化详解</title>
      <link href="/blog/2020/08/10/pytest%E7%B3%BB%E5%88%97(7)--parametrize%E5%8F%82%E6%95%B0%E5%8C%96%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/10/pytest%E7%B3%BB%E5%88%97(7)--parametrize%E5%8F%82%E6%95%B0%E5%8C%96%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-parametrize参数化实质上是DDT，即数据驱动测试，下面首先看下不用数据驱动的方式"><a href="#1-parametrize参数化实质上是DDT，即数据驱动测试，下面首先看下不用数据驱动的方式" class="headerlink" title="1 parametrize参数化实质上是DDT，即数据驱动测试，下面首先看下不用数据驱动的方式"></a>1 parametrize参数化实质上是DDT，即数据驱动测试，下面首先看下不用数据驱动的方式</h4><p>在test_example.py 文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def add(a,b):</span><br><span class="line">    return (a+b)</span><br><span class="line"></span><br><span class="line">def test_1():</span><br><span class="line">    assert add(3,5)&#x3D;&#x3D;8</span><br><span class="line"></span><br><span class="line">def test_2():</span><br><span class="line">    assert add(2,4)&#x3D;&#x3D;7</span><br><span class="line"></span><br><span class="line">def test_3():</span><br><span class="line">    assert add(5,7)&#x3D;&#x3D;12</span><br></pre></td></tr></table></figure><p>使用pytest -s 执行结果如下：两个通过，一个失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .F.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">________________________________________________________________________________ test_2 ________________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_2():</span><br><span class="line">&gt;       assert add(2,4)&#x3D;&#x3D;7</span><br><span class="line">E       assert 6 &#x3D;&#x3D; 7</span><br><span class="line">E        +  where 6 &#x3D; add(2, 4)</span><br><span class="line"></span><br><span class="line">test_example.py:11: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_2 - assert 6 &#x3D;&#x3D; 7</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 2 passed in 0.16s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="2-上述代码中，存在大量重复代码，实质每个测试用例的功能是一样的，只不过是每次的参数不一样，此时就使用数据驱动测试的方式，在pytest中即parametrize参数化"><a href="#2-上述代码中，存在大量重复代码，实质每个测试用例的功能是一样的，只不过是每次的参数不一样，此时就使用数据驱动测试的方式，在pytest中即parametrize参数化" class="headerlink" title="2 上述代码中，存在大量重复代码，实质每个测试用例的功能是一样的，只不过是每次的参数不一样，此时就使用数据驱动测试的方式，在pytest中即parametrize参数化"></a>2 上述代码中，存在大量重复代码，实质每个测试用例的功能是一样的，只不过是每次的参数不一样，此时就使用数据驱动测试的方式，在pytest中即parametrize参数化</h4><p>请看如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def add(a,b):</span><br><span class="line">    return (a+b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&quot;a,b,c&quot;,[(3,5,8),(2,4,7),(5,7,12)])</span><br><span class="line">def test_1(a,b,c):</span><br><span class="line">    assert add(a,b)&#x3D;&#x3D;c</span><br></pre></td></tr></table></figure><p>使用pytest -s执行结果如下：这里虽然只写了一个test函数，但是结果仍然显示三个用例，是因为参数化的时候填写了三个元组的数据，这就是参数化，其实叫数据驱动可能更好理解一些，这样可以节省大量的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .F.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_1[2-4-7] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">a &#x3D; 2, b &#x3D; 4, c &#x3D; 7</span><br><span class="line"></span><br><span class="line">    @pytest.mark.parametrize(&quot;a,b,c&quot;,[(3,5,8),(2,4,7),(5,7,12)])</span><br><span class="line">    def test_1(a,b,c):</span><br><span class="line">&gt;       assert add(a,b)&#x3D;&#x3D;c</span><br><span class="line">E       assert 6 &#x3D;&#x3D; 7</span><br><span class="line">E        +  where 6 &#x3D; add(2, 4)</span><br><span class="line"></span><br><span class="line">test_example.py:9: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_1[2-4-7] - assert 6 &#x3D;&#x3D; 7</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 2 passed in 0.16s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="3-参数化功能在参数需要组合所有情况的时候，只需要将参数化叠加起来即可"><a href="#3-参数化功能在参数需要组合所有情况的时候，只需要将参数化叠加起来即可" class="headerlink" title="3 参数化功能在参数需要组合所有情况的时候，只需要将参数化叠加起来即可"></a>3 参数化功能在参数需要组合所有情况的时候，只需要将参数化叠加起来即可</h4><p>请看如下代码：表示a可以取值2,4,6，而b可以取值1,3,5，而在执行测试用例的时候是将a，b全部可能的值组合起来的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&quot;a&quot;,[2,4,6])</span><br><span class="line">@pytest.mark.parametrize(&quot;b&quot;,[1,3,5])</span><br><span class="line">def test_1(a,b):</span><br><span class="line">    print(a,b)</span><br></pre></td></tr></table></figure><p>使用pytest -s执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 9 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py 2 1</span><br><span class="line">.4 1</span><br><span class="line">.6 1</span><br><span class="line">.2 3</span><br><span class="line">.4 3</span><br><span class="line">.6 3</span><br><span class="line">.2 5</span><br><span class="line">.4 5</span><br><span class="line">.6 5</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 9 passed in 0.07s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="4-当参数化应用在类上时，则此时类的所有测试方法都将使用参数化中的变量"><a href="#4-当参数化应用在类上时，则此时类的所有测试方法都将使用参数化中的变量" class="headerlink" title="4 当参数化应用在类上时，则此时类的所有测试方法都将使用参数化中的变量"></a>4 当参数化应用在类上时，则此时类的所有测试方法都将使用参数化中的变量</h4><p>如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&quot;a,b&quot;,[(1,2),(3,4),(5,6)])</span><br><span class="line">class TestExample(object):</span><br><span class="line">    </span><br><span class="line">    def test_01(self,a,b):</span><br><span class="line">        print(a,b)</span><br><span class="line">        </span><br><span class="line">    def test_02(self,a,b):</span><br><span class="line">        print(b,a)</span><br></pre></td></tr></table></figure><p>使用pytest -s执行结果如下，显示运行了6个用例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py 1 2</span><br><span class="line">.3 4</span><br><span class="line">.5 6</span><br><span class="line">.2 1</span><br><span class="line">.4 3</span><br><span class="line">.6 5</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="5-在使用参数化的过程中也可以使用标记，比如标记为fail或者skip"><a href="#5-在使用参数化的过程中也可以使用标记，比如标记为fail或者skip" class="headerlink" title="5 在使用参数化的过程中也可以使用标记，比如标记为fail或者skip"></a>5 在使用参数化的过程中也可以使用标记，比如标记为fail或者skip</h4><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&quot;a,b&quot;,[(1,2),(3,4),pytest.param(5,6,marks&#x3D;pytest.mark.xfail),pytest.param(7,8,marks&#x3D;pytest.mark.skip)])</span><br><span class="line">class TestExample(object):</span><br><span class="line"></span><br><span class="line">    def test_01(self,a,b):</span><br><span class="line">        print(a,b)</span><br></pre></td></tr></table></figure><p>使用pytest -s执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 4 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py 1 2</span><br><span class="line">.3 4</span><br><span class="line">.5 6</span><br><span class="line">Xs</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed, 1 skipped, 1 xpassed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(6)--skip和skipif详解</title>
      <link href="/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(6)--skip%E5%92%8Cskipif%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(6)--skip%E5%92%8Cskipif%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-测试用例中函数级跳过"><a href="#1-测试用例中函数级跳过" class="headerlink" title="1 测试用例中函数级跳过"></a>1 测试用例中函数级跳过</h4><p>在函数上面加一个@pytest.mark.skip()装饰器即表示此函数所代表的测试用例不再执行，skip函数可以指定一个reason的参数，表示跳过此用例的原因，同样skipif函数则表示通过判断一定的条件，满足条件时则跳过此用例，skipif第二个参数同样是reason表示跳过的原因</p><p>在test_example.py编写如下代码，在类外和类中的函数分表增加skip和skipif装饰器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skip()</span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skip(reason&#x3D;&quot;功能暂时不支持&quot;)</span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;1,reason&#x3D;&quot;跳过，测试skipif的功能是否生效&quot;)</span><br><span class="line">def test_04():</span><br><span class="line">    print(&quot;in test_04&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;2,reason&#x3D;&quot;跳过，测试skipif的功能是否生效&quot;)</span><br><span class="line">def test_05():</span><br><span class="line">    print(&quot;in test_05&quot;)</span><br><span class="line"></span><br><span class="line">def test_06():</span><br><span class="line">    print(&quot;in test_06&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    @pytest.mark.skip()</span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample.test_02&quot;)</span><br><span class="line"></span><br><span class="line">    @pytest.mark.skip(reason&#x3D;&quot;功能暂时不支持&quot;)</span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;in TestExample.test_03&quot;)</span><br><span class="line"></span><br><span class="line">    @pytest.mark.skipif(1 &#x3D;&#x3D; 1, reason&#x3D;&quot;跳过，测试skipif的功能是否生效&quot;)</span><br><span class="line">    def test_04(self):</span><br><span class="line">        print(&quot;in TestExample.test_04&quot;)</span><br><span class="line"></span><br><span class="line">    @pytest.mark.skipif(1 &#x3D;&#x3D; 2, reason&#x3D;&quot;跳过，测试skipif的功能是否生效&quot;)</span><br><span class="line">    def test_05(self):</span><br><span class="line">        print(&quot;in TestExample.test_05&quot;)</span><br><span class="line"></span><br><span class="line">    def test_06(self):</span><br><span class="line">        print(&quot;in TestExample.test_06&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中terminal中执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下，和上述分析预期一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 12 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py in test_01</span><br><span class="line">.sssin test_05</span><br><span class="line">.in test_06</span><br><span class="line">.in TestExample.test_01</span><br><span class="line">.sssin TestExample.test_05</span><br><span class="line">.in TestExample.test_06</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed, 6 skipped in 0.07s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="2-测试用例中跳过测试类"><a href="#2-测试用例中跳过测试类" class="headerlink" title="2 测试用例中跳过测试类"></a>2 测试用例中跳过测试类</h4><p>跳过类中skip和skipif的用法不变，唯一改变的就是将skip或者skipif的装饰器放到要跳过的类的上面</p><p>在test_example.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample01():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skip(&quot;跳过测试类&quot;)</span><br><span class="line">class TestExample02():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample02.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample02.test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;1,reason&#x3D;&quot;跳过测试类&quot;)</span><br><span class="line">class TestExample03():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample03.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample03.test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;2,reason&#x3D;&quot;跳过测试类&quot;)</span><br><span class="line">class TestExample04():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample04.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample04.test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中terminal中执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下，和上述分析预期一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 10 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py in test_01</span><br><span class="line">.in test_02</span><br><span class="line">.in TestExample01.test_01</span><br><span class="line">.in TestExample01.test_02</span><br><span class="line">.ssssin TestExample04.test_01</span><br><span class="line">.in TestExample04.test_02</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed, 4 skipped in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="3-在测试用例中跳过测试模块"><a href="#3-在测试用例中跳过测试模块" class="headerlink" title="3 在测试用例中跳过测试模块"></a>3 在测试用例中跳过测试模块</h4><p>skip和skipif跳过模块和跳过类以及函数略有区别，跳过模块即跳过文件，很简单，只需要在当前文件中增加如下一行即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytestmark&#x3D;pytest.mark.skip(reason&#x3D;&quot;跳过模块&quot;)</span><br></pre></td></tr></table></figure><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ex_023</span><br><span class="line">   |----test_ex_01.py</span><br><span class="line">   |----test_ex_02.py</span><br><span class="line">   |----test_ex_03.py</span><br></pre></td></tr></table></figure><p>其中在test_ex_01.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample01():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br></pre></td></tr></table></figure><p>test_ex_02.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">pytestmark&#x3D;pytest.mark.skip(reason&#x3D;&quot;跳过模块&quot;)</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample01():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br></pre></td></tr></table></figure><p>test_ex03.py文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">pytestmark&#x3D;pytest.mark.skipif(1&#x3D;&#x3D;1,reason&#x3D;&quot;跳过模块&quot;)</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample01():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中的terminal中切入到ex_023目录下，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_023&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_023</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 12 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_ex_01.py in test_01</span><br><span class="line">.in test_02</span><br><span class="line">.in TestExample01.test_01</span><br><span class="line">.in TestExample01.test_02</span><br><span class="line">.</span><br><span class="line">test_ex_02.py ssss</span><br><span class="line">test_ex_03.py ssss</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 4 passed, 8 skipped in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="4-skip-skipif-嵌套使用"><a href="#4-skip-skipif-嵌套使用" class="headerlink" title="4 skip skipif 嵌套使用"></a>4 skip skipif 嵌套使用</h4><p>pytest 的skip/skipif在跳过模块，跳过类，跳过函数这个三个层级是可以嵌套使用的，嵌套使用的规则就是只要有一个是真，则执行跳过操作</p><p>在test_example.py编写如下在代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"># 因为1！&#x3D;2 ，所以这个跳过不会生效</span><br><span class="line">pytestmark&#x3D;pytest.mark.skipif(1&#x3D;&#x3D;2,reason&#x3D;&quot;跳过模块&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 因为没有skip生效，所以此用例会执行</span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"># 因为这个函数层级的skiif中1&#x3D;&#x3D;1为真，所以skip会生效，即不会执行此用例</span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;1,reason&#x3D;&quot;跳过test_02&quot;)</span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 此类没有类层级的skip</span><br><span class="line">class TestExample01():</span><br><span class="line">    # 因为函数层级的skip为真，会跳过</span><br><span class="line">    @pytest.mark.skipif(2&#x3D;&#x3D;2,reaon&#x3D;&quot;跳过test_01&quot;)</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br><span class="line"></span><br><span class="line">#因为类层级的skip会生效，所以这个类中的所有测试函数都不会执行</span><br><span class="line">@pytest.mark.skip(&quot;跳过TestExample02类&quot;)</span><br><span class="line">class TestExample02():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample02.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample02.test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中的terminal中切入到test_example.py目录中，然后执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py in test_01</span><br><span class="line">.ssin TestExample01.test_02</span><br><span class="line">.ss</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed, 4 skipped in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(5)--fixture详解</title>
      <link href="/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(5)--fixture%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(5)--fixture%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-fixture功能一：fixture的函数名作为测试用例函数的一个参数，实际返回的是fixture的返回值，并不是函数本身"><a href="#1-fixture功能一：fixture的函数名作为测试用例函数的一个参数，实际返回的是fixture的返回值，并不是函数本身" class="headerlink" title="1 fixture功能一：fixture的函数名作为测试用例函数的一个参数，实际返回的是fixture的返回值，并不是函数本身"></a>1 fixture功能一：fixture的函数名作为测试用例函数的一个参数，实际返回的是fixture的返回值，并不是函数本身</h4><p>在test_example.py中编写如下代码,func函数被一个装饰器修饰为fixture方法，则在测试用例test_01和test_03中想使用func这个函数的返回值，则只需要将func函数名放入test_01和test_03,而测试用例test_02中并不想使用func的返回值，则测试用例test_02的入参中无需放入func函数名</p><p>如此以来，在测试用例test_01和test_03中就可以直接使用func的返回值了，而且在测试用例中，func这个函数名就代表的是func函数的返回值，比如这里在test_01和test_03中的func其实就是func函数中的返回的obj即一个字典</p><p>这里需要切记的是，在测试用例test_01和测试用例test_03中，func并不是指func这个函数，而是是func这个函数的返回值，这一点需要格外注意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def func():</span><br><span class="line">    obj&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">    return obj</span><br><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;\nin test_01&quot;)</span><br><span class="line">    for key,value in func.items():</span><br><span class="line">        print(key,value)</span><br><span class="line">        </span><br><span class="line">def test_02():</span><br><span class="line">    pritn(&quot;in test_02&quot;)</span><br><span class="line">    </span><br><span class="line">def test_03(func):</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br><span class="line">    print(type(func))</span><br></pre></td></tr></table></figure><p>运行结果如下：结果与上述分析一致，在test_01和test_03中，func的值就是func函数的返回值obj，即字典，而在test_02中，因为测试用例中的函数中没有将func加入到参数列表中，所以不会感知到func的存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in test_01</span><br><span class="line">a 1</span><br><span class="line">b 2</span><br><span class="line">c 3</span><br><span class="line">.in test_02</span><br><span class="line">.in test_03</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.31s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="2-fixture-功能之二：提供灵活的类似setup与teardown的功能"><a href="#2-fixture-功能之二：提供灵活的类似setup与teardown的功能" class="headerlink" title="2 fixture 功能之二：提供灵活的类似setup与teardown的功能"></a>2 fixture 功能之二：提供灵活的类似setup与teardown的功能</h4><p>pytest的fixture另一个强大的功能就是在函数执行前后增加操作，类似setup和teardown操作，但是比setup和teardown的操作更加灵活</p><p>具体使用方式是同样定义一个函数，然后用装饰器标记为fixture，然后在此函数中使用一个yield语句，yield语句之前的就会在测试用例之前使用，yield之后的语句就会在测试用例执行完成之后再执行</p><p>在test_example.py文件中编写如下代码，实现一个fixture函数func，这里面有一个yield语句，它上面的都会在测试用例执行之前执行，它下面的会在测试用例执行之后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;run before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;run after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line">    </span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line">    </span><br><span class="line">def test_03(func):</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br></pre></td></tr></table></figure><p>运行结果如下：运行结果与分析一致，其中test_02这个测试用例的入参中没有设置func的参数，所以不会调用func的fixture功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py run before testcase......</span><br><span class="line">in test_01</span><br><span class="line">.run after testcase......</span><br><span class="line">in test_02</span><br><span class="line">.run before testcase......</span><br><span class="line">in test_03</span><br><span class="line">.run after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="3-fixture-作用范围之function"><a href="#3-fixture-作用范围之function" class="headerlink" title="3 fixture 作用范围之function"></a>3 fixture 作用范围之function</h4><p>在定义fuxture函数的时候，可以使用scope来定义fixture作用的范围，如果不指定，则默认为函数级，即与scope=“function”是一样</p><p>定义为function级别，则只要在测试用例的参数中使用了fixture函数名，则就会在测试用例的之前和之后执行fixture对应的操作</p><p>在test_example.py中编写如下代码，即定义了两个fixture，func1为未明确指定scope的范围，func2指定了scope的值为function，在类外定义了三个测试用例，其中test_03为使用fixture，在测试类中也定义了三个测试用例方法，test_03也未应用fixture</p><p>当fixture的scope未指定或指定为function时，不管是类外的测试用例还是测试类中的测试用例方法，只要在测试用例方法的参数中指定了fixture，则都会在每个测试用例之前和之后执行fixture定义的对应的操作</p><p>test_example.py中代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;\nin func1 before testcase.......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in func1 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func2():</span><br><span class="line">    print(&quot;\nin func2 before testcase.......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in func2 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_01(func1):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func2):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func1):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func2):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中切换至test_example.py的目录中，然后执行如下命令：</p><p>pytest -s 运行结果如下，与上述分析结论一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in func1 before testcase.......</span><br><span class="line">in outer class test_01</span><br><span class="line">.in func1 after testcase......</span><br><span class="line"></span><br><span class="line">in func2 before testcase.......</span><br><span class="line">in outer class test_02</span><br><span class="line">.in func2 after testcase......</span><br><span class="line"></span><br><span class="line">in outer class test_03</span><br><span class="line">.</span><br><span class="line">in func1 before testcase.......</span><br><span class="line">in inner class test_01</span><br><span class="line">.in func1 after testcase......</span><br><span class="line"></span><br><span class="line">in func2 before testcase.......</span><br><span class="line">in inner class test_02</span><br><span class="line">.in func2 after testcase......</span><br><span class="line"></span><br><span class="line">in inner class test_03</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="4-fixture-作用范围之class"><a href="#4-fixture-作用范围之class" class="headerlink" title="4 fixture 作用范围之class"></a>4 fixture 作用范围之class</h4><p>fixture的scope值还可以是class，此时则fixture定义的动作就会在测试类class的所有用例之前和之后运行，这里需要注意两点</p><ul><li>测试类中只要有一个测试用例的参数中使用了class级别的fixture，则在整个测试类的所有测试用例之前都会去执行fixture定义的动作，以及此测试类的所有用例结束后同样要运行fixture指定的动作</li><li>如果在类外的函数中去使用class级别的fixture，则此时在测试类外每个测试用例中，fixture跟上一节讲的function级别的fixture作用是一致的，即在类外的函数中弱引用了fixture，则在此函数之前和之后同样去执行fixture定义的对应的操作</li></ul><p>在test_example.py文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;class&quot;)</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;\nin fixture before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中切换至test_example.py的目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in fixture before testcase......</span><br><span class="line">in outer class test_01</span><br><span class="line">.in fixture after testcase......</span><br><span class="line"></span><br><span class="line">in fixture before testcase......</span><br><span class="line">in outer class test_02</span><br><span class="line">.in fixture after testcase......</span><br><span class="line"></span><br><span class="line">in outer class test_03</span><br><span class="line">.</span><br><span class="line">in fixture before testcase......</span><br><span class="line">in inner class test_01</span><br><span class="line">.in inner class test_02</span><br><span class="line">.</span><br><span class="line">in inner class test_03</span><br><span class="line">.in fixture after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.07s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="5-fixture-作用范围之module"><a href="#5-fixture-作用范围之module" class="headerlink" title="5 fixture 作用范围之module"></a>5 fixture 作用范围之module</h4><p>在python中module即文件，所有fixture定义为module时，顾名思义，此fixture将在当前文件中去起作用</p><p>这里需要特别说明的是，当fixture的scope定义为module时，只要当前文件中有一个测试用例使用了fixture，不管这个用例是在类外，还是在类中，都会在当前文件（模块）的所有测试用例执行之前去执行fixture定义的行为以及当前文件的所有用例结束之后同样去执行fixture定义的对应操作</p><p>test_example.py文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;module&quot;)</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;\nin fixture before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中的termin中切换至test_example.py目录下，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in fixture before testcase......</span><br><span class="line">in outer class test_01</span><br><span class="line">.in outer class test_02</span><br><span class="line">.</span><br><span class="line">in outer class test_03</span><br><span class="line">.in inner class test_01</span><br><span class="line">.in inner class test_02</span><br><span class="line">.</span><br><span class="line">in inner class test_03</span><br><span class="line">.in fixture after testcase......</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.07s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="6-fixture-作用范围之session"><a href="#6-fixture-作用范围之session" class="headerlink" title="6 fixture 作用范围之session"></a>6 fixture 作用范围之session</h4><p>当fixture的scope定义为session时，是指在当前目录下的所有用例之前和之后执行fixture对应的操作</p><p>使用方式是在指定目录下创建conftest.py文件，然后在conftest.py文件中定义fixture方法，病将scope指定为session，此时在当前目录下只要有一个用例使用了此fixture，则就会在当前目录下所有用例之前和之后会执行fixture定义的对应的操作</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_demo</span><br><span class="line">   |----conftest.py</span><br><span class="line">   |----test_example.py</span><br><span class="line">   |----test_example2.py</span><br></pre></td></tr></table></figure><p>其中在conftest.py中定义fixture，并且指定scope为session，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;session&quot;)</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;\nin session fixuture before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in session fixture after testcase......&quot;)</span><br></pre></td></tr></table></figure><p>在test_example.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>在test_example2.py编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>载pycharm中的terminal中切换至test_demo目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示，与上述分析结果一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 12 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in session fixuture before testcase......</span><br><span class="line">in outer class test_01</span><br><span class="line">.in outer class test_02</span><br><span class="line">.</span><br><span class="line">in outer class test_03</span><br><span class="line">.in inner class test_01</span><br><span class="line">.in inner class test_02</span><br><span class="line">.</span><br><span class="line">in inner class test_03</span><br><span class="line">.</span><br><span class="line">test_example2.py in outer class test_01</span><br><span class="line">.in outer class test_02</span><br><span class="line">.</span><br><span class="line">in outer class test_03</span><br><span class="line">.in inner class test_01</span><br><span class="line">.in inner class test_02</span><br><span class="line">.</span><br><span class="line">in inner class test_03</span><br><span class="line">.in session fixture after testcase......</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 12 passed in 0.10s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="7-fixture-调用方式之参数传入"><a href="#7-fixture-调用方式之参数传入" class="headerlink" title="7 fixture 调用方式之参数传入"></a>7 fixture 调用方式之参数传入</h4><p>fixture的第一种调用方式就是作为参数传入，在测试用例中按照参数位置的先后顺序执行</p><p>在test_example.py找那个编写如下代码：test_01中通过参数传入的方式调用一个fixture，而test_02则通过参数传递的方式调用两个fixture，这两个fixture的调用顺序跟参数的位置一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;in fixture func1 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func1 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func2():</span><br><span class="line">    print(&quot;in fixture func2 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func2 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_01(func1):</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func1,func2):</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中进入到test_example.py的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 2 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py in fixture func1 before testcase......</span><br><span class="line">in test_01</span><br><span class="line">.in fixture func1 after testcase......</span><br><span class="line">in fixture func1 before testcase......</span><br><span class="line">in fixture func2 before testcase......</span><br><span class="line">in test_02</span><br><span class="line">.in fixture func2 after testcase......</span><br><span class="line">in fixture func1 after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="8-fixture-调用方式之pytest-mark-usefixtures"><a href="#8-fixture-调用方式之pytest-mark-usefixtures" class="headerlink" title="8 fixture 调用方式之pytest.mark.usefixtures"></a>8 fixture 调用方式之pytest.mark.usefixtures</h4><p>fixture的第二种调用方式就是使用@pytest.mark.usefixtures的方式，如果有叠加调用，则先执行的需要放到下面</p><p>在test_example.py文件中编写如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;in fixture func1 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func1 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func2():</span><br><span class="line">    print(&quot;in fixture func2 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func2 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.usefixtures(&quot;func1&quot;)</span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.usefixtures(&quot;func2&quot;)</span><br><span class="line">@pytest.mark.usefixtures(&quot;func1&quot;)</span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的termin中切入到test_example.py的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示，与上述分析结果一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 2 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py in fixture func1 before testcase......</span><br><span class="line">in test_01</span><br><span class="line">.in fixture func1 after testcase......</span><br><span class="line">in fixture func1 before testcase......</span><br><span class="line">in fixture func2 before testcase......</span><br><span class="line">in test_02</span><br><span class="line">.in fixture func2 after testcase......</span><br><span class="line">in fixture func1 after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="9-fixture-调用方式之autouse-true"><a href="#9-fixture-调用方式之autouse-true" class="headerlink" title="9 fixture 调用方式之autouse-true"></a>9 fixture 调用方式之autouse-true</h4><p>如果所有的用例都需要执行的fixture，就没有必要再所有用例中通过传参的方式或者标记的方式，pytest的fixture提供了一种更为简洁的用例，即在定义fixture的时候，将参数autouse设置为True时，则在执行用例的时候自动去加载，无需显示调用</p><p>在文件test_example.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;,autouse&#x3D;True)</span><br><span class="line">def func3():</span><br><span class="line">    print(&quot;in fixture func3 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func3 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的termin中切换至test_example.py的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下，可以发现在三个测试用例中并未显示调用fixture，但是仍然执行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py in fixture func3 before testcase......</span><br><span class="line">in test_01</span><br><span class="line">.in fixture func3 after testcase......</span><br><span class="line">in fixture func3 before testcase......</span><br><span class="line">in test_02</span><br><span class="line">.in fixture func3 after testcase......</span><br><span class="line">in fixture func3 before testcase......</span><br><span class="line">in test_03</span><br><span class="line">.in fixture func3 after testcase......</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(4)--setup与teardown</title>
      <link href="/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(4)--setup%E4%B8%8Eteardown/"/>
      <url>/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(4)--setup%E4%B8%8Eteardown/</url>
      
        <content type="html"><![CDATA[<h4 id="1-测试类中的setup与teardown"><a href="#1-测试类中的setup与teardown" class="headerlink" title="1 测试类中的setup与teardown"></a>1 测试类中的setup与teardown</h4><p>测试类中的setup与teardown共有三类：</p><ul><li>setup_class 和 teardown_class 在类的所有用例之前和之后执行</li><li>setup_method 和 teardown_method 在类中每个用例之前和之后执行</li><li>setup 和 teardown 也是在类中的每个用例之前和之后执行，但是setup在setup_method之后执行，teardown在teardown_methond之前执行</li></ul><p>在test_example.py中编写如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class TestExample():</span><br><span class="line"></span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;\nin setup_class&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line"></span><br><span class="line">    def setup_method(self):</span><br><span class="line">        print(&quot;in setup_method&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_method(self):</span><br><span class="line">        print(&quot;in teardown_method&quot;)</span><br><span class="line"></span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in setup&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;teardown&quot;)</span><br><span class="line"></span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;in test_03&quot;)</span><br></pre></td></tr></table></figure><p>使用pytest -s 执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in setup_class</span><br><span class="line">in setup_method</span><br><span class="line">in setup</span><br><span class="line">in test_01</span><br><span class="line">.teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in setup</span><br><span class="line">in test_02</span><br><span class="line">.teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in setup</span><br><span class="line">in test_03</span><br><span class="line">.teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in teardown_class</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="2-测试类之外的setup和teardown"><a href="#2-测试类之外的setup和teardown" class="headerlink" title="2 测试类之外的setup和teardown"></a>2 测试类之外的setup和teardown</h4><p>测试类外的setup和teardown有两类：</p><ul><li>setup_function 和 teardown_function 在类外的每个用例之前和之后执行</li><li>setup 和 teardown 在类外的每个测试用例之前和之后执行，其中setup在setup_function之后执行，teardown在teardown_function之前执行</li></ul><p>test_example.py文件中编写如下测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def setup_function():</span><br><span class="line">    print(&quot;\nin setup_function&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown_function():</span><br><span class="line">    print(&quot;in teardown_function&quot;)</span><br><span class="line">    </span><br><span class="line">def setup():</span><br><span class="line">    print(&quot;in setup&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown():</span><br><span class="line">    print(&quot;in teardown&quot;)</span><br><span class="line">    </span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line">    </span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line">    </span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br></pre></td></tr></table></figure><p>使用 pytest -s 执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in setup_function</span><br><span class="line">in setup</span><br><span class="line">in test_01</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_function</span><br><span class="line"></span><br><span class="line">in setup_function</span><br><span class="line">in setup</span><br><span class="line">in test_02</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_function</span><br><span class="line"></span><br><span class="line">in setup_function</span><br><span class="line">in setup</span><br><span class="line">in test_03</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_function</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="3-测试模块中的setup和teardown"><a href="#3-测试模块中的setup和teardown" class="headerlink" title="3 测试模块中的setup和teardown"></a>3 测试模块中的setup和teardown</h4><p>测试模块的setup和teardown只有一种，即：setup_module和teardown_module，在模块即文件中的所有测试用例包括测试类中和测试类外的之前和之后运行一次</p><p>在test_example.py文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">def setup_module():</span><br><span class="line">    print(&quot;\nin setup_module&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown_module():</span><br><span class="line">    print(&quot;in teardown_module&quot;)</span><br><span class="line">    </span><br><span class="line">def setup_function():</span><br><span class="line">    print(&quot;in setup_function&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown_function():</span><br><span class="line">    print(&quot;in teardown_function&quot;)</span><br><span class="line">    </span><br><span class="line">def setup():</span><br><span class="line">    print(&quot;in class outer setup&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown():</span><br><span class="line">    print(&quot;in class outer teardown&quot;)</span><br><span class="line">    </span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in class outer test_01&quot;)</span><br><span class="line">    </span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in class outer test_02&quot;)</span><br><span class="line">    </span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in class outer test_03&quot;)</span><br><span class="line">    </span><br><span class="line">class TestExample():</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;in setup_class&quot;)</span><br><span class="line">        </span><br><span class="line">    def testdown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line">        </span><br><span class="line">    def setup_method(self):</span><br><span class="line">        print(&quot;in setup_method&quot;)</span><br><span class="line">        </span><br><span class="line">    def teardown_method(self):</span><br><span class="line">        print(&quot;in teardown_method&quot;)</span><br><span class="line">        </span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in class inner setup&quot;)</span><br><span class="line">        </span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;in class inner teardown&quot;)</span><br><span class="line">    </span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in class inner test_01&quot;)</span><br><span class="line">        </span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in class inner test_02&quot;)</span><br><span class="line">    </span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;in class inner test_03&quot;)</span><br></pre></td></tr></table></figure><p>使用pytest -s 执行的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 7 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in setup_module</span><br><span class="line">in setup_function</span><br><span class="line">in class outer setup</span><br><span class="line">in class outer test_01</span><br><span class="line">.in class outer teardown</span><br><span class="line">in teardown_function</span><br><span class="line">in setup_function</span><br><span class="line">in class outer setup</span><br><span class="line">in class outer test_02</span><br><span class="line">.in class outer teardown</span><br><span class="line">in teardown_function</span><br><span class="line">in setup_function</span><br><span class="line">in class outer setup</span><br><span class="line">in class outer test_03</span><br><span class="line">.in class outer teardown</span><br><span class="line">in teardown_function</span><br><span class="line">in setup_class</span><br><span class="line">in setup_method</span><br><span class="line">in class inner setup</span><br><span class="line">in teardown_class</span><br><span class="line">.in class inner teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in class inner setup</span><br><span class="line">in class inner test_01</span><br><span class="line">.in class inner teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in class inner setup</span><br><span class="line">in class inner test_02</span><br><span class="line">.in class inner teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in class inner setup</span><br><span class="line">in class inner test_03</span><br><span class="line">.in class inner teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in teardown_module</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 7 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(3)--断言的使用</title>
      <link href="/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(3)--%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(3)--%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-pytest-断言使用的python的标准的assert，断言条件其实就是python基础语法中判断一个值或者表达式的结果是否为真的情况，在断言之后还可以加上断言的内容描述"><a href="#1-pytest-断言使用的python的标准的assert，断言条件其实就是python基础语法中判断一个值或者表达式的结果是否为真的情况，在断言之后还可以加上断言的内容描述" class="headerlink" title="1 pytest 断言使用的python的标准的assert，断言条件其实就是python基础语法中判断一个值或者表达式的结果是否为真的情况，在断言之后还可以加上断言的内容描述"></a>1 pytest 断言使用的python的标准的assert，断言条件其实就是python基础语法中判断一个值或者表达式的结果是否为真的情况，在断言之后还可以加上断言的内容描述</h4><p>在test_example.py文件中编写如下测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def test_assert_01():</span><br><span class="line">    assert 1 &#x3D;&#x3D; 1, &quot;1应该等于1&quot;</span><br><span class="line"></span><br><span class="line">def test_assert_02():</span><br><span class="line">    assert isinstance(10,int), &quot;10应该是整形&quot;</span><br><span class="line"></span><br><span class="line">def test_assert_03():</span><br><span class="line">    assert &quot;&quot; ,&quot;空字符串应该是true&quot;</span><br></pre></td></tr></table></figure><p>在pycharm中的terminal首先切入到test_example.py的目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：test_assert_03明显断言是错误的，所以这个用例会失败，另外两个则是成功的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ..F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_assert_03 ____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_assert_03():</span><br><span class="line">&gt;       assert &quot;&quot; ,&quot;空字符串应该是true&quot;</span><br><span class="line">E       AssertionError: 空字符串应该是true</span><br><span class="line">E       assert &#39;&#39;</span><br><span class="line"></span><br><span class="line">test_example.py:8: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_assert_03 - AssertionError: 空字符串应该是true</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 2 passed in 0.17s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="2-raises-可以帮助断言指定代码抛出指定的异常，如果和断言一致，则用例通过，否则则失败"><a href="#2-raises-可以帮助断言指定代码抛出指定的异常，如果和断言一致，则用例通过，否则则失败" class="headerlink" title="2 raises 可以帮助断言指定代码抛出指定的异常，如果和断言一致，则用例通过，否则则失败"></a>2 raises 可以帮助断言指定代码抛出指定的异常，如果和断言一致，则用例通过，否则则失败</h4><p>断言异常的方式是使用with pytest.raises(Exception类型)的格式</p><p>建立文件结构如下：<br>在test_example.py文件中编写如下代码，首先编写一个被测函数function，函数功能是返回两个数的除法的商，然后写了两个测试用例，每个都传入两个数，其中除数是0，一个用例判断会抛出ZeroDivisionError异常，另一个断言会抛出ValueError异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def function(a,b):</span><br><span class="line">    return a&#x2F;b</span><br><span class="line"></span><br><span class="line">def test_function():</span><br><span class="line">    with pytest.raises(ZeroDivisionError):</span><br><span class="line">        function(100,0)</span><br><span class="line"></span><br><span class="line">def test_function2():</span><br><span class="line">    with pytest.raises(ValueError):</span><br><span class="line">        function(100,0)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal窗口中进入到test_example.py的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下：和预期结果一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 2 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_function2 ____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_function2():</span><br><span class="line">        with pytest.raises(ValueError):</span><br><span class="line">&gt;           function(100,0)</span><br><span class="line"></span><br><span class="line">test_example.py:12:</span><br><span class="line">_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _</span><br><span class="line"></span><br><span class="line">a &#x3D; 100, b &#x3D; 0</span><br><span class="line"></span><br><span class="line">    def function(a,b):</span><br><span class="line">&gt;       return a&#x2F;b</span><br><span class="line">E       ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">test_example.py:4: ZeroDivisionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_function2 - ZeroDivisionError: division by zero</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 1 passed in 0.16s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(2)--测试用例的组织及运行</title>
      <link href="/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(2)--%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%BB%84%E7%BB%87%E5%8F%8A%E8%BF%90%E8%A1%8C/"/>
      <url>/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(2)--%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%BB%84%E7%BB%87%E5%8F%8A%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="1-pytest-测试用例自动发现原则"><a href="#1-pytest-测试用例自动发现原则" class="headerlink" title="1 pytest 测试用例自动发现原则"></a>1 pytest 测试用例自动发现原则</h4><ul><li>(1) 如果pytest 命令指定了目录参数，则从指定目录查找</li><li>(2) 如果pytest 命令没有通过参数形式指定目录，则从当前目录下查找是否有pytest.ini文件，如果有则从文件中查找 testpaths的值作为查找目录</li><li>(3) 如果在当前目录下没有找到pytest.ini文件，或者pytest.ini文件中没有配置testpaths值，则从当前目录递归查找</li><li>(4) 查找文件要求是test_*.py 或者 *_test.py </li><li>(5) 在文件中类的外面查找test开头的函数</li><li>(6) 在没有定义<strong>init</strong>方法的并且以Test开头的类中查找test开头的函数</li></ul><p>新建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ex_003</span><br><span class="line">   |----ex_03_test.py</span><br><span class="line">   |----ex_04test.py</span><br><span class="line">   |----test_ex_01.py</span><br><span class="line">   |----testex_02.py</span><br></pre></td></tr></table></figure><p>每个文件中都编写如下相同的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 符合条件，文件中类外，test开头的函数</span><br><span class="line">def test_function1():</span><br><span class="line">    print(&quot;in test_function1&quot;)</span><br><span class="line">    </span><br><span class="line"># 符合条件，文件中类外，test开头的函数</span><br><span class="line">def testfunction2():</span><br><span class="line">    print(&quot;in testfunction2&quot;)</span><br><span class="line">    </span><br><span class="line"># 不符合条件，文件中类外，非test开头的函数</span><br><span class="line">def function3_test():</span><br><span class="line">    print(&quot;in function3_test&quot;)</span><br><span class="line">    </span><br><span class="line"># 不符合条件，文件中类外，非test开头的函数</span><br><span class="line">def function4test():</span><br><span class="line">    print(&quot;in function4test&quot;)</span><br><span class="line">    </span><br><span class="line"># 符合条件的类，类命名以Test开头，并且没有__init__.py文件</span><br><span class="line">class TestClass1():</span><br><span class="line">    </span><br><span class="line">    # 符合条件，类中以test开头的函数</span><br><span class="line">    def test_function1(self):</span><br><span class="line">        print(&quot;in TestClass1.test_function1&quot;)</span><br><span class="line"></span><br><span class="line">    # 符合条件，类中以test开头的函数</span><br><span class="line">    def testfunction2(self):</span><br><span class="line">        print(&quot;in TestClass1.testfunction2&quot;)</span><br><span class="line"></span><br><span class="line">    # 不符合条件，类中非以test开头的函数</span><br><span class="line">    def function3_test(self):</span><br><span class="line">        print(&quot;in TestClass1.function3_test&quot;)</span><br><span class="line"></span><br><span class="line">    # 不符合条件，类中非以test开头的函数</span><br><span class="line">    def function4test(self):</span><br><span class="line">        print(&quot;in TestClass1.function4test&quot;)</span><br><span class="line">       </span><br><span class="line"># 不符合条件的类，类命名虽然以Test开头，但是有__init__.py文件，此类中所有函数不会被pytest发现</span><br><span class="line">class TestClass2():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">    def test_function1(self):</span><br><span class="line">        print(&quot;in TestClass2.test_function1&quot;)</span><br><span class="line"></span><br><span class="line">    def testfunction2(self):</span><br><span class="line">        print(&quot;in TestClass2.testfunction2&quot;)</span><br><span class="line"></span><br><span class="line">    def function3_test(self):</span><br><span class="line">        print(&quot;in TestClass2.function3_test&quot;)</span><br><span class="line"></span><br><span class="line">    def function4test(self):</span><br><span class="line">        print(&quot;in TestClass2.function4test&quot;)</span><br><span class="line">        </span><br><span class="line"># 不符合条件的类，类命名非以Test开头，此类中所有测试函数不会被pytest发现</span><br><span class="line">class Class3Test():</span><br><span class="line"></span><br><span class="line">    def test_function1(self):</span><br><span class="line">        print(&quot;in Class3Test.test_function1&quot;)</span><br><span class="line"></span><br><span class="line">    def testfunction2(self):</span><br><span class="line">        print(&quot;in Class3Test.testfunction2&quot;)</span><br><span class="line"></span><br><span class="line">    def function3_test(self):</span><br><span class="line">        print(&quot;in Class3Test.function3_test&quot;)</span><br><span class="line"></span><br><span class="line">    def function4test(self):</span><br><span class="line">        print(&quot;in Class3Test.function4test&quot;)</span><br></pre></td></tr></table></figure><p>首先上述文件中通过与标准测试发现规则对比可以很容易的分析出只有 ex_03_test.py和test_ex_01.py符合文件命名规则要求，其他两个文件中的测试函数或者测试类不会被pytest发现</p><p>每个文件中的代码分析见代码中的每个函数或者类上面的分析</p><p>下面在pycharm的terminal中首先进入到ex_003的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_003&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_003</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 8 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">ex_03_test.py in test_function1</span><br><span class="line">.in testfunction2</span><br><span class="line">.in TestClass1.test_function1</span><br><span class="line">.in TestClass1.testfunction2</span><br><span class="line">.</span><br><span class="line">test_ex_01.py in test_function1</span><br><span class="line">.in testfunction2</span><br><span class="line">.in TestClass1.test_function1</span><br><span class="line">.in TestClass1.testfunction2</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; warnings summary &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">ex_03_test.py:38</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\ex_003\ex_03_test.py:38: PytestCollectionWarning: cannot collect test class &#39;TestClass2&#39; because it has a __init__</span><br><span class="line"> constructor (from: ex_03_test.py)</span><br><span class="line">    class TestClass2():</span><br><span class="line"></span><br><span class="line">test_ex_01.py:44</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\ex_003\test_ex_01.py:44: PytestCollectionWarning: cannot collect test class &#39;TestClass2&#39; because it has a __init__</span><br><span class="line"> constructor (from: test_ex_01.py)</span><br><span class="line">    class TestClass2():</span><br><span class="line"></span><br><span class="line">-- Docs: https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;warnings.html</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 8 passed, 2 warnings in 0.16s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_003&gt;</span><br></pre></td></tr></table></figure><h4 id="2-pytest-在python文件中的用例组织形式"><a href="#2-pytest-在python文件中的用例组织形式" class="headerlink" title="2 pytest 在python文件中的用例组织形式"></a>2 pytest 在python文件中的用例组织形式</h4><p>主要组成部分有setup，teardown 和各个用例，每个用例的方法名必须以test开头，在每个用例执行之前会去执行setup初始化配置，每个用例执行完成之后都会去执行teardown清理配置</p><p>在test_example.py文件中编写如下测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def setup():</span><br><span class="line">    print(&quot;in setup&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown():</span><br><span class="line">    print(&quot;in teardown&quot;)</span><br><span class="line">    </span><br><span class="line">def test_func1():</span><br><span class="line">    print(&quot;in test_func1&quot;)</span><br><span class="line">    </span><br><span class="line">def test_func2():</span><br><span class="line">    print(&quot;in test_func2&quot;)</span><br><span class="line">    </span><br><span class="line">def test_func3():</span><br><span class="line">    print(&quot;in test_func3&quot;)</span><br></pre></td></tr></table></figure><p>然后在pycharm的terminal中首先切换到test_example.py的目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示，即每个测试用例在执行之前首先执行setup操作，每个用例执行完成之后都执行了teardown操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py in setup</span><br><span class="line">in test_func1</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func2</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func3</span><br><span class="line">.in teardown</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.08s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="3-使用类组织测试用例"><a href="#3-使用类组织测试用例" class="headerlink" title="3 使用类组织测试用例"></a>3 使用类组织测试用例</h4><p>使用文件组织用例的时候，如果想在所有用例之前只执行一次初始化操作，而当所有用例执行完成之后再进行公共的清理配置操作，在文件组织用例的形式下是做不到的，这个时候就需要使用测试类来组织用例</p><p>在使用类组织用例的时候，类名必须是Test开头，类不能有初始化函数<strong>init</strong>，类中的测试用例名称同样必须test开头，此外，类中可以有setup和teardown，setup是在类中每个用例执行之前执行，teardown是在每个用例执行结束之后执行</p><p>除此以外，类中还有setup_class和teardown_class，setup_class是在类的所有用例执行前执行一次，待所有用例执行结束之后，再执行testdown_class方法</p><p>在test_example.py文件中编写如下测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class TestFunction(object):</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;\nin setup_class&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line"></span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in setup&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;in teardown&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func1(self):</span><br><span class="line">        print(&quot;in test_func1&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func3(self):</span><br><span class="line">        print(&quot;in test_func3&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中切换至ex_006的目录中，然后执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in setup_class</span><br><span class="line">in setup</span><br><span class="line">in test_func1</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func2</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func3</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_class</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="4-pytest用例的执行方式"><a href="#4-pytest用例的执行方式" class="headerlink" title="4 pytest用例的执行方式"></a>4 pytest用例的执行方式</h4><ul><li>（1） 在一个目录下执行pytest，会递归查找当前目录下的所有符合用例发现规则的所有用例，然后全部执行</li></ul><p>如当前目录下有两个py文件分别为：test_example.py，test_example2.py，两个文件中的代码均为如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class TestFunction(object):</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;\nin setup_class&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line"></span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in setup&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;in teardown&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func1(self):</span><br><span class="line">        print(&quot;in test_func1&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func3(self):</span><br><span class="line">        print(&quot;in test_func3&quot;)</span><br></pre></td></tr></table></figure><p>在当前目录下执行 pytest，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ...                                                                                                                                               [ 50%]</span><br><span class="line">test_example2.py ...                                                                                                                                              [100%]</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><ul><li><p>（2） 可以指定文件，比如 pytest test_example.py 即执行test_example.py文件中的所有符合用例发现规则的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest test_example.py</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ...                                                                                                                                               [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.03s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li><p>（3） 可以指定文件中的某个具体测试类，如：pytest test_example.py::TestFunction<br>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest test_example.py::TestFunction</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ...                                                                                                                                               [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.02s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li><p>(4) 还可以指定具体文件中的具体类中的具体某一个测试用例，如：pytest test_example.py::TestFunction::test_func1<br>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest test_example.py::TestFunction::test_func1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 1 item                                                                                                                                                        </span><br><span class="line"></span><br><span class="line">test_example.py .                                                                                                                                                 [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 passed in 0.02s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li><p>(5) pytest -s 详细打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest test_example.py::TestFunction::test_func1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 1 item                                                                                                                                                        </span><br><span class="line"></span><br><span class="line">test_example.py .                                                                                                                                                 [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 passed in 0.02s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s test_example.py</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in setup_class</span><br><span class="line">in setup</span><br><span class="line">in test_func1</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func2</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func3</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_class</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.02s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li><p>(6) pytest -m xxx 可以指定了打了xxx标记的用例执行</p></li></ul><p>在test_example.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line">class TestFunction(object):</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;\nin setup_class&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line"></span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in setup&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;in teardown&quot;)</span><br><span class="line">    @pytest.mark.test</span><br><span class="line">    def test_func1(self):</span><br><span class="line">        print(&quot;in test_func1&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func3(self):</span><br><span class="line">        print(&quot;in test_func3&quot;)</span><br></pre></td></tr></table></figure><p>使用下面命令执行发现只执行了一个用例，因为此用例打了test的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s -m test</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items &#x2F; 2 deselected &#x2F; 1 selected                                                                                                                           </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in setup_class</span><br><span class="line">in setup</span><br><span class="line">in test_func1</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_class</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; warnings summary &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">test_example.py:14</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\test_demo\test_example.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.test - is this a typo?  You can regist</span><br><span class="line">er custom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.test</span><br><span class="line"></span><br><span class="line">-- Docs: https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;warnings.html</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 passed, 2 deselected, 1 warning in 0.07s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>这里再看一个例子，顺带把pytest.mark的功能讲了</p><p>pytest的mark功能主要用于给测试用例打不通的标签，在后续执行脚本的时候可以通过标签来指定运行哪些用例</p><p>在test_example.py文件中编写如下代码，给一部分测试用例加上smoke的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.smoke</span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.smoke</span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_04():</span><br><span class="line">    print(&quot;in test_04&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.smoke</span><br><span class="line">def test_05():</span><br><span class="line">    print(&quot;in test_05&quot;)</span><br><span class="line"></span><br><span class="line">def test_06():</span><br><span class="line">    print(&quot;in test_06&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.smoke</span><br><span class="line">def test_07():</span><br><span class="line">    print(&quot;in test_07&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中的terminal中切换到test_example.py的目录下，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s -m smoke</span><br></pre></td></tr></table></figure><p>运行结果如下，将打了smoke标签的几个用例执行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s -m smoke</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 7 items &#x2F; 3 deselected &#x2F; 4 selected                                                                                                                           </span><br><span class="line"></span><br><span class="line">test_example.py in test_02</span><br><span class="line">.in test_03</span><br><span class="line">.in test_05</span><br><span class="line">.in test_07</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; warnings summary &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">test_example.py:6</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\test_demo\test_example.py:6: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can regist</span><br><span class="line">er custom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.smoke</span><br><span class="line"></span><br><span class="line">test_example.py:10</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\test_demo\test_example.py:10: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can regis</span><br><span class="line">ter custom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.smoke</span><br><span class="line"></span><br><span class="line">test_example.py:18</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\test_demo\test_example.py:18: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can regis</span><br><span class="line">ter custom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.smoke</span><br><span class="line"></span><br><span class="line">test_example.py:25</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\test_demo\test_example.py:25: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can regis</span><br><span class="line">ter custom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.smoke</span><br><span class="line"></span><br><span class="line">-- Docs: https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;warnings.html</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 4 passed, 3 deselected, 4 warnings in 0.03s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><ul><li>(7) pytest -x 遇到错误等及不再继续执行</li></ul><p>在test_example.py中编写如下代码：有三个用例，其中第二个会出现断言错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line">class TestFunction(object):</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;\nin setup_class&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line"></span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in setup&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;in teardown&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func1(self):</span><br><span class="line">        print(&quot;in test_func1&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line">        assert 1&#x3D;&#x3D;2</span><br><span class="line"></span><br><span class="line">    def test_func3(self):</span><br><span class="line">        print(&quot;in test_func3&quot;)</span><br></pre></td></tr></table></figure><p>分别用pytest 和pytest -x 执行，结果如下：当使用-x参数时结果为一个通过一个失败，只执行了两个，而使用pytest时，三个用例都执行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .F.                                                                                                                                               [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_______________________________________________________________________ TestFunction.test_func2 ________________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestFunction object at 0x0000019FBFD5B400&gt;</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:20: AssertionError</span><br><span class="line">------------------------------------------------------------------------ Captured stdout setup -------------------------------------------------------------------------</span><br><span class="line">in setup</span><br><span class="line">------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------</span><br><span class="line">in test_func2</span><br><span class="line">----------------------------------------------------------------------- Captured stdout teardown -----------------------------------------------------------------------</span><br><span class="line">in teardown</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::TestFunction::test_func2 - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 2 passed in 0.14s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -x</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .Fin teardown_class</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_______________________________________________________________________ TestFunction.test_func2 ________________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestFunction object at 0x0000019D9C83B460&gt;</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:20: AssertionError</span><br><span class="line">------------------------------------------------------------------------ Captured stdout setup -------------------------------------------------------------------------</span><br><span class="line">in setup</span><br><span class="line">------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------</span><br><span class="line">in test_func2</span><br><span class="line">----------------------------------------------------------------------- Captured stdout teardown -----------------------------------------------------------------------</span><br><span class="line">in teardown</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::TestFunction::test_func2 - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 1 passed in 0.14s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><ul><li>(8) pytest –maxfail=num 可以控制在num个用例失败后停止执行</li></ul><p>下面使用（7）中的测试代码，执行下面命令，只执行了两个用例，因为达到了最大失败用例1个，即停止执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest --maxfail&#x3D;1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .Fin teardown_class</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_______________________________________________________________________ TestFunction.test_func2 ________________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestFunction object at 0x00000228B960B580&gt;</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:20: AssertionError</span><br><span class="line">------------------------------------------------------------------------ Captured stdout setup -------------------------------------------------------------------------</span><br><span class="line">in setup</span><br><span class="line">------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------</span><br><span class="line">in test_func2</span><br><span class="line">----------------------------------------------------------------------- Captured stdout teardown -----------------------------------------------------------------------</span><br><span class="line">in teardown</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::TestFunction::test_func2 - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 1 passed in 0.14s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(1)--安装以及快速入门</title>
      <link href="/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(1)--%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(1)--%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-pytest-的特点"><a href="#1-pytest-的特点" class="headerlink" title="1 pytest 的特点"></a>1 pytest 的特点</h4><ul><li>（1） 非常容易上手，入门简单，文档丰富，文档中有很多实例可以参考</li><li>（2） 能够支持简单的单元测试和复杂的功能测试</li><li>（3） 支持参数化</li><li>（4） 执行测试过程中可以将某些测试跳过（skip），或者对某些预期失败的case标记成失败</li><li>（5） 支持重复执行(rerun)失败的 case</li><li>（6） 支持运行由 nose, unittest 编写的测试 case</li><li>（7） 可生成 html 报告</li><li>（8） 方便的和持续集成工具 jenkins 集成</li><li>（9） 可支持执行部分用例</li><li>（10） 具有很多第三方插件，并且可以自定义扩展<h4 id="2-pytest-安装"><a href="#2-pytest-安装" class="headerlink" title="2 pytest 安装"></a>2 pytest 安装</h4></li></ul><p>注：默认环境已经安装了miniconda，若未安装，请参考<a href="https://redrose2100.github.io/blog/2020/07/10/miniconda%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">Miniconda安装</a></p><ul><li><p>(1) 安装python3.8.3的虚拟环境<br>打开cmd窗口，执行如下命令安装名为PytestEnv的基于python3.8.3的虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n PytestEnv python&#x3D;3.8.3</span><br></pre></td></tr></table></figure></li><li><p>(2) 激活名为PytestEnv的虚拟环境<br>执行如下命令激活名为PytestEnv的虚拟环境</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate PytestEnv</span><br></pre></td></tr></table></figure><ul><li><p>(3) 安装pytest<br>执行如下命令安装pytest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest</span><br></pre></td></tr></table></figure></li><li><p>(4) 安装pytest-html<br>执行如下命令，安装pytest-html，用于生成测试用例的html报告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest-html</span><br></pre></td></tr></table></figure></li><li><p>(5) 查看安装的pytest版本<br>执行如下命令查看pytest版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest --version</span><br></pre></td></tr></table></figure><p>显示信息如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation&gt;pytest --version</span><br><span class="line">This is pytest version 5.4.3, imported from d:\miniconda\envs\pytestenv\lib\site-packages\pytest\__init__.py</span><br><span class="line">setuptools registered plugins:</span><br><span class="line">  pytest-html-2.1.1 at d:\miniconda\envs\pytestenv\lib\site-packages\pytest_html\plugin.py</span><br><span class="line">  pytest-metadata-1.10.0 at d:\miniconda\envs\pytestenv\lib\site-packages\pytest_metadata\plugin.py</span><br></pre></td></tr></table></figure><h4 id="3-创建第一个测试用例"><a href="#3-创建第一个测试用例" class="headerlink" title="3 创建第一个测试用例"></a>3 创建第一个测试用例</h4></li><li><p>(1) 新建一个测试文件，比如 test_example.py</p></li><li><p>(2) 在test_example.py文件中编写如下代码,即编写一个被测函数add，此函数返回两个数之和，然后对这个函数编写测试用例，assert为断言，这里判断函数传入10和20，返回结果等于50，很明显从逻辑上分析这个断言是错误的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def add(a,b):</span><br><span class="line">    return a+b</span><br><span class="line"></span><br><span class="line">def test_add():</span><br><span class="line">    assert(add(10,20)&#x3D;&#x3D;50)</span><br></pre></td></tr></table></figure></li><li><p>(3) 在pycharm中打开terminal窗口，在terminal窗口通过cd命令进入到test_example.py所在的目录，然后执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest</span><br></pre></td></tr></table></figure></li><li><p>(4) 运行之后得到如下结果，提示用例失败，断言30==50，与上面分析结论一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 1 item                                                                                                                                                        </span><br><span class="line"></span><br><span class="line">test_example.py F                                                                                                                                                 [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_______________________________________________________________________________ test_add _______________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_add():</span><br><span class="line">&gt;       assert(add(10,20)&#x3D;&#x3D;50)</span><br><span class="line">E       assert 30 &#x3D;&#x3D; 50</span><br><span class="line">E        +  where 30 &#x3D; add(10, 20)</span><br><span class="line"></span><br><span class="line">test_example.py:5: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_add - assert 30 &#x3D;&#x3D; 50</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed in 0.20s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python专题系列(4)--setuptools详解</title>
      <link href="/blog/2020/08/07/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(4)--setuptools%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/07/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(4)--setuptools%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-setuptools-安装，执行如下命令即可："><a href="#1-setuptools-安装，执行如下命令即可：" class="headerlink" title="1 setuptools 安装，执行如下命令即可："></a>1 setuptools 安装，执行如下命令即可：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install setuptools</span><br></pre></td></tr></table></figure><p>如下表示已经安装ok</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(PythonBaseEnv) G:\study\pkg_01&gt;pip install --upgrade setuptools</span><br><span class="line">Collecting setuptools</span><br><span class="line">  Downloading setuptools-49.2.1-py3-none-any.whl (789 kB)</span><br><span class="line">     |████████████████████████████████| 789 kB 273 kB&#x2F;s</span><br><span class="line">Installing collected packages: setuptools</span><br><span class="line">  Attempting uninstall: setuptools</span><br><span class="line">    Found existing installation: setuptools 49.2.0.post20200714</span><br><span class="line">    Uninstalling setuptools-49.2.0.post20200714:</span><br><span class="line">      Successfully uninstalled setuptools-49.2.0.post20200714</span><br><span class="line">Successfully installed setuptools-49.2.1</span><br></pre></td></tr></table></figure><h4 id="2-将最简单的pkg-01-的包打包为-tar-gz的源码包"><a href="#2-将最简单的pkg-01-的包打包为-tar-gz的源码包" class="headerlink" title="2 将最简单的pkg_01 的包打包为.tar.gz的源码包"></a>2 将最简单的pkg_01 的包打包为.tar.gz的源码包</h4><ul><li>（1） 创建如下文件目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pkg_01</span><br><span class="line">   |----pkg_01</span><br><span class="line">   |       |----__init__.py</span><br><span class="line">   |       |----math</span><br><span class="line">   |              |----__init__.py</span><br><span class="line">   |              |----common.py</span><br><span class="line">   |----setup.py</span><br></pre></td></tr></table></figure></li><li>(2) 在setup.py文件中编写如下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from setuptools import setup, find_packages</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name&#x3D;&quot;pkg_01&quot;,</span><br><span class="line">    version&#x3D;&quot;0.0.1&quot;,</span><br><span class="line">    package&#x3D;find_packages(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>(3) 在 pkg_01.math.common.py中写一个加法的函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def add(a,b):</span><br><span class="line">    return (a+b)</span><br></pre></td></tr></table></figure></li><li>(4) 在cmd或者pycharm的终端中切换到pkg_01的根目录中，然后执行如下命令即可打包一个最简单的.tar.gz包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist --format&#x3D;gztar</span><br></pre></td></tr></table></figure></li><li>(5) 在cmd或者pycharm的终端中继续执行如下命令对我们上面打的包进行安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install dist&#x2F;pkg_01-0.0.1.tar.gz</span><br></pre></td></tr></table></figure></li><li>(6) 进入python交互式环境中，对上面的安装的pkg_01的包进行测试,如下，表示pkg_01已经安装ok，并且add方法功能也正常<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(PythonBaseEnv) G:\study\pkg_01&gt;python</span><br><span class="line">Python 3.8.3 (default, Jul  2 2020, 17:30:36) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; from pkg_01.math.common import add</span><br><span class="line">&gt;&gt;&gt; a&#x3D;add(100,200)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">300</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">* (7)源码包一般常用的就是.tar.gz和.zip包</span><br></pre></td></tr></table></figure><h4 id="3-将上述最简单的pkg-01打包为windows标砖软件msi格式"><a href="#3-将上述最简单的pkg-01打包为windows标砖软件msi格式" class="headerlink" title="3 将上述最简单的pkg_01打包为windows标砖软件msi格式"></a>3 将上述最简单的pkg_01打包为windows标砖软件msi格式</h4></li><li>（1） 在cmd或者pycharm的终端中执行如下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup bdist --format&#x3D;msi</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(PythonBaseEnv) G:\study\pkg_01&gt;python setup.py  bdist --format&#x3D;msi</span><br><span class="line">D:\Miniconda\envs\PythonBaseEnv\lib\distutils\dist.py:274: UserWarning: Unknown distribution option: &#39;package&#39;</span><br><span class="line">  warnings.warn(msg)</span><br><span class="line">running bdist</span><br><span class="line">running bdist_msi</span><br><span class="line">running build</span><br><span class="line">installing to build\bdist.win-amd64\msi</span><br><span class="line">running install_egg_info</span><br><span class="line">running egg_info</span><br><span class="line">writing pkg_01.egg-info\PKG-INFO</span><br><span class="line">writing dependency_links to pkg_01.egg-info\dependency_links.txt</span><br><span class="line">writing top-level names to pkg_01.egg-info\top_level.txt</span><br><span class="line">reading manifest file &#39;pkg_01.egg-info\SOURCES.txt&#39;</span><br><span class="line">writing manifest file &#39;pkg_01.egg-info\SOURCES.txt&#39;</span><br><span class="line">Copying pkg_01.egg-info to build\bdist.win-amd64\msi\Lib\site-packages\pkg_01-0.0.1-py3.8.egg-info</span><br><span class="line">running install_scripts</span><br><span class="line">removing &#39;build\bdist.win-amd64\msi&#39; (and everything under it)</span><br></pre></td></tr></table></figure></li><li>（2）执行如下命令将已经安装的pkg_01的包卸载掉<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall pkg_01</span><br></pre></td></tr></table></figure></li><li>(3) 找打dist目录下生成的pkg_01-0.0.1.win-amd64.msi软件，双击执行</li><li>(4) 然后选择“install for all users”选项，点击“next”</li><li>(5) 继续选择“next”，然后点击“finish”，完成安装</li><li>(6) 在cmd中，使用系统中的pip执行 pip list 发现pkg_01包已经安装上去了</li></ul><h4 id="4-将pkg-01包打包为rpm包"><a href="#4-将pkg-01包打包为rpm包" class="headerlink" title="4 将pkg_01包打包为rpm包"></a>4 将pkg_01包打包为rpm包</h4><ul><li>(1) 首先将pkg_01的源码上传至linux，在windows上是无法打包rpm包的</li><li>(2) 在linux上首先执行pip list，确保当前pkg_01在linux上是没有安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 pkg_01]# pwd</span><br><span class="line">&#x2F;opt&#x2F;pkg_01</span><br><span class="line">(base) [root@redrose2100 pkg_01]# pip list</span><br><span class="line">Package                Version</span><br><span class="line">---------------------- -------------------</span><br><span class="line">certifi                2020.4.5.1</span><br><span class="line">cffi                   1.14.0</span><br><span class="line">chardet                3.0.4</span><br><span class="line">conda                  4.8.3</span><br><span class="line">conda-package-handling 1.7.0</span><br><span class="line">cryptography           2.9.2</span><br><span class="line">idna                   2.9</span><br><span class="line">pip                    20.0.2</span><br><span class="line">pycosat                0.6.3</span><br><span class="line">pycparser              2.20</span><br><span class="line">pyOpenSSL              19.1.0</span><br><span class="line">PySocks                1.7.1</span><br><span class="line">requests               2.23.0</span><br><span class="line">ruamel-yaml            0.15.87</span><br><span class="line">setuptools             46.4.0.post20200518</span><br><span class="line">six                    1.14.0</span><br><span class="line">tqdm                   4.46.0</span><br><span class="line">urllib3                1.25.8</span><br><span class="line">wheel                  0.34.2</span><br><span class="line">(base) [root@redrose2100 pkg_01]#</span><br></pre></td></tr></table></figure></li><li>(3) 进入到pkg_01目录下，执行如下命令将pkg_01打包为rpm包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py bdist --format&#x3D;rpm</span><br></pre></td></tr></table></figure>则会在dist目录下生成如下三个文件，两个rpm和一个tar.gz<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 pkg_01]# ls dist&#x2F;</span><br><span class="line">pkg_01-0.0.1-1.noarch.rpm  pkg_01-0.0.1-1.src.rpm  pkg_01-0.0.1.tar.gz</span><br></pre></td></tr></table></figure></li><li>(4) 然后可以安装pkg_01-0.0.1-1.noarch.rpm包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh dist&#x2F;pkg_01-0.0.1-1.noarch.rpm(base) [root@redrose2100 pkg_01]# rpm -ivh dist&#x2F;pkg_01-0.0.1-1.noarch.rpm</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating &#x2F; installing...</span><br><span class="line">   1:pkg_01-0.0.1-1                   ################################# [100%]</span><br></pre></td></tr></table></figure></li><li>(5) 再次执行pip list，发现此时pkg-01已经安装ok了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 pkg_01]# pip list</span><br><span class="line">Package                Version</span><br><span class="line">---------------------- -------------------</span><br><span class="line">certifi                2020.4.5.1</span><br><span class="line">cffi                   1.14.0</span><br><span class="line">chardet                3.0.4</span><br><span class="line">conda                  4.8.3</span><br><span class="line">conda-package-handling 1.7.0</span><br><span class="line">cryptography           2.9.2</span><br><span class="line">idna                   2.9</span><br><span class="line">pip                    20.0.2</span><br><span class="line">pkg-01                 0.0.1</span><br><span class="line">pycosat                0.6.3</span><br><span class="line">pycparser              2.20</span><br><span class="line">pyOpenSSL              19.1.0</span><br><span class="line">PySocks                1.7.1</span><br><span class="line">requests               2.23.0</span><br><span class="line">ruamel-yaml            0.15.87</span><br><span class="line">setuptools             46.4.0.post20200518</span><br><span class="line">six                    1.14.0</span><br><span class="line">tqdm                   4.46.0</span><br><span class="line">urllib3                1.25.8</span><br><span class="line">wheel                  0.34.2</span><br><span class="line">(base) [root@redrose2100 pkg_01]#</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-打包方式常用的基本就上面集中，下面重点就是详细配置setup-py文件了"><a href="#5-打包方式常用的基本就上面集中，下面重点就是详细配置setup-py文件了" class="headerlink" title="5 打包方式常用的基本就上面集中，下面重点就是详细配置setup.py文件了"></a>5 打包方式常用的基本就上面集中，下面重点就是详细配置setup.py文件了</h4><table><thead><tr><th>名称</th><th align="left">含义</th></tr></thead><tbody><tr><td>name</td><td align="left">包的名称</td></tr><tr><td>version</td><td align="left">软件包的版本号</td></tr><tr><td>description</td><td align="left">软件包的描述</td></tr><tr><td>long_description</td><td align="left">软件包的详细描述</td></tr><tr><td>long_description_context_type</td><td align="left">软件包详细描述的类型，比如text/markdown</td></tr><tr><td>author</td><td align="left">软件包的作者</td></tr><tr><td>author_email</td><td align="left">软件包的作者的邮件地址</td></tr><tr><td>maintainer</td><td align="left">当前维护者</td></tr><tr><td>maintainer_email</td><td align="left">当前维护者的电子邮箱</td></tr><tr><td>url</td><td align="left">指定软件包主页的url</td></tr><tr><td>download_url</td><td align="left">指定要下载软件包的url</td></tr><tr><td>package</td><td align="left">指定setuptools将操作的软件包</td></tr><tr><td>py_modules</td><td align="left">指定setuptools将操作的模块</td></tr><tr><td>scripts</td><td align="left">用于呀构建和安装的独立脚本文件</td></tr><tr><td>ext_package</td><td align="left">软件包提供的扩展的基本软件包</td></tr><tr><td>ext_module</td><td align="left">指定要构建的python扩展列表的实例列表</td></tr><tr><td>classifiers</td><td align="left">描述程序包类别的字符串列表</td></tr><tr><td>distclass</td><td align="left">要使用的子类</td></tr><tr><td>script_name</td><td align="left">用于是定setup.py脚本的名称，默认为 sys.argv[0]</td></tr><tr><td>script_args</td><td align="left">用于指定setup.py脚本的参数列表</td></tr><tr><td>options</td><td align="left">用于给setup.py脚本提供的默认的options</td></tr><tr><td>license</td><td align="left">指定软件包的约束协议</td></tr><tr><td>keywords</td><td align="left">用于描述元数据的字符串列表或者逗号隔开的字符串</td></tr><tr><td>platform</td><td align="left">字符串列表或者逗号隔开的字符串，表示软件支持的平台</td></tr><tr><td>cmdclass</td><td align="left">字典提供命令名到Command子类的映射</td></tr><tr><td>data_files</td><td align="left">指定要分发的文件列表</td></tr><tr><td>package_dir</td><td align="left">提供程序包到目录名称的映射</td></tr><tr><td>install_requires</td><td align="left">安装依赖</td></tr><tr><td>include_package_data</td><td align="left">如果设置为True，setuptools则表示将在MANIFEST.in文件指定的包目录中自动包含找到的所有数据文件</td></tr><tr><td>exclude_package_data</td><td align="left">字典将包名称映射到应从包目录中排除的全局模式列表。您可以使用它来修剪包含的所有多余文件include_package_data</td></tr><tr><td>package_data</td><td align="left">包数据文件</td></tr><tr><td>entry_points</td><td align="left">字典将入口点组名称映射到定义入口点的字符串或字符串列表。入口点用于支持动态发现项目提供的服务或插件</td></tr><tr><td>python_requires</td><td align="left">与Python版本的版本说明符（在PEP 440中定义）相对应的字符串</td></tr><tr><td>namespace_packages</td><td align="left">命名项目的“命名空间包”的字符串列表。名称空间包是可以拆分为多个项目发行版的包</td></tr><tr><td>#### 6 将pkg_01包继续丰富，最后上传至github以及pypi上</td><td align="left"></td></tr><tr><td>* （1） 在工程根目录新建一个README.rst文件，文件内容比如如下：采用markdown语法</td><td align="left"></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 功能：用于演示一个简单打包流程以及上传pypi流程的包</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>* (2) 将代码包上传至github：<a href="https://github.com/redrose2100/pkg_01">https://github.com/redrose2100/pkg_01</a></td><td align="left"></td></tr><tr><td>* (3) 将setup.py文件丰富为如下内容：</td><td align="left"></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from setuptools import setup, find_packages</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name&#x3D;&quot;pkg_01&quot;,</span><br><span class="line">    version&#x3D;&quot;0.0.1&quot;,</span><br><span class="line">    descriptions&#x3D;(&quot;used to demo distribute python package&quot;),</span><br><span class="line">    package&#x3D;find_packages(),</span><br><span class="line">    author&#x3D;&quot;redrose2100&quot;,</span><br><span class="line">    author_email&#x3D;&quot;hitredrose@163.com&quot;,</span><br><span class="line">    license&#x3D;&quot;GPLv3&quot;,</span><br><span class="line">    url&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;redrose2100&#x2F;pkg_01&quot;,</span><br><span class="line">    install_requires&#x3D;[]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>* （4） 在pypi上注册账号，并邮件激活</td><td align="left"></td></tr><tr><td>* （5） windows在C:\Users\Administrator 目录下创建 .pypirc文件，内容为：</td><td align="left"></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers &#x3D;pypi</span><br><span class="line"></span><br><span class="line">[pypi]</span><br><span class="line">username: 用户名</span><br><span class="line">password: 密码</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>* （6) 使用如下命令安装twine</td><td align="left"></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install twine</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>* (7) 执行如下命令将打的包上传</td><td align="left"></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twine upload dist&#x2F;*</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>执行结果如下：</td><td align="left"></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(PythonBaseEnv) G:\study\pkg_01&gt;twine upload dist&#x2F;*</span><br><span class="line">Uploading distributions to https:&#x2F;&#x2F;upload.pypi.org&#x2F;legacy&#x2F;</span><br><span class="line">Uploading pkg_01-0.0.1.tar.gz</span><br><span class="line">100%|██████████████████████████████████████████████████████████████████████████████████</span><br><span class="line">100%|██████████████████████████████████████████████████████████████████████████████████</span><br><span class="line">██████████████████████████████████████████████| 3.62k&#x2F;3.62k [00:04&lt;00:00, 826B&#x2F;s]</span><br><span class="line"></span><br><span class="line">View at:</span><br><span class="line">https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;pkg-01&#x2F;0.0.1&#x2F;</span><br><span class="line"></span><br><span class="line">(PythonBaseEnv) G:\study\pkg_01&gt;</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>打开浏览器 输入 <a href="https://pypi.org/project/pkg-01/0.0.1/" target="_blank" rel="noopener">https://pypi.org/project/pkg-01/0.0.1/</a> 既可以看到发布的包了</td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python专题系列(3)--configparser详解</title>
      <link href="/blog/2020/08/06/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(3)--configparser%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/06/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(3)--configparser%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-configparser-使用get方式读取-ini配置文件的配置内容"><a href="#1-configparser-使用get方式读取-ini配置文件的配置内容" class="headerlink" title="1 configparser 使用get方式读取.ini配置文件的配置内容"></a>1 configparser 使用get方式读取.ini配置文件的配置内容</h4><ul><li>（1）首先编写如下所示的env.ini配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">ip&#x3D;192.168.1.200</span><br><span class="line">port&#x3D;22</span><br><span class="line">username&#x3D;root</span><br><span class="line">password&#x3D;root</span><br><span class="line"></span><br><span class="line">[personal]</span><br><span class="line">name&#x3D;redrose2100</span><br><span class="line">city&#x3D;nanjing</span><br><span class="line">github&#x3D;redrose2100.github.io</span><br></pre></td></tr></table></figure></li><li>（2） 编写解析.ini配置文件的python代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(config.get(&quot;server&quot;,&quot;ip&quot;))</span><br><span class="line">print(config.get(&quot;personal&quot;,&quot;name&quot;))</span><br></pre></td></tr></table></figure>运行结果为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.200</span><br><span class="line">redrose2100</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-使用数组下标的方式读取-ini配置文件的内容"><a href="#2-使用数组下标的方式读取-ini配置文件的内容" class="headerlink" title="2 使用数组下标的方式读取.ini配置文件的内容"></a>2 使用数组下标的方式读取.ini配置文件的内容</h4><p>env.ini的内容同上述1中的内容</p><p>通过数组下标的方式读取配置文件内容的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(config[&quot;server&quot;][&quot;ip&quot;])</span><br><span class="line">print(config[&quot;personal&quot;][&quot;name&quot;])</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.200</span><br><span class="line">redrose2100</span><br></pre></td></tr></table></figure><h4 id="3-使用configparser写配置文件"><a href="#3-使用configparser写配置文件" class="headerlink" title="3 使用configparser写配置文件"></a>3 使用configparser写配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line">config[&quot;server&quot;]&#x3D;&#123;</span><br><span class="line">    &quot;ip&quot;:&quot;192.138.1.200&quot;,</span><br><span class="line">    &quot;port&quot;:22,</span><br><span class="line">    &quot;username&quot;:&quot;root&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;root&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config[&quot;personal&quot;]&#x3D;&#123;</span><br><span class="line">    &quot;name&quot;:&quot;redrose2100&quot;,</span><br><span class="line">    &quot;city&quot;:&quot;nanjing&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">with open(&quot;test.ini&quot;,&quot;w&quot;) as f:</span><br><span class="line">    config.write(f)</span><br></pre></td></tr></table></figure><p>执行之后，在当前目录下会生成一个test.ini文件，其内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">ip &#x3D; 192.138.1.200</span><br><span class="line">port &#x3D; 22</span><br><span class="line">username &#x3D; root</span><br><span class="line">password &#x3D; root</span><br><span class="line"></span><br><span class="line">[personal]</span><br><span class="line">name &#x3D; redrose2100</span><br><span class="line">city &#x3D; nanjing</span><br></pre></td></tr></table></figure><h4 id="4-configparser-对section常用的操作："><a href="#4-configparser-对section常用的操作：" class="headerlink" title="4 configparser 对section常用的操作："></a>4 configparser 对section常用的操作：</h4><ul><li>（1）has_section(section) 判断读取的config对象是否还有指定的section</li><li>（2）sections() 获取读取到的config对象的所有sections列表</li><li>（3）add_section(section) 给读取到的config对象增加一个section，注意此时增加的section只是在config对象中，并没有写入到ini配置文件中</li><li>（4）remove_section(section) 给读取到的config对象删除一个section<br>实例代码如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line">print(config.has_section(&quot;server&quot;))</span><br><span class="line">print(config.sections())</span><br><span class="line">config.add_section(&quot;kafka&quot;)</span><br><span class="line">print(config.sections())</span><br><span class="line">config.remove_section(&quot;kafka&quot;)</span><br><span class="line">print(config.sections())</span><br></pre></td></tr></table></figure>运行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line">print(config.has_section(&quot;server&quot;))</span><br><span class="line">print(config.sections())</span><br><span class="line">config.add_section(&quot;kafka&quot;)</span><br><span class="line">print(config.sections())</span><br><span class="line">config.remove_section(&quot;kafka&quot;)</span><br><span class="line">print(config.sections())</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-configparser对option常用的操作，如下代码演示："><a href="#5-configparser对option常用的操作，如下代码演示：" class="headerlink" title="5 configparser对option常用的操作，如下代码演示："></a>5 configparser对option常用的操作，如下代码演示：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line">print(config.has_option(&quot;server&quot;,&quot;ip&quot;))</span><br><span class="line">print(config.options(&quot;server&quot;))</span><br><span class="line">config.set(&quot;server&quot;,&quot;test&quot;,&quot;test&quot;)</span><br><span class="line">print(config.options(&quot;server&quot;))</span><br><span class="line">config.remove_option(&quot;server&quot;,&quot;test&quot;)</span><br><span class="line">print(config.options(&quot;server&quot;))</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">[&#39;ip&#39;, &#39;port&#39;, &#39;username&#39;, &#39;password&#39;]</span><br><span class="line">[&#39;ip&#39;, &#39;port&#39;, &#39;username&#39;, &#39;password&#39;, &#39;test&#39;]</span><br><span class="line">[&#39;ip&#39;, &#39;port&#39;, &#39;username&#39;, &#39;password&#39;]</span><br></pre></td></tr></table></figure><h4 id="6-configparser的对象可以类似字典一样使用，但是类型不是字典，代码演示如下："><a href="#6-configparser的对象可以类似字典一样使用，但是类型不是字典，代码演示如下：" class="headerlink" title="6 configparser的对象可以类似字典一样使用，但是类型不是字典，代码演示如下："></a>6 configparser的对象可以类似字典一样使用，但是类型不是字典，代码演示如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line">for key in config[&quot;server&quot;].keys():</span><br><span class="line">    print(key)</span><br><span class="line"></span><br><span class="line">for key,value in config[&quot;server&quot;].items():</span><br><span class="line">    print(key,value)</span><br><span class="line"></span><br><span class="line">for value in config[&quot;server&quot;].values():</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line">item&#x3D;config[&quot;server&quot;].popitem()</span><br><span class="line">print(type(item))</span><br><span class="line">print(item)</span><br><span class="line"></span><br><span class="line">port&#x3D;config[&quot;server&quot;].pop(&quot;port&quot;)</span><br><span class="line">print(port)</span><br><span class="line"></span><br><span class="line">for key,value in config[&quot;server&quot;].items():</span><br><span class="line">    print(key,value)</span><br><span class="line"></span><br><span class="line">username&#x3D;config[&quot;server&quot;].get(&quot;username&quot;,&quot;no found&quot;)</span><br><span class="line">print(username)</span><br><span class="line"></span><br><span class="line">print(type(config[&quot;server&quot;]))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ip</span><br><span class="line">port</span><br><span class="line">username</span><br><span class="line">password</span><br><span class="line">ip 192.168.1.200</span><br><span class="line">port 22</span><br><span class="line">username root</span><br><span class="line">password root</span><br><span class="line">192.168.1.200</span><br><span class="line">22</span><br><span class="line">root</span><br><span class="line">root</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br><span class="line">(&#39;ip&#39;, &#39;192.168.1.200&#39;)</span><br><span class="line">22</span><br><span class="line">username root</span><br><span class="line">password root</span><br><span class="line">root</span><br><span class="line">&lt;class &#39;configparser.SectionProxy&#39;&gt;</span><br></pre></td></tr></table></figure><h4 id="7-可以将获取的类型直接转换为期望的数据类型，可用的方法有："><a href="#7-可以将获取的类型直接转换为期望的数据类型，可用的方法有：" class="headerlink" title="7 可以将获取的类型直接转换为期望的数据类型，可用的方法有："></a>7 可以将获取的类型直接转换为期望的数据类型，可用的方法有：</h4><ul><li>getint</li><li>getboolean</li><li>getfloat</li><li>get<br>下面将配置文件更新如下内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">ip&#x3D;192.168.1.200</span><br><span class="line">port&#x3D;22</span><br><span class="line">username&#x3D;root</span><br><span class="line">password&#x3D;root</span><br><span class="line">is_linux&#x3D;True</span><br><span class="line">price&#x3D;100.24</span><br><span class="line"></span><br><span class="line">[personal]</span><br><span class="line">name&#x3D;redrose2100</span><br><span class="line">city&#x3D;nanjing</span><br><span class="line">github&#x3D;redrose2100.github.io</span><br></pre></td></tr></table></figure>实例代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line">ip&#x3D;config[&quot;server&quot;].get(&quot;ip&quot;)</span><br><span class="line">port&#x3D;config[&quot;server&quot;].getint(&quot;port&quot;)</span><br><span class="line">is_linux&#x3D;config[&quot;server&quot;].getboolean(&quot;is_linux&quot;)</span><br><span class="line">price&#x3D;config[&quot;server&quot;].getfloat(&quot;price&quot;)</span><br><span class="line">print(ip,type(ip))</span><br><span class="line">print(port,type(port))</span><br><span class="line">print(is_linux,type(is_linux))</span><br><span class="line">print(price,type(price))</span><br></pre></td></tr></table></figure>运行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.200 &lt;class &#39;str&#39;&gt;</span><br><span class="line">22 &lt;class &#39;int&#39;&gt;</span><br><span class="line">True &lt;class &#39;bool&#39;&gt;</span><br><span class="line">100.24 &lt;class &#39;float&#39;&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-configparser标准库对解析-conf文件与解析-ini文件的使用方法是完全一样的，下面只演示一部分："><a href="#8-configparser标准库对解析-conf文件与解析-ini文件的使用方法是完全一样的，下面只演示一部分：" class="headerlink" title="8 configparser标准库对解析.conf文件与解析.ini文件的使用方法是完全一样的，下面只演示一部分："></a>8 configparser标准库对解析.conf文件与解析.ini文件的使用方法是完全一样的，下面只演示一部分：</h4><p>创建一个env.conf文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">ip&#x3D;192.168.1.200</span><br><span class="line">port&#x3D;22</span><br><span class="line">username&#x3D;root</span><br><span class="line">password&#x3D;root</span><br><span class="line">is_linux&#x3D;True</span><br><span class="line">price&#x3D;100.24</span><br><span class="line"></span><br><span class="line">[personal]</span><br><span class="line">name&#x3D;redrose2100</span><br><span class="line">city&#x3D;nanjing</span><br><span class="line">github&#x3D;redrose2100.github.io</span><br></pre></td></tr></table></figure><p>编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.conf&quot;,&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(config.get(&quot;server&quot;,&quot;ip&quot;))</span><br><span class="line">print(config.get(&quot;personal&quot;,&quot;name&quot;))</span><br><span class="line"></span><br><span class="line">print(config[&quot;server&quot;][&quot;ip&quot;])</span><br><span class="line">print(config[&quot;personal&quot;][&quot;name&quot;])</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.200</span><br><span class="line">redrose2100</span><br><span class="line">192.168.1.200</span><br><span class="line">redrose2100</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python专题系列(2)--paramiko详解</title>
      <link href="/blog/2020/08/05/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(2)--paramiko%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/05/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(2)--paramiko%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-第三方库需要安装，使用如下命令安装"><a href="#1-第三方库需要安装，使用如下命令安装" class="headerlink" title="1 第三方库需要安装，使用如下命令安装"></a>1 第三方库需要安装，使用如下命令安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install paramiko</span><br></pre></td></tr></table></figure><h4 id="2-如下代码使用paramiko进行ssh连接，仅有三行代码即可实现对一个虚拟机的ssh连接（注：192-168-1-200-是我自己搭建的一个linux虚拟机）"><a href="#2-如下代码使用paramiko进行ssh连接，仅有三行代码即可实现对一个虚拟机的ssh连接（注：192-168-1-200-是我自己搭建的一个linux虚拟机）" class="headerlink" title="2 如下代码使用paramiko进行ssh连接，仅有三行代码即可实现对一个虚拟机的ssh连接（注：192.168.1.200 是我自己搭建的一个linux虚拟机）"></a>2 如下代码使用paramiko进行ssh连接，仅有三行代码即可实现对一个虚拟机的ssh连接（注：192.168.1.200 是我自己搭建的一个linux虚拟机）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import paramiko</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    ssh&#x3D;paramiko.SSHClient()</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    ssh.connect(hostname&#x3D;&quot;192.168.1.200&quot;,port&#x3D;22,username&#x3D;&quot;root&quot;,password&#x3D;&quot;root&quot;)</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>执行结果为空，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-使用exec-command在虚拟机上执行linux命令"><a href="#3-使用exec-command在虚拟机上执行linux命令" class="headerlink" title="3 使用exec_command在虚拟机上执行linux命令"></a>3 使用exec_command在虚拟机上执行linux命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import paramiko</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    ssh&#x3D;paramiko.SSHClient()</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    ssh.connect(hostname&#x3D;&quot;192.168.1.200&quot;,port&#x3D;22,username&#x3D;&quot;root&quot;,password&#x3D;&quot;root&quot;)</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    exec_command() 返回三个参数，分别是：</span><br><span class="line">    1 、标准输入    用于实现交互式命令</span><br><span class="line">    2 、标准输出    保存命令的正常执行结果</span><br><span class="line">    3 、标准错误    保存命令的错误信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    stdin,stdout,stderr&#x3D;ssh.exec_command(&quot;ls -l &#x2F;root&quot;)</span><br><span class="line">    output&#x3D;stdout.read()</span><br><span class="line">    output&#x3D;output.decode(&quot;utf-8&quot;)</span><br><span class="line">    print(output)</span><br><span class="line">    ssh.close()</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">total 36</span><br><span class="line">-rw-------. 1 root root  2078 Jun 21 16:21 anaconda-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Desktop</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Documents</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Downloads</span><br><span class="line">-rw-r--r--. 1 root root  2126 Jun 21 16:24 initial-setup-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Music</span><br><span class="line">-rw-r--r--. 1 root root 25548 Apr  7  2017 mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Pictures</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Public</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Templates</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Videos</span><br></pre></td></tr></table></figure><h4 id="4-connect-函数设置超时为1秒，并且在连接的前后打印当前系统时间，粗略的观察建立连接需要的时间"><a href="#4-connect-函数设置超时为1秒，并且在连接的前后打印当前系统时间，粗略的观察建立连接需要的时间" class="headerlink" title="4 connect()函数设置超时为1秒，并且在连接的前后打印当前系统时间，粗略的观察建立连接需要的时间"></a>4 connect()函数设置超时为1秒，并且在连接的前后打印当前系统时间，粗略的观察建立连接需要的时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line">import paramiko</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    ssh&#x3D;paramiko.SSHClient()</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    print(datetime.datetime.now())</span><br><span class="line">    ssh.connect(hostname&#x3D;&quot;192.168.1.200&quot;,port&#x3D;22,username&#x3D;&quot;root&quot;,password&#x3D;&quot;root&quot;,timeout&#x3D;1.0)</span><br><span class="line">    print(datetime.datetime.now())</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    exec_command() 返回三个参数，分别是：</span><br><span class="line">    1 、标准输入    用于实现交互式命令</span><br><span class="line">    2 、标准输出    保存命令的正常执行结果</span><br><span class="line">    3 、标准错误    保存命令的错误信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    stdin,stdout,stderr&#x3D;ssh.exec_command(&quot;ls -l &#x2F;root&quot;)</span><br><span class="line">    output&#x3D;stdout.read()</span><br><span class="line">    output&#x3D;output.decode(&quot;utf-8&quot;)</span><br><span class="line">    print(output)</span><br><span class="line">    ssh.close()</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>执行结果如下：执行成功，有兴趣把timeout设置为0.0001试试，会发现会报连接超时错误，这里不再演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2020-08-05 23:57:28.793856</span><br><span class="line">2020-08-05 23:57:28.968389</span><br><span class="line">total 36</span><br><span class="line">-rw-------. 1 root root  2078 Jun 21 16:21 anaconda-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Desktop</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Documents</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Downloads</span><br><span class="line">-rw-r--r--. 1 root root  2126 Jun 21 16:24 initial-setup-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Music</span><br><span class="line">-rw-r--r--. 1 root root 25548 Apr  7  2017 mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Pictures</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Public</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Templates</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Videos</span><br></pre></td></tr></table></figure><h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4>]]></content>
      
      
      <categories>
          
          <category> python专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python专题系列(1)--logging详解</title>
      <link href="/blog/2020/08/02/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(1)--logging%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/02/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(1)--logging%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-logging-日志级别"><a href="#1-logging-日志级别" class="headerlink" title="1 logging 日志级别"></a>1 logging 日志级别</h4><table><thead><tr><th align="left">级别</th><th align="left">级别数量</th><th align="left">使用场合</th></tr></thead><tbody><tr><td align="left">DEBUG</td><td align="left">10</td><td align="left">详细信息，常用语调试</td></tr><tr><td align="left">INFO</td><td align="left">20</td><td align="left">程序正常运行过程中产生的一些信息</td></tr><tr><td align="left">WARNING</td><td align="left">20</td><td align="left">警告用户，虽然程序还在正常工作，但有可能发生错误</td></tr><tr><td align="left">ERROR</td><td align="left">40</td><td align="left">由于更严重的问题，程序已不能执行一些功能了</td></tr><tr><td align="left">CRITICAL</td><td align="left">50</td><td align="left">严重错误，程序已不能继续运行了</td></tr></tbody></table><h4 id="2-logging-默认的是warning级别"><a href="#2-logging-默认的是warning级别" class="headerlink" title="2 logging 默认的是warning级别"></a>2 logging 默认的是warning级别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.debug(&quot;this is debug log&quot;)</span><br><span class="line">logging.info(&quot;this is info log&quot;)</span><br><span class="line">logging.warning(&quot;this is warning log&quot;)</span><br><span class="line">logging.error(&quot;this is error log&quot;)</span><br><span class="line">logging.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br></pre></td></tr></table></figure><h4 id="3-可以通过logging-basicConfig-level-logging-DEBUG-来设置日志级别"><a href="#3-可以通过logging-basicConfig-level-logging-DEBUG-来设置日志级别" class="headerlink" title="3 可以通过logging.basicConfig(level=logging.DEBUG) 来设置日志级别"></a>3 可以通过logging.basicConfig(level=logging.DEBUG) 来设置日志级别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level&#x3D;logging.DEBUG)</span><br><span class="line">logging.debug(&quot;this is debug log&quot;)</span><br><span class="line">logging.info(&quot;this is info log&quot;)</span><br><span class="line">logging.warning(&quot;this is warning log&quot;)</span><br><span class="line">logging.error(&quot;this is error log&quot;)</span><br><span class="line">logging.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is debug log</span><br><span class="line">INFO:root:this is info log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br></pre></td></tr></table></figure><h4 id="4-logging日志是一部写入的，logging打印的内容和print打印的内筒先后顺序是不一致的"><a href="#4-logging日志是一部写入的，logging打印的内容和print打印的内筒先后顺序是不一致的" class="headerlink" title="4 logging日志是一部写入的，logging打印的内容和print打印的内筒先后顺序是不一致的"></a>4 logging日志是一部写入的，logging打印的内容和print打印的内筒先后顺序是不一致的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">print(&quot;this is print log&quot;)</span><br><span class="line">logging.basicConfig(level&#x3D;logging.DEBUG)</span><br><span class="line">logging.debug(&quot;this is debug log&quot;)</span><br><span class="line">logging.info(&quot;this is info log&quot;)</span><br><span class="line">logging.warning(&quot;this is warning log&quot;)</span><br><span class="line">logging.error(&quot;this is error log&quot;)</span><br><span class="line">logging.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行结果有可能是下面这种输出顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is debug log</span><br><span class="line">INFO:root:this is info log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br><span class="line">this is print log</span><br></pre></td></tr></table></figure><h4 id="5-logging-basicConfig-filename-”demo-log”-可以指定日志文件名，默认在当前目录下生成文件，此时不再往屏幕打印日志，而是将日志信息输出到指定的日志文件中去"><a href="#5-logging-basicConfig-filename-”demo-log”-可以指定日志文件名，默认在当前目录下生成文件，此时不再往屏幕打印日志，而是将日志信息输出到指定的日志文件中去" class="headerlink" title="5 logging.basicConfig(filename=”demo.log”)可以指定日志文件名，默认在当前目录下生成文件，此时不再往屏幕打印日志，而是将日志信息输出到指定的日志文件中去"></a>5 logging.basicConfig(filename=”demo.log”)可以指定日志文件名，默认在当前目录下生成文件，此时不再往屏幕打印日志，而是将日志信息输出到指定的日志文件中去</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">print(&quot;this is print log&quot;)</span><br><span class="line">logging.basicConfig(filename&#x3D;&quot;demo.log&quot;,level&#x3D;logging.DEBUG)</span><br><span class="line">logging.debug(&quot;this is debug log&quot;)</span><br><span class="line">logging.info(&quot;this is info log&quot;)</span><br><span class="line">logging.warning(&quot;this is warning log&quot;)</span><br><span class="line">logging.error(&quot;this is error log&quot;)</span><br><span class="line">logging.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行后屏幕上输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is print log</span><br></pre></td></tr></table></figure><p>而在当前文件下生成了一个demo.log的日志文件，此日志文件的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is debug log</span><br><span class="line">INFO:root:this is info log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br></pre></td></tr></table></figure><h4 id="6-logging-basicConfig-filemode-’w’-可以指定日志文件的模式，w表示每次清空日志文件，重新写入，a表示在日志文件后面追加，默认的模式为a"><a href="#6-logging-basicConfig-filemode-’w’-可以指定日志文件的模式，w表示每次清空日志文件，重新写入，a表示在日志文件后面追加，默认的模式为a" class="headerlink" title="6 logging.basicConfig(filemode=’w’) 可以指定日志文件的模式，w表示每次清空日志文件，重新写入，a表示在日志文件后面追加，默认的模式为a"></a>6 logging.basicConfig(filemode=’w’) 可以指定日志文件的模式，w表示每次清空日志文件，重新写入，a表示在日志文件后面追加，默认的模式为a</h4><p>将上述 5 中的实例代码再执行一次，demo.log中内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is debug log</span><br><span class="line">INFO:root:this is info log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br><span class="line">DEBUG:root:this is debug log</span><br><span class="line">INFO:root:this is info log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br></pre></td></tr></table></figure><p>若代码修改为如下，再执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">print(&quot;this is print log&quot;)</span><br><span class="line">logging.basicConfig(filename&#x3D;&quot;demo.log&quot;,filemode&#x3D;&#39;w&#39;,level&#x3D;logging.DEBUG)</span><br><span class="line">logging.debug(&quot;this is debug log&quot;)</span><br><span class="line">logging.info(&quot;this is info log&quot;)</span><br><span class="line">logging.warning(&quot;this is warning log&quot;)</span><br><span class="line">logging.error(&quot;this is error log&quot;)</span><br><span class="line">logging.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行后，demo.log中的内容又恢复到如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is debug log</span><br><span class="line">INFO:root:this is info log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br></pre></td></tr></table></figure><h4 id="7-logging-向日志中写入变量的方式"><a href="#7-logging-向日志中写入变量的方式" class="headerlink" title="7 logging 向日志中写入变量的方式"></a>7 logging 向日志中写入变量的方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level&#x3D;logging.DEBUG)</span><br><span class="line">name&#x3D;&quot;zhangsan&quot;</span><br><span class="line">age&#x3D;20</span><br><span class="line">logging.debug(&quot;name: %s age: %d&quot;,name,age)</span><br><span class="line">logging.info(&quot;name: %s age: %d&quot; %(name,age))</span><br><span class="line">logging.warning(&quot;name: &#123;&#125; age: &#123;&#125;&quot;.format(name,age))</span><br><span class="line">logging.error(&quot;name: &#123;name&#125; age: &#123;age&#125;&quot;.format(name&#x3D;name,age&#x3D;age))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:name: zhangsan age: 20</span><br><span class="line">INFO:root:name: zhangsan age: 20</span><br><span class="line">WARNING:root:name: zhangsan age: 20</span><br><span class="line">ERROR:root:name: zhangsan age: 20</span><br></pre></td></tr></table></figure><h4 id="8-日志内容格式增加一些公共的内容"><a href="#8-日志内容格式增加一些公共的内容" class="headerlink" title="8 日志内容格式增加一些公共的内容"></a>8 日志内容格式增加一些公共的内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(format&#x3D;(&quot;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s&quot;),</span><br><span class="line">                    datefmt&#x3D;&quot;%Y-%m-%d_%H:%M:%S&quot;,</span><br><span class="line">                    level&#x3D;logging.DEBUG)</span><br><span class="line">name&#x3D;&quot;zhangsan&quot;</span><br><span class="line">age&#x3D;20</span><br><span class="line">logging.debug(&quot;name: %s age: %d&quot;,name,age)</span><br><span class="line">logging.info(&quot;name: %s age: %d&quot; %(name,age))</span><br><span class="line">logging.warning(&quot;name: &#123;&#125; age: &#123;&#125;&quot;.format(name,age))</span><br><span class="line">logging.error(&quot;name: &#123;name&#125; age: &#123;age&#125;&quot;.format(name&#x3D;name,age&#x3D;age))</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-08-03_07:20:42 | DEBUG | test1.py:9 | name: zhangsan age: 20</span><br><span class="line">2020-08-03_07:20:42 | INFO | test1.py:10 | name: zhangsan age: 20</span><br><span class="line">2020-08-03_07:20:42 | WARNING | test1.py:11 | name: zhangsan age: 20</span><br><span class="line">2020-08-03_07:20:42 | ERROR | test1.py:12 | name: zhangsan age: 20</span><br></pre></td></tr></table></figure><h4 id="9-logging的高级应用"><a href="#9-logging的高级应用" class="headerlink" title="9 logging的高级应用"></a>9 logging的高级应用</h4><p>logging模块采用了模块化设计，主要包含四种组件</p><ul><li>Loggers：记录器，提供应用程序代码能直接使用的接口</li><li>Handlers：处理器，将记录器产生的日志发送到目的地</li><li>Filters：过滤器，提供更好的粒度控制，决定哪些日志会被输出</li><li>格式化器：设置内置内容的组成结构和消息字段</li></ul><h4 id="10-logging的高级应用流程"><a href="#10-logging的高级应用流程" class="headerlink" title="10 logging的高级应用流程"></a>10 logging的高级应用流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">                             |---创建屏幕StreamHandler--设置日志等级---|</span><br><span class="line">创建一个logger并设置默认等级---|                                       |----创建formatter----用formatter渲染所有的hansdler----将所有的handler加入logger内----程序调用logger</span><br><span class="line">                             |---创建文件FileHandler--设置日志等级-----|</span><br></pre></td></tr></table></figure><h4 id="11-loggers记录器"><a href="#11-loggers记录器" class="headerlink" title="11 loggers记录器"></a>11 loggers记录器</h4><ul><li><p>提供应用程序的调用接口</p><p> logger=logging。getLogger(<strong>name</strong>)<br> logger是单例的</p></li><li><p>决定日志记录的级别</p><p> logger.setLevel()</p></li><li><p>将日志内容传递到相关联的handlers中</p><p> logger.addHandler()</p><p> logger。removeHandler()</p></li></ul><h4 id="12-handler处理器"><a href="#12-handler处理器" class="headerlink" title="12 handler处理器"></a>12 handler处理器</h4><ul><li><p>StreamHandler</p><p> 标准输出stdout（如显示器）分发器</p><p> 创建方法： sh=logging.StreamHandler(stream=None)</p></li><li><p>FileHandler</p><p> 将日志保存到磁盘文件的处理器</p><p> 创建方法：fh=logging.FileHandler(filename,mode=”a”,enconding=None,delay=False)</p></li><li><p>setFormatter(): 设置当前handler对象使用的消息格斯</p></li></ul><h4 id="13-常用的Handlers处理器"><a href="#13-常用的Handlers处理器" class="headerlink" title="13 常用的Handlers处理器"></a>13 常用的Handlers处理器</h4><ul><li>StreamHandler</li><li>FileHandler</li><li>BaseRotatingHandler</li><li>RotatingHandler</li><li>TimedRotatingFileHandler</li><li>SocketHandler</li><li>DatagramHandler</li><li>SMTPHandler</li><li>SysLogHandler</li><li>NTEventLogHandler</li><li>HTTPHandler</li><li>WatchedFileHandler</li><li>QueueHandler</li><li>NullHandler</li></ul><h4 id="14-常见的formatter格式"><a href="#14-常见的formatter格式" class="headerlink" title="14 常见的formatter格式"></a>14 常见的formatter格式</h4><table><thead><tr><th>属性</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>asctime</td><td>%(asctime)s</td><td>日志产生的时间，默认格式为2020-08-03 12.12.12,265</td></tr><tr><td>created</td><td>%(created)f</td><td>time.time()生成的日志创建时间戳</td></tr><tr><td>filename</td><td>%(filename)s</td><td>生成日志的程序名</td></tr><tr><td>funcName</td><td>%(funcName)s</td><td>调用日志的函数名</td></tr><tr><td>levelname</td><td>%(levelname)s</td><td>日志级别（DEBUG,INFO,WARNING,ERROR,CRITICAL)</td></tr><tr><td>levelno</td><td>%(levelno)s</td><td>日志级别对应的数值</td></tr><tr><td>lineno</td><td>%(lineno)s)</td><td>日志所针对的代码行号（如果可用的话）</td></tr><tr><td>module</td><td>%(module)s</td><td>生成日志的模块名</td></tr><tr><td>mesecs</td><td>%(mesecs)d</td><td>日志生成的时间的毫秒部分</td></tr><tr><td>message</td><td>%(message)s</td><td>具体的日志信息</td></tr><tr><td>name</td><td>%(name)s</td><td>日志调用者</td></tr><tr><td>pathname</td><td>%(pathname)s</td><td>生成日志的文件的完整路径</td></tr><tr><td>process</td><td>%(process)d</td><td>生成日志的进程id（如果可用）</td></tr><tr><td>processName</td><td>%(processName)s</td><td>进程名（如果可用）</td></tr><tr><td>thread</td><td>%(thread)d</td><td>生成日志的线程id（如果可用）</td></tr><tr><td>threadName</td><td>%(threadName)s</td><td>线程名（如果可用）</td></tr></tbody></table><h4 id="15-下面两段代码的功能是完全一样的，使用logging直接调info、debug等日志与实例化一个默认的root-logger是一样的，换言之，使用logging直接调日志方法的方式就是通过获取root日志来实现的"><a href="#15-下面两段代码的功能是完全一样的，使用logging直接调info、debug等日志与实例化一个默认的root-logger是一样的，换言之，使用logging直接调日志方法的方式就是通过获取root日志来实现的" class="headerlink" title="15 下面两段代码的功能是完全一样的，使用logging直接调info、debug等日志与实例化一个默认的root logger是一样的，换言之，使用logging直接调日志方法的方式就是通过获取root日志来实现的"></a>15 下面两段代码的功能是完全一样的，使用logging直接调info、debug等日志与实例化一个默认的root logger是一样的，换言之，使用logging直接调日志方法的方式就是通过获取root日志来实现的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.debug(&quot;this is debug log&quot;)</span><br><span class="line">logging.info(&quot;this is info log&quot;)</span><br><span class="line">logging.warning(&quot;this is warning log&quot;)</span><br><span class="line">logging.error(&quot;this is error log&quot;)</span><br><span class="line">logging.critical(&quot;this is critical log&quot;)</span><br><span class="line"></span><br><span class="line">logger&#x3D;logging.getLogger()</span><br><span class="line">logger.debug(&quot;this is debug log&quot;)</span><br><span class="line">logger.info(&quot;this is info log&quot;)</span><br><span class="line">logger.warning(&quot;this is warning log&quot;)</span><br><span class="line">logger.error(&quot;this is error log&quot;)</span><br><span class="line">logger.critical(&quot;this is critical log&quot;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br></pre></td></tr></table></figure><h4 id="16-下面一段代码使用getLogger时指定一个名称，即实例化一个logger，然后设置两种处理器，分别往控制台和文件中写日志，还可以设置日志内容的格式，具体如下所示"><a href="#16-下面一段代码使用getLogger时指定一个名称，即实例化一个logger，然后设置两种处理器，分别往控制台和文件中写日志，还可以设置日志内容的格式，具体如下所示" class="headerlink" title="16 下面一段代码使用getLogger时指定一个名称，即实例化一个logger，然后设置两种处理器，分别往控制台和文件中写日志，还可以设置日志内容的格式，具体如下所示"></a>16 下面一段代码使用getLogger时指定一个名称，即实例化一个logger，然后设置两种处理器，分别往控制台和文件中写日志，还可以设置日志内容的格式，具体如下所示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger&#x3D;logging.getLogger(&quot;test&quot;)</span><br><span class="line"></span><br><span class="line">console_handler&#x3D;logging.StreamHandler()</span><br><span class="line">console_handler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">file_handler&#x3D;logging.FileHandler(filename&#x3D;&quot;demo.log&quot;)</span><br><span class="line">file_handler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">formatter&#x3D;logging.Formatter(fmt&#x3D;&quot;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s&quot;)</span><br><span class="line"></span><br><span class="line">console_handler.setFormatter(formatter)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">log&#x3D;logger</span><br><span class="line"></span><br><span class="line">log.debug(&quot;this is debug log&quot;)</span><br><span class="line">log.info(&quot;this is info log&quot;)</span><br><span class="line">log.warning(&quot;this is warning log&quot;)</span><br><span class="line">log.error(&quot;this is error log&quot;)</span><br><span class="line">log.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-08-04 23:08:56,625 | WARNING | test1.py:25 | this is warning log</span><br><span class="line">2020-08-04 23:08:56,625 | ERROR | test1.py:26 | this is error log</span><br><span class="line">2020-08-04 23:08:56,625 | CRITICAL | test1.py:27 | this is critical log</span><br></pre></td></tr></table></figure><p>并且在demo.log日志文件中写入了如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-08-04 23:08:56,625 | WARNING | test1.py:25 | this is warning log</span><br><span class="line">2020-08-04 23:08:56,625 | ERROR | test1.py:26 | this is error log</span><br><span class="line">2020-08-04 23:08:56,625 | CRITICAL | test1.py:27 | this is critical log</span><br></pre></td></tr></table></figure><h4 id="17-上述-16-的日志打印明显与本来的期望是不一致的，本来期望控制台和文件都是设置了DEBUG级别，但实际上控制台和文件中都打印了Warning的级别的日志"><a href="#17-上述-16-的日志打印明显与本来的期望是不一致的，本来期望控制台和文件都是设置了DEBUG级别，但实际上控制台和文件中都打印了Warning的级别的日志" class="headerlink" title="17 上述 16 的日志打印明显与本来的期望是不一致的，本来期望控制台和文件都是设置了DEBUG级别，但实际上控制台和文件中都打印了Warning的级别的日志"></a>17 上述 16 的日志打印明显与本来的期望是不一致的，本来期望控制台和文件都是设置了DEBUG级别，但实际上控制台和文件中都打印了Warning的级别的日志</h4><p>这里需要注意的是，logger默认的日志级别是warning，而日志的最终级别将取决于logger和handler级别的最高级别，所以上述16中虽然控制台和文件handler的日志级别都设置了debug，但是因为logger默认级别是warning，所以最终打印的都是warning级别，下面一段代码将logger设置为debug级别，然后将控制台设置为info，将文件handler设置为warning，然后再看一下效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger&#x3D;logging.getLogger(&quot;test&quot;)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">console_handler&#x3D;logging.StreamHandler()</span><br><span class="line">console_handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">file_handler&#x3D;logging.FileHandler(filename&#x3D;&quot;demo.log&quot;)</span><br><span class="line">file_handler.setLevel(logging.WARNING)</span><br><span class="line"></span><br><span class="line">formatter&#x3D;logging.Formatter(fmt&#x3D;&quot;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s&quot;)</span><br><span class="line"></span><br><span class="line">console_handler.setFormatter(formatter)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">log&#x3D;logger</span><br><span class="line"></span><br><span class="line">log.debug(&quot;this is debug log&quot;)</span><br><span class="line">log.info(&quot;this is info log&quot;)</span><br><span class="line">log.warning(&quot;this is warning log&quot;)</span><br><span class="line">log.error(&quot;this is error log&quot;)</span><br><span class="line">log.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-08-04 23:21:37,888 | INFO | test1.py:25 | this is info log</span><br><span class="line">2020-08-04 23:21:37,888 | WARNING | test1.py:26 | this is warning log</span><br><span class="line">2020-08-04 23:21:37,888 | ERROR | test1.py:27 | this is error log</span><br><span class="line">2020-08-04 23:21:37,888 | CRITICAL | test1.py:28 | this is critical log</span><br></pre></td></tr></table></figure><p>而在demo.log日志文件中写入了如下内容，此时与上述分析一致了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-08-04 23:21:37,888 | WARNING | test1.py:26 | this is warning log</span><br><span class="line">2020-08-04 23:21:37,888 | ERROR | test1.py:27 | this is error log</span><br><span class="line">2020-08-04 23:21:37,888 | CRITICAL | test1.py:28 | this is critical log</span><br></pre></td></tr></table></figure><h4 id="18-定义filter并给控制台的handler加一个filter，过滤的name与日志名称不一致，如下代码，此时则不会往控制台写日志，但日志文件的日志还是正常写的"><a href="#18-定义filter并给控制台的handler加一个filter，过滤的name与日志名称不一致，如下代码，此时则不会往控制台写日志，但日志文件的日志还是正常写的" class="headerlink" title="18 定义filter并给控制台的handler加一个filter，过滤的name与日志名称不一致，如下代码，此时则不会往控制台写日志，但日志文件的日志还是正常写的"></a>18 定义filter并给控制台的handler加一个filter，过滤的name与日志名称不一致，如下代码，此时则不会往控制台写日志，但日志文件的日志还是正常写的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger&#x3D;logging.getLogger(&quot;test&quot;)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">console_handler&#x3D;logging.StreamHandler()</span><br><span class="line">console_handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">file_handler&#x3D;logging.FileHandler(filename&#x3D;&quot;demo.log&quot;)</span><br><span class="line">file_handler.setLevel(logging.WARNING)</span><br><span class="line"></span><br><span class="line">formatter&#x3D;logging.Formatter(fmt&#x3D;&quot;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s&quot;)</span><br><span class="line"></span><br><span class="line">console_handler.setFormatter(formatter)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">filter&#x3D;logging.Filter(&quot;test1&quot;)</span><br><span class="line">console_handler.addFilter(filter)</span><br><span class="line"></span><br><span class="line">log&#x3D;logger</span><br><span class="line"></span><br><span class="line">log.debug(&quot;this is debug log&quot;)</span><br><span class="line">log.info(&quot;this is info log&quot;)</span><br><span class="line">log.warning(&quot;this is warning log&quot;)</span><br><span class="line">log.error(&quot;this is error log&quot;)</span><br><span class="line">log.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>此时运行后控制台结果为空，日志文件如下日志打印正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-08-04 23:31:00,459 | WARNING | test1.py:29 | this is warning log</span><br><span class="line">2020-08-04 23:31:00,459 | ERROR | test1.py:30 | this is error log</span><br><span class="line">2020-08-04 23:31:00,459 | CRITICAL | test1.py:31 | this is critical log</span><br></pre></td></tr></table></figure><h4 id="19-配置文件的方式"><a href="#19-配置文件的方式" class="headerlink" title="19 配置文件的方式"></a>19 配置文件的方式</h4><ul><li>(1) 首先编写类似如下的log配置文件：logging.conf， 这里面定义了root和test两个logger<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[loggers]</span><br><span class="line">keys&#x3D;root,test</span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line">keys&#x3D;fileHandler,consoleHandler</span><br><span class="line"></span><br><span class="line">[formatters];</span><br><span class="line">keys&#x3D;simpleFormatter</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level&#x3D;DEBUG</span><br><span class="line">handlers&#x3D;consoleHandler</span><br><span class="line"></span><br><span class="line">[logger_test]</span><br><span class="line">level&#x3D;DEBUG</span><br><span class="line">handlers&#x3D;fileHandler,consoleHandler</span><br><span class="line">qualname&#x3D;test</span><br><span class="line">propagate&#x3D;0</span><br><span class="line"></span><br><span class="line">[handler_consoleHandler]</span><br><span class="line">class&#x3D;StreamHandler</span><br><span class="line">args&#x3D;(sys.stdout,)</span><br><span class="line">level&#x3D;DEBUG</span><br><span class="line">formatter&#x3D;simpleFormatter</span><br><span class="line"></span><br><span class="line">[handler_fileHandler]</span><br><span class="line">class&#x3D;handlers.TimedRotatingFileHandler</span><br><span class="line">args&#x3D;(&quot;test.log&quot;,&quot;midnight&quot;,1,0)</span><br><span class="line">level&#x3D;DEBUG</span><br><span class="line">formatter&#x3D;simpleFormatter</span><br><span class="line"></span><br><span class="line">[formatter_simpleFormatter]</span><br><span class="line">format&#x3D;%(asctime)s|%(levelname)s|%(filename)s[line:%(lineno)d]|%(message)s</span><br><span class="line">datafmt&#x3D;%Y-%m-%d_%H:%M:%S</span><br></pre></td></tr></table></figure></li><li>（2）然后在py文件中编写如下代码，这里演示了root的logger和test的logger两种的使用方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import logging.config</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(&quot;logging.conf&quot;)</span><br><span class="line">logger&#x3D;logging.getLogger(&quot;test&quot;)</span><br><span class="line"></span><br><span class="line">log&#x3D;logger</span><br><span class="line">log.debug(&quot;this is debug log&quot;)</span><br><span class="line">log.info(&quot;this is info log&quot;)</span><br><span class="line">log.warning(&quot;this is warning log&quot;)</span><br><span class="line">log.error(&quot;this is error log&quot;)</span><br><span class="line">log.critical(&quot;this is critical log&quot;)</span><br><span class="line"></span><br><span class="line">rlog&#x3D;logging.getLogger(&quot;root&quot;)</span><br><span class="line">rlog.debug(&quot;this is debug log&quot;)</span><br><span class="line">rlog.info(&quot;this is info log&quot;)</span><br><span class="line">rlog.warning(&quot;this is warning log&quot;)</span><br><span class="line">rlog.error(&quot;this is error log&quot;)</span><br><span class="line">rlog.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure>运行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2020-08-05 00:25:02,673|DEBUG|test1.py[line:8]|this is debug log</span><br><span class="line">2020-08-05 00:25:02,674|INFO|test1.py[line:9]|this is info log</span><br><span class="line">2020-08-05 00:25:02,674|WARNING|test1.py[line:10]|this is warning log</span><br><span class="line">2020-08-05 00:25:02,674|ERROR|test1.py[line:11]|this is error log</span><br><span class="line">2020-08-05 00:25:02,674|CRITICAL|test1.py[line:12]|this is critical log</span><br><span class="line">2020-08-05 00:25:02,674|DEBUG|test1.py[line:15]|this is debug log</span><br><span class="line">2020-08-05 00:25:02,674|INFO|test1.py[line:16]|this is info log</span><br><span class="line">2020-08-05 00:25:02,674|WARNING|test1.py[line:17]|this is warning log</span><br><span class="line">2020-08-05 00:25:02,674|ERROR|test1.py[line:18]|this is error log</span><br><span class="line">2020-08-05 00:25:02,674|CRITICAL|test1.py[line:19]|this is critical log</span><br></pre></td></tr></table></figure>同时在test.log日志文件中生成如下日志：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-08-05 00:25:02,673|DEBUG|test1.py[line:8]|this is debug log</span><br><span class="line">2020-08-05 00:25:02,674|INFO|test1.py[line:9]|this is info log</span><br><span class="line">2020-08-05 00:25:02,674|WARNING|test1.py[line:10]|this is warning log</span><br><span class="line">2020-08-05 00:25:02,674|ERROR|test1.py[line:11]|this is error log</span><br><span class="line">2020-08-05 00:25:02,674|CRITICAL|test1.py[line:12]|this is critical log</span><br></pre></td></tr></table></figure></li></ul><h4 id="20-在上述19的基础上，加入在其他文件中想使用建好的log系统进行日志的打印，有如下两种使用方法："><a href="#20-在上述19的基础上，加入在其他文件中想使用建好的log系统进行日志的打印，有如下两种使用方法：" class="headerlink" title="20 在上述19的基础上，加入在其他文件中想使用建好的log系统进行日志的打印，有如下两种使用方法："></a>20 在上述19的基础上，加入在其他文件中想使用建好的log系统进行日志的打印，有如下两种使用方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import test1</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log&#x3D;logging.getLogger(&quot;test&quot;)</span><br><span class="line"></span><br><span class="line">log.debug(&quot;this is debug log&quot;)</span><br><span class="line">log.info(&quot;this is info log&quot;)</span><br><span class="line">log.warning(&quot;this is warning log&quot;)</span><br><span class="line">log.error(&quot;this is error log&quot;)</span><br><span class="line">log.critical(&quot;this is critical log&quot;)</span><br><span class="line"></span><br><span class="line">log&#x3D;test1.logger</span><br><span class="line"></span><br><span class="line">log.debug(&quot;this is debug log&quot;)</span><br><span class="line">log.info(&quot;this is info log&quot;)</span><br><span class="line">log.warning(&quot;this is warning log&quot;)</span><br><span class="line">log.error(&quot;this is error log&quot;)</span><br><span class="line">log.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2020-08-05_00:31:35|DEBUG|test2.py[line:8]|this is debug log</span><br><span class="line">2020-08-05_00:31:35|INFO|test2.py[line:9]|this is info log</span><br><span class="line">2020-08-05_00:31:35|WARNING|test2.py[line:10]|this is warning log</span><br><span class="line">2020-08-05_00:31:35|ERROR|test2.py[line:11]|this is error log</span><br><span class="line">2020-08-05_00:31:35|CRITICAL|test2.py[line:12]|this is critical log</span><br><span class="line">2020-08-05_00:31:35|DEBUG|test2.py[line:16]|this is debug log</span><br><span class="line">2020-08-05_00:31:35|INFO|test2.py[line:17]|this is info log</span><br><span class="line">2020-08-05_00:31:35|WARNING|test2.py[line:18]|this is warning log</span><br><span class="line">2020-08-05_00:31:35|ERROR|test2.py[line:19]|this is error log</span><br><span class="line">2020-08-05_00:31:35|CRITICAL|test2.py[line:20]|this is critical log</span><br></pre></td></tr></table></figure><p>日志文件中也生成了对应的日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2020-08-05_00:31:35|DEBUG|test2.py[line:8]|this is debug log</span><br><span class="line">2020-08-05_00:31:35|INFO|test2.py[line:9]|this is info log</span><br><span class="line">2020-08-05_00:31:35|WARNING|test2.py[line:10]|this is warning log</span><br><span class="line">2020-08-05_00:31:35|ERROR|test2.py[line:11]|this is error log</span><br><span class="line">2020-08-05_00:31:35|CRITICAL|test2.py[line:12]|this is critical log</span><br><span class="line">2020-08-05_00:31:35|DEBUG|test2.py[line:16]|this is debug log</span><br><span class="line">2020-08-05_00:31:35|INFO|test2.py[line:17]|this is info log</span><br><span class="line">2020-08-05_00:31:35|WARNING|test2.py[line:18]|this is warning log</span><br><span class="line">2020-08-05_00:31:35|ERROR|test2.py[line:19]|this is error log</span><br><span class="line">2020-08-05_00:31:35|CRITICAL|test2.py[line:20]|this is critical log</span><br></pre></td></tr></table></figure><h4 id="21-在try-except语句块中，打印异常日志可以使用log-exception-e-，这个函数可以将程序错误调用栈打印出来"><a href="#21-在try-except语句块中，打印异常日志可以使用log-exception-e-，这个函数可以将程序错误调用栈打印出来" class="headerlink" title="21 在try - except语句块中，打印异常日志可以使用log.exception(e)，这个函数可以将程序错误调用栈打印出来"></a>21 在try - except语句块中，打印异常日志可以使用log.exception(e)，这个函数可以将程序错误调用栈打印出来</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import logging.config</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(&quot;logging.conf&quot;)</span><br><span class="line">logger&#x3D;logging.getLogger(&quot;test&quot;)</span><br><span class="line"></span><br><span class="line">log&#x3D;logger</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    a&#x3D;1&#x2F;0</span><br><span class="line">except Exception as e:</span><br><span class="line">    log.exception(e)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-08-05_00:35:14|ERROR|test1.py[line:12]|division by zero</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;G:&#x2F;lamb_source&#x2F;test&#x2F;log&#x2F;test1.py&quot;, line 10, in &lt;module&gt;</span><br><span class="line">    a&#x3D;1&#x2F;0</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(9)--变量与运算符</title>
      <link href="/blog/2020/07/30/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(9)--%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/blog/2020/07/30/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(9)--%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="1-python-合法标识符"><a href="#1-python-合法标识符" class="headerlink" title="1 python 合法标识符"></a>1 python 合法标识符</h4><ul><li>(1) 变量定义，python中变量不需要声明类型，可以直接对变量进行赋值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; age&#x3D;10</span><br><span class="line">&gt;&gt;&gt; names&#x3D;[&quot;a&quot;,&quot;b&quot;]</span><br></pre></td></tr></table></figure></li><li>（2） python中合法标识符有字母，数字和下划线，其中标识符的开头不能是数字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;1</span><br><span class="line">&gt;&gt;&gt; a1&#x3D;1</span><br><span class="line">&gt;&gt;&gt; a1b&#x3D;1</span><br><span class="line">&gt;&gt;&gt; a_&#x3D;1</span><br><span class="line">&gt;&gt;&gt; _a&#x3D;1</span><br><span class="line">&gt;&gt;&gt; _1&#x3D;2</span><br><span class="line">&gt;&gt;&gt; _a1&#x3D;1</span><br><span class="line">&gt;&gt;&gt; 1a&#x3D;1</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    1a&#x3D;1</span><br><span class="line">     ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(8)--python的基本类型-字典</title>
      <link href="/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(8)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E5%85%B8/"/>
      <url>/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(8)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-字典的dict的定义与特点"><a href="#1-字典的dict的定义与特点" class="headerlink" title="1 字典的dict的定义与特点"></a>1 字典的dict的定义与特点</h4><ul><li>（1）字典也是用花括号括起来的，与集合不同的是字典中的元素都是key-value对<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-dict-常用的运算"><a href="#2-dict-常用的运算" class="headerlink" title="2 dict 常用的运算"></a>2 dict 常用的运算</h4><ul><li><p>（1）字典取元素时通过key来取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">&gt;&gt;&gt; a[&quot;a&quot;]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[&quot;b&quot;]</span><br><span class="line">2</span><br></pre></td></tr></table></figure></li><li><p>（2）len() 函数计算字典中key-value对的数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>（3）max() 函数计算字典中key的最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">&#39;d&#39;</span><br></pre></td></tr></table></figure></li><li><p>（4）min() 函数计算字典中key的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">&#39;a&#39;</span><br></pre></td></tr></table></figure></li><li><p>（5） in, not in 针对字典的key判断字典中是否有给定的key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 5&#125;</span><br><span class="line">&gt;&gt;&gt; &quot;a&quot; in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 10 in a</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;b&quot; in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 10 not in a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-字典中常用函数"><a href="#3-字典中常用函数" class="headerlink" title="3 字典中常用函数"></a>3 字典中常用函数</h4><ul><li><p>（1）clear() ，将字典清空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">&gt;&gt;&gt; a.clear()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>（2）copy() 返回字典的一个浅拷贝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:[1,2,3]&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.copy()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: [1, 2, 3]&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: [1, 2, 3]&#125;</span><br><span class="line">&gt;&gt;&gt; a[&quot;b&quot;].append(4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: [1, 2, 3, 4]&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: [1, 2, 3, 4]&#125;</span><br><span class="line">&gt;&gt;&gt; a[&quot;a&quot;]&#x3D;100</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 100, &#39;b&#39;: [1, 2, 3, 4]&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: [1, 2, 3, 4]&#125;</span><br></pre></td></tr></table></figure></li><li><p>（3）fromkeys(iterable,value=None), 从iterable中的值作为键创建新的字典，每个键对应的值为value，不指定时默认为None</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;dict.fromkeys(a)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;1: None, 2: None, 3: None, 4: None, 5: None&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;dict.fromkeys(a,100)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&#123;1: 100, 2: 100, 3: 100, 4: 100, 5: 100&#125;</span><br></pre></td></tr></table></figure></li><li><p>（4）get(key,default=None)，从字典中取给定key对应的值，如果字典中没有此key，则可以通过default给定默认值，如果默认值不给定，则默认为None</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:5&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.get(&quot;a&quot;)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.get(&quot;a&quot;,10)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.get(&quot;f&quot;)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.get(&quot;f&quot;,100)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">100</span><br></pre></td></tr></table></figure></li><li><p>（5）pop(key,default=None) 从字典中弹出给定key对应的值，若key在字典中找不到，则返回default指定的值，如果key在字典中找不到，default也未指定，则报KeyError异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop(&quot;a&quot;)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop(&quot;f&quot;,100)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">100</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop(&quot;f&quot;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: &#39;f&#39;</span><br></pre></td></tr></table></figure></li><li><p>（6）update(list or dict), 将一个二元组的列表或者字典更新至现有的字典中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;&quot;c&quot;:3,&quot;d&quot;:4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;&#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; a.update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;&#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;[(1,2),(3,4)]</span><br><span class="line">&gt;&gt;&gt; a.update(c)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, 1: 2, 3: 4&#125;</span><br></pre></td></tr></table></figure></li><li><p>（7）popitem() 从字典中弹出一个（key，value）二元组，若字典为空字典，则报KeyError异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1:2,3:4,5:6&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1: 2, 3: 4, 5: 6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.popitem()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">(5, 6)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1: 2, 3: 4&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;a.popitem()</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">(3, 4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1: 2&#125;</span><br><span class="line">&gt;&gt;&gt; d&#x3D;a.popitem()</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">(1, 2)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#125;</span><br><span class="line">&gt;&gt;&gt; e&#x3D;a.popitem()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: &#39;popitem(): dictionary is empty&#39;</span><br></pre></td></tr></table></figure></li><li><p>（8）setdefault(key,default=None) 如果字典中不存在key，则将此key default加入字典中，如果字典中存在此key，则将key对应的value返回，否则返回设置的默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1:2,3:4&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.setdefault(2)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1: 2, 3: 4, 2: None&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.setdefault(4,5)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1: 2, 3: 4, 2: None, 4: 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.setdefault(1,100)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1: 2, 3: 4, 2: None, 4: 5&#125;</span><br></pre></td></tr></table></figure></li><li><p>（9）keys() 返回字典key列表的一个对象，可通过list方法转换为key的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.keys()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">dict_keys([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</span><br><span class="line">&gt;&gt;&gt; type(b)</span><br><span class="line">&lt;class &#39;dict_keys&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; list(b)</span><br><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（10）values() 返回字典value列表的一个对象，可通过list方法转换为value的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.values()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">dict_values([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; type(b)</span><br><span class="line">&lt;class &#39;dict_values&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; list(b)</span><br><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure></li><li><p>（11）items() 返回字典value-value对二元组的一个对象，可通过list方法转换为key-value的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.items()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">dict_items([(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3)])</span><br><span class="line">&gt;&gt;&gt; type(b)</span><br><span class="line">&lt;class &#39;dict_items&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; list(b)</span><br><span class="line">[(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3)]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(7)--python的基本类型-集合</title>
      <link href="/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(7)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E9%9B%86%E5%90%88/"/>
      <url>/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(7)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h4 id="1-集合的定义和特点"><a href="#1-集合的定义和特点" class="headerlink" title="1 集合的定义和特点"></a>1 集合的定义和特点</h4><ul><li>（1） 集合是用花括号括起来的，集合的特点是元素没有顺序，元素具有唯一性，不能重复<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;set&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-集合的常用运算"><a href="#2-集合的常用运算" class="headerlink" title="2 集合的常用运算"></a>2 集合的常用运算</h4><ul><li><p>（1）集合元素没有顺序，所以不能像列表和元组那样用下标取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#39;set&#39; object is not subscriptable</span><br></pre></td></tr></table></figure></li><li><p>（2）集合也不支持加法运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [1,2,3]*3</span><br><span class="line">[1, 2, 3, 1, 2, 3, 1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; &#123;1,2,3&#125;+&#123;4,5,6&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unsupported operand type(s) for +: &#39;set&#39; and &#39;set&#39;</span><br></pre></td></tr></table></figure></li><li><p>（3）len() 函数返回集合的长度，即集合中元素的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">5</span><br></pre></td></tr></table></figure></li><li><p>（4）max() 函数返回集合中元素的最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">5</span><br></pre></td></tr></table></figure></li><li><p>（5）min() 函数返回集合中元素的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>（6）”-“表示两个集合差集，A-B，即在A中不在B中的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a-b</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure></li><li><p>（7） “|”表示两个集合的并集，A | B， 表示A，B中所有元素的集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; a | b</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br></pre></td></tr></table></figure></li><li><p>（8） “&amp;”表示两个集合的交集，A &amp; B，表示既在A中又在B中的集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a &amp; b</span><br><span class="line">&#123;4, 5, 6&#125;</span><br></pre></td></tr></table></figure></li><li><p>（9） in，not in 判断集合中是否有某一元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; 0 in a</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 0 not in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 3 in a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（10） sum() 返回集合中所有元素之和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; sum(a)</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-集合常用的函数"><a href="#3-集合常用的函数" class="headerlink" title="3 集合常用的函数"></a>3 集合常用的函数</h4><ul><li><p>（1） add(elem) 向集合中增加一个元素，如果此元素已经存在于集合中，则不作任何处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; a.add(4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br><span class="line">&gt;&gt;&gt; a.add(1)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure></li><li><p>（2） clear() 清除集合中的所有元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&gt;&gt;&gt; a.clear()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">set()</span><br></pre></td></tr></table></figure></li><li><p>（3）copy() 返回集合的一个浅拷贝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.copy()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure></li><li><p>（4）pop() 从集合中弹出一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;2, 3, 4, 5&#125;</span><br></pre></td></tr></table></figure></li><li><p>（5）remove(elem) 从集合中去除某元素,若集合中没有此元素则会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; a.remove(3)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 4, 5&#125;</span><br><span class="line">&gt;&gt;&gt; a.remove(7)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: 7</span><br></pre></td></tr></table></figure></li><li><p>（6）union(set) 计算两个集合的合集,并返回一个新的集合，原来的两个集合没有变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;3,4,5,6,7,8&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;a.union(b)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;3, 4, 5, 6, 7, 8&#125;</span><br></pre></td></tr></table></figure></li><li><p>（7）update(set) 将set集合与原集合计算并集，并更新至原集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;3,4,5,6,7,8&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&gt;&gt;&gt; a.update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;3, 4, 5, 6, 7, 8&#125;</span><br></pre></td></tr></table></figure></li><li><p>（8）difference(set) 计算集合的差集，和“-”运算符一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a.difference(b)</span><br><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（9）difference_update(set) 计算差集，将结果更新至原集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.difference_update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（10）discard(elem) 与remove(elem)功能一致，只不过discard移除的元素若不存在，不会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; a.discard(4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; a.discard(10)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 5, 6&#125;</span><br></pre></td></tr></table></figure></li><li><p>（11）intersection(set) 计算两个集合的交集，结果生成新的集合，原有的集合不变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.intersection(b)</span><br><span class="line">&#123;4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（12）intersection_update(set) 计算两个交集，结果更新至原有集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.intersection_update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（13）isdisjoint(set) 判断两个是否有公共元素，若没有返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;&#123;7,8,9,0&#125;</span><br><span class="line">&gt;&gt;&gt; a.isdisjoint(b)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; a.isdisjoint(c)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（14）issubset(set) 判断是否为子集，若是set的子集，返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; a.issubset(b)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; c&#x3D;&#123;2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; a.issubset(c)</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（15）issuperset(set) 判断是否为超集，若是返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;&#123;1,2,3,4,5,6,7,8&#125;</span><br><span class="line">&gt;&gt;&gt; a.issuperset(b)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.issuperset(c)</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（17）symmetric_difference(set) 返回两个集合的不重复的元素，原有的集合不变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.symmetric_difference(b)</span><br><span class="line">&#123;1, 2, 3, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（17）symmetric_difference_update(set) 返回两个集合的不重复的元素，并将结果更新至原有集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.symmetric_difference_update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(6)--python的基本类型-元组</title>
      <link href="/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(6)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%85%83%E7%BB%84/"/>
      <url>/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(6)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h4 id="1-元组的定义及特点"><a href="#1-元组的定义及特点" class="headerlink" title="1 元组的定义及特点"></a>1 元组的定义及特点</h4><ul><li><p>（1）元组的定义，使用小括号括起来(),也可以直接赋给多个值，如果一个值在后面加一个逗号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4)</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;1,2,3</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">(1, 2, 3)</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;1,</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">(1,)</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（2）元组是不可变的，不能对元组的元素进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[1]&#x3D;100</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#39;tuple&#39; object does not support item assignment</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-元组的常用运算"><a href="#2-元组的常用运算" class="headerlink" title="2 元组的常用运算"></a>2 元组的常用运算</h4><ul><li><p>（1）元组中元素可以通过位置下标来方位，第一个元素的下标为0，下标不可超过元素的长度范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[5]</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; a[7]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: tuple index out of range</span><br></pre></td></tr></table></figure></li><li><p>（2）元组中元素的下标可以是负数，负数表示从右边开始标记，-1表示最后一个元素，-2表示倒数第二个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[-1]</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; a[-2]</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a[-6]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[-7]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: tuple index out of range</span><br></pre></td></tr></table></figure></li><li><p>（3）元组中的元素可以通过切片操作获取元组的一部分，切片操作坚持左闭右开原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[0:4]</span><br><span class="line">(1, 2, 3, 4)</span><br><span class="line">&gt;&gt;&gt; a[4:5]</span><br><span class="line">(5,)</span><br></pre></td></tr></table></figure></li><li><p>（4）元组的切片操作第二个参数可以超过元组的长度，超出元组的长度时默认取到最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[2:6]</span><br><span class="line">(3, 4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; a[2:10]</span><br><span class="line">(3, 4, 5, 6)</span><br></pre></td></tr></table></figure></li><li><p>（5）元组的切片操作第一个和第二个参数都可以省略，第一个参数省略时表示左侧从第一个元素开始取，第二个参数<br>省略时表示右侧取到最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[:4]</span><br><span class="line">(1, 2, 3, 4)</span><br><span class="line">&gt;&gt;&gt; a[3:]</span><br><span class="line">(4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; a[:]</span><br><span class="line">(1, 2, 3, 4, 5, 6)</span><br></pre></td></tr></table></figure></li><li><p>（6）元组的切片操作第一个参数表示的位置可以在第二个参数表示的位置的右侧，此时返回为一个空元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[5:1]</span><br><span class="line">()</span><br><span class="line">&gt;&gt;&gt; a[-1:-3]</span><br><span class="line">()</span><br></pre></td></tr></table></figure></li><li><p>（7）元素的切片操作还可以有第三个参数，表示步长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6,7,8,9,0)</span><br><span class="line">&gt;&gt;&gt; a[1:9:3]</span><br><span class="line">(2, 5, 8)</span><br><span class="line">&gt;&gt;&gt; a[::-1]</span><br><span class="line">(0, 9, 8, 7, 6, 5, 4, 3, 2, 1)</span><br></pre></td></tr></table></figure></li><li><p>（8）len()函数返回元组长度，即元素的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li><li><p>（9）max()函数返回元组中元素的最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li><li><p>（10）min()函数返回元组中的元素的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>（11）sum()函数返回元祖中的所有元素之和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5)</span><br><span class="line">&gt;&gt;&gt; sum(a)</span><br><span class="line">15</span><br></pre></td></tr></table></figure></li><li><p>（12）in, not in 判断元组中是否包含某元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; 0 in a</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 0 not in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 4 in a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（13）两个元组可以用加号，加起来，形成一个新的元组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; (1,2,3)+(1,2,3)</span><br><span class="line">(1, 2, 3, 1, 2, 3)</span><br></pre></td></tr></table></figure></li><li><p>（14）元组也可以乘以一个数字将现有元组的元素复制多倍构造新的元组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; (1,2,3)*3</span><br><span class="line">(1, 2, 3, 1, 2, 3, 1, 2, 3)</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-元组中常用的函数"><a href="#3-元组中常用的函数" class="headerlink" title="3 元组中常用的函数"></a>3 元组中常用的函数</h4><p>因为元组是不可变的，元组中的元素不可修改，所以元组的可用函数就很少了，只有count和index两个</p><ul><li>（1）count(value) 返回元组中元素的个数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,2,1,2,3,2,1)</span><br><span class="line">&gt;&gt;&gt; a.count(1)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; a.count(4)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li>（2）index(value, start=0, stop=9223372036854775807) 返回查询到的第一个元素的位置索引值，可以指定查询的起始和结束位置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,3,2,1,2,3,4)</span><br><span class="line">&gt;&gt;&gt; a.index(3)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a.index(3,3)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a.index(3,5,8)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: tuple.index(x): x not in tuple</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(5)--python的基本类型-列表</title>
      <link href="/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%88%97%E8%A1%A8/"/>
      <url>/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-列表定义及特点"><a href="#1-列表定义及特点" class="headerlink" title="1 列表定义及特点"></a>1 列表定义及特点</h4><ul><li><p>（1）列表是用[]括起来的元素列表，类似于其他编程语言种的数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;haha&quot;]</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（2）python中列表中的元素时可以不同类型的（其他编程语言种数组中的所有元素必须为同一类型）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,&quot;hello&quot;,&quot;world&quot;]</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;list&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,&quot;hello&quot;,&quot;world&quot;,[4,5,6]]</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-列表中的基本运算"><a href="#2-列表中的基本运算" class="headerlink" title="2 列表中的基本运算"></a>2 列表中的基本运算</h4><ul><li><p>（1）列表可以通过下标索引取列表中的元素，索引从0开始，不能超出列表的长度范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[4]</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a[5]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure></li><li><p>（2）取列表元素的索引值可以是负数，负数时表示从右边开始计数，比如-1表示最后面一个，-2表示倒数第二个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a[-1]</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a[-2]</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a[-5]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[-6]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure></li><li><p>（3）列表可以通过切片取出列表中的一部分元素，切片坚持左闭右开原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6,7,8,9]</span><br><span class="line">&gt;&gt;&gt; a[0:3]</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; a[5:8]</span><br><span class="line">[6, 7, 8]</span><br><span class="line">&gt;&gt;&gt; a[0:8]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure></li><li><p>（4）列表的切片操作中第一个参数或者第二个参数是可以省略的，第一个参数省略时表示从第一个开始，第二个参数省略时表示右侧取到最后一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6,7,8,9]</span><br><span class="line">&gt;&gt;&gt; a[:4]</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; a[5:]</span><br><span class="line">[6, 7, 8, 9]</span><br><span class="line">&gt;&gt;&gt; a[:]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure></li><li><p>（5）列表的切片操作中第二参数的可以超出列表的长度，超出后默认取到最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a[3:10]</span><br><span class="line">[4, 5]</span><br></pre></td></tr></table></figure></li><li><p>（6）列表的切片操作第一个参数表示的位置可以在第二个参数表示的位置的右侧，此时返回值为空列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a[4:1]</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; a[-1:4]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li><li><p>（7）列表的切片操作可以有三个参数，第二个参数表示步长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6,7,8,9]</span><br><span class="line">&gt;&gt;&gt; a[0:5:2]</span><br><span class="line">[1, 3, 5]</span><br><span class="line">&gt;&gt;&gt; a[2:8:4]</span><br><span class="line">[3, 7]</span><br></pre></td></tr></table></figure></li><li><p>（8）len()函数可以计算列表的元素个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[]</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li><p>（9）max()函数返回列表中最大元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;ok&quot;]</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">&#39;world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（10）min()函数返回列表中最小元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;ok&quot;]</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">&#39;hello&#39;</span><br></pre></td></tr></table></figure></li><li><p>（11）sum()函数返回列表中所有元素之和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; sum(a)</span><br><span class="line">15</span><br></pre></td></tr></table></figure></li><li><p>（12）in ，not in 判断列表中是否有某元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; 0 in a</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 0 not in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 1 in a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（13）两个列表可以用加号连接起来构造一下新的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [1,2,3]+[4,5,6]</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure></li><li><p>（14）列表可以乘以一个整数来对现有列表进行元素数数倍复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [1,2,3]*3</span><br><span class="line">[1, 2, 3, 1, 2, 3, 1, 2, 3]</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-列表中的常用函数"><a href="#3-列表中的常用函数" class="headerlink" title="3 列表中的常用函数"></a>3 列表中的常用函数</h4><ul><li><p>（1）append(obj) 向列表中增加一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3]</span><br><span class="line">&gt;&gt;&gt; a.append(4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; a.append(&quot;hello&quot;)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, &#39;hello&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（2）clear() 清空列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3]</span><br><span class="line">&gt;&gt;&gt; a.clear()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li><li><p>（3）copy() 返回列表的一个浅拷贝，浅拷贝需要注意的是如果列表中的元素时可变元素，则返回的copy的元素会跟着原来的列表变化而变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,[5,6,7]]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.copy()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, [5, 6, 7]]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[1, 2, 3, [5, 6, 7]]</span><br><span class="line">&gt;&gt;&gt; a[3].append(8)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, [5, 6, 7, 8]]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[1, 2, 3, [5, 6, 7, 8]]</span><br><span class="line">&gt;&gt;&gt; a[1]&#x3D;100</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 100, 3, [5, 6, 7, 8]]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[1, 2, 3, [5, 6, 7, 8]]</span><br></pre></td></tr></table></figure></li><li><p>（4）count(value) 返回列表中给定的参数值的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,3,2,3,4,3,2,1,3,4,2]</span><br><span class="line">&gt;&gt;&gt; a.count(2)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a.count(3)</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a.count(0)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li><p>（5）index(value,start=0,stop=9223372036854775807) 返回列表中某个值的位置索引，如果不存在则报ValueError</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6,7,8,9,0]</span><br><span class="line">&gt;&gt;&gt; a.index(1)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; a.index(1,3,5)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: 1 is not in list</span><br><span class="line">&gt;&gt;&gt; a.index(5,3,5)</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>（6）insert(index,obj) 向列表中的指定位置插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a.insert(0,100)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[100, 1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; a.insert(3,300)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[100, 1, 2, 300, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; a.insert(7,700)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[100, 1, 2, 300, 3, 4, 5, 700]</span><br></pre></td></tr></table></figure></li><li><p>（7）pop(index=-1) 弹出列表中指定位置的元素，如不指定默认弹出最后一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop(3)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 5]</span><br></pre></td></tr></table></figure></li><li><p>（8）remove(value) 删除列表中的第一个与给定值一致的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,3,2,1,2,3]</span><br><span class="line">&gt;&gt;&gt; a.remove(2)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 3, 4, 3, 2, 1, 2, 3]</span><br></pre></td></tr></table></figure></li><li><p>（9）reverse() 将列表中的元素反转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a.reverse()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[5, 4, 3, 2, 1]</span><br><span class="line">&gt;&gt;&gt; a.reverse()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></li><li><p>（10）sort(key=None,reverse=False) 对列表元素进行排序，如果reverse不指定则默认升序，若设置为True<br>则为降序,key 可以自定义排序规则,其中，可以为一个函数，作用于列表的每个元素，按照返回值的的大小对原数据进行排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; a.sort()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; a.sort(reverse&#x3D;True)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[4, 3, 2, 1]</span><br><span class="line">&gt;&gt;&gt; def func(a):</span><br><span class="line">...     return len(a)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; def func2(a):</span><br><span class="line">...     return a[0]</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;ha&quot;,&quot;hehehehe&quot;,&quot;ok&quot;]</span><br><span class="line">&gt;&gt;&gt; a.sort(key&#x3D;func)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[&#39;ha&#39;, &#39;ok&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;hehehehe&#39;]</span><br><span class="line">&gt;&gt;&gt; a.sort(key&#x3D;func2)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[&#39;hello&#39;, &#39;ha&#39;, &#39;hehehehe&#39;, &#39;ok&#39;, &#39;world&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（11） extend(iterable) 将一个列表合并到当前列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;[&quot;hello&quot;,&quot;world&quot;]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.extend(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; b.extend(a)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, 1, 2, 3, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, &#39;hello&#39;, &#39;world&#39;]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(4)--python的基本类型-字符串</title>
      <link href="/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="1-字符串的表示方法"><a href="#1-字符串的表示方法" class="headerlink" title="1 字符串的表示方法"></a>1 字符串的表示方法</h4><ul><li><p>（1）字符串可以使用单引号，双引号，三个单引号，单个双引号表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;hello world&#39;</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;&quot;hello world</span><br><span class="line">... hello world</span><br><span class="line">... hello world</span><br><span class="line">... &quot;&quot;&quot;</span><br><span class="line">&#39;hello world\nhello world\nhello world\n&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#39;&#39;hello world</span><br><span class="line">... hello world</span><br><span class="line">... hello world</span><br><span class="line">... &#39;&#39;&#39;</span><br><span class="line">&#39;hello world\nhello world\nhello world\n&#39;</span><br></pre></td></tr></table></figure></li><li><p>（2）字符串中若有双引号，可以采用单引号嵌套双引号的方式，也可以采用后面要讲的转义的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;he said:&quot;hello world&quot;&#39;</span><br><span class="line">&#39;he said:&quot;hello world&quot;&#39;</span><br></pre></td></tr></table></figure><h4 id="2-转义字符"><a href="#2-转义字符" class="headerlink" title="2 转义字符"></a>2 转义字符</h4></li><li><p>（1）常用的转义字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\n   换行</span><br><span class="line">\\   \</span><br><span class="line">\t   制表符</span><br><span class="line">\&quot;   &quot;</span><br><span class="line">\&#39;   &#39;</span><br></pre></td></tr></table></figure></li><li><p>（2）字符串中使用转义举例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;hello \\n world&quot;)</span><br><span class="line">hello \n world</span><br><span class="line">&gt;&gt;&gt; print(&quot;hello \&quot;Tom\&quot;&quot;)</span><br><span class="line">hello &quot;Tom&quot;</span><br><span class="line">&gt;&gt;&gt; print(&quot;hello\tworld&quot;)</span><br><span class="line">hello   world</span><br><span class="line">&gt;&gt;&gt; print(&quot;hello\nworld&quot;)</span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure></li><li><p>（3）在Windows操作系统上使用文件路径时要特别小心，注意使用转义符对\进行转义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;C:\north\nrothwest&quot;)</span><br><span class="line">C:</span><br><span class="line">orth</span><br><span class="line">rothwest</span><br><span class="line">&gt;&gt;&gt; print(&quot;C:\\north\\northwest&quot;)</span><br><span class="line">C:\north\northwest</span><br><span class="line">&gt;&gt;&gt; print(r&quot;C:\north\northwest&quot;)</span><br><span class="line">C:\north\northwest</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="2-字符串的常用运算"><a href="#2-字符串的常用运算" class="headerlink" title="2 字符串的常用运算"></a>2 字符串的常用运算</h4></li><li><p>（1）字符串可以用加号来拼接字符串，使用*号来重复字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello&quot;+&quot;world&quot;</span><br><span class="line">&#39;helloworld&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello&quot;*3</span><br><span class="line">&#39;hellohellohello&#39;</span><br></pre></td></tr></table></figure></li><li><p>（2）字符串可以通过下标获取具体的字符，下标从0开始，下标不允许超过边界</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; print(a[0])</span><br><span class="line">h</span><br><span class="line">&gt;&gt;&gt; print(a[2])</span><br><span class="line">l</span><br><span class="line">&gt;&gt;&gt; print(a[-1])</span><br><span class="line">d</span><br><span class="line">&gt;&gt;&gt; print(a[-3])</span><br><span class="line">r</span><br><span class="line">&gt;&gt;&gt; print(a[11])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: string index out of range</span><br></pre></td></tr></table></figure></li><li><p>（3）字符串可以通过切片获取字符串的片段，坚持前闭后开的原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; print(a[0:4])</span><br><span class="line">hell</span><br><span class="line">&gt;&gt;&gt; print(a[1:3])</span><br><span class="line">el</span><br><span class="line">&gt;&gt;&gt; print(a[0:-1])</span><br><span class="line">hello worl</span><br><span class="line">&gt;&gt;&gt; print(a[0:10])</span><br><span class="line">hello worl</span><br></pre></td></tr></table></figure></li><li><p>（4）字符串中切片操作，右边界值允许炒作最大值，超过后表示取到最右边的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a[0:11])</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></li><li><p>（5）字符串切片操作可以使用三个参数，第三个参数表示步长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a[1:9:3])</span><br><span class="line">eoo</span><br></pre></td></tr></table></figure></li><li><p>（6）字符串切片操作的参数可以省略，省略第一个参数表示左侧从头开始取，省略第二参数，表示右侧到字符串末尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a[:3])</span><br><span class="line">hel</span><br><span class="line">&gt;&gt;&gt; print(a[3:])</span><br><span class="line">lo world</span><br><span class="line">&gt;&gt;&gt; print(a[::3])</span><br><span class="line">hlwl</span><br></pre></td></tr></table></figure></li><li><p>（7）字符串切片操作的参数中若第一个参数大于等于第二个参数，且第二个参数不为负数时，表示取出来的子串为空串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a[5:1])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(a[10:0])</span><br></pre></td></tr></table></figure></li><li><p>（8）字符串可以通过in或者not in判断字符或者字符串是否在字符串中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;h&#39; in &quot;hello world&quot;</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &#39;z&#39; in &quot;hello world&quot;</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &#39;z&#39; not in &quot;hello world&quot;</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（9）通过len函数计算字符串的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; len(&quot;hello world&quot;)</span><br><span class="line">11</span><br></pre></td></tr></table></figure></li><li><p>（10）通过max和min计算字符串中的最小和最大的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; max(&quot;hello world&quot;)</span><br><span class="line">&#39;w&#39;</span><br><span class="line">&gt;&gt;&gt; min(&quot;hello world&quot;)</span><br><span class="line">&#39; &#39;</span><br></pre></td></tr></table></figure></li><li><p>（11）ord可以将字符转换为整数，chr可以将整数转换为字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ord(&#39;a&#39;)</span><br><span class="line">97</span><br><span class="line">&gt;&gt;&gt; chr(90)</span><br><span class="line">&#39;Z&#39;</span><br></pre></td></tr></table></figure><h4 id="3-字符串常用的函数"><a href="#3-字符串常用的函数" class="headerlink" title="3 字符串常用的函数"></a>3 字符串常用的函数</h4></li><li><p>（1）capitalize() 将字符串首字母大写,其他字母变成小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello Word HeLLO WORd&quot;</span><br><span class="line">&gt;&gt;&gt; a.capitalize()</span><br><span class="line">&#39;Hello word hello word&#39;</span><br></pre></td></tr></table></figure></li><li><p>（2）lower() 将大写字母转换为小写字母(仅限ASCII编码范围内的语言)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;HEllo WorLD HelLO WoRLD&quot;</span><br><span class="line">&gt;&gt;&gt; a.lower()</span><br><span class="line">&#39;hello world hello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（3）casefold() 将大写字母转换为小写字母（ASCII编码范围外的语言也支持）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;HEllo WorLD HelLO WoRLD&quot;</span><br><span class="line">&gt;&gt;&gt; a.casefold()</span><br><span class="line">&#39;hello world hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;ß&quot;   # 德语</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#39;ß&#39;</span><br><span class="line">&gt;&gt;&gt; a.casefold()</span><br><span class="line">&#39;ss&#39;</span><br><span class="line">&gt;&gt;&gt; a.lower()</span><br><span class="line">&#39;ß&#39;</span><br></pre></td></tr></table></figure></li><li><p>（4）upper() 将小写字母转换为大写字母(仅限ASCII编码范围内的语言)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello Word HeLLO WORd&quot;</span><br><span class="line">&gt;&gt;&gt; a.upper()</span><br><span class="line">&#39;HELLO WORD HELLO WORD&#39;</span><br></pre></td></tr></table></figure></li><li><p>（5）swapcase() 将小写字母转换为大写字母,将原来大写的变为小写字母</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;HEllo WorLD HelLO WoRLD&quot;</span><br><span class="line">&gt;&gt;&gt; a.swapcase()</span><br><span class="line">&#39;heLLO wORld hELlo wOrld&#39;</span><br></pre></td></tr></table></figure></li><li><p>（6）title() 将字符串中每个单词的首字母大写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;HEllo WorLD HelLO WoRLD&quot;</span><br><span class="line">&gt;&gt;&gt; a.title()</span><br><span class="line">&#39;Hello World Hello World&#39;</span><br></pre></td></tr></table></figure></li><li><p>（7）strip(chars=None) 如果chars不填，则去除字符串两端的空格，如果chars指定了字符，则去除字符串两端的chars指定的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;   hello world    &quot;</span><br><span class="line">&gt;&gt;&gt; a.strip()</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hahahahello world hello world hahahaha&quot;</span><br><span class="line">&gt;&gt;&gt; a.strip(&quot;ha&quot;)</span><br><span class="line">&#39;ello world hello world &#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hahahahaahello world hahahaha&quot;</span><br><span class="line">&gt;&gt;&gt; a.strip(&quot;ha&quot;)</span><br><span class="line">&#39;ello world &#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world gogole world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.strip(&quot;olhe&quot;)</span><br><span class="line">&#39; world gogole world &#39;</span><br></pre></td></tr></table></figure></li><li><p>（8）lstrip(chars=None)，和strip功能类似，只不过lstrip只去除字符串左边空格或者chars指定的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;  hello world   &quot;</span><br><span class="line">&gt;&gt;&gt; a.lstrip()</span><br><span class="line">&#39;hello world   &#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.lstrip(&quot;elho&quot;)</span><br><span class="line">&#39; world hello&#39;</span><br></pre></td></tr></table></figure></li><li><p>（9）rstrip(chars=None)，和strip功能类似，只不过rstrip只去除字符串右边空格或者chars指定的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot; hello world &quot;</span><br><span class="line">&gt;&gt;&gt; a.rstrip()</span><br><span class="line">&#39; hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.rstrip(&quot;elho&quot;)</span><br><span class="line">&#39;hello world &#39;</span><br></pre></td></tr></table></figure></li><li><p>（10）rjust(width,fillchar=’ ‘),返回一个原字符串右对齐，并使用fillchar指定的字符填充至width长度的字符串，fillchar不指定时默认为空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rjust(20)</span><br><span class="line">&#39;         hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a.rjust(20,&#39;x&#39;)</span><br><span class="line">&#39;xxxxxxxxxhello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（11）ljust(width,fillchar=’ ‘)，返回一个原字符串左对齐，并使用fillchar指定的字符填充至width长度的字符串，fillchar不指定时默认为空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.ljust(20)</span><br><span class="line">&#39;hello world         &#39;</span><br><span class="line">&gt;&gt;&gt; a.ljust(20,&#39;x&#39;)</span><br><span class="line">&#39;hello worldxxxxxxxxx&#39;</span><br></pre></td></tr></table></figure></li><li><p>（12）center(width,fillchar=’ ‘)，返回一个原字符串居中对齐，并使用fillchar指定的字符填充到width长度的字符串，fillchar不指定时默认为空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.center(20)</span><br><span class="line">&#39;    hello world     &#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.center(20,&#39;x&#39;)</span><br><span class="line">&#39;xxxxhello worldxxxxx&#39;</span><br></pre></td></tr></table></figure></li><li><p>（13）count(sub,start=0,end=len(string))，返回字符串包含子串的数量，可以指定查询的起始位置和结束位置，不指定则默认为整个字符串中计数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.count(&#39;l&#39;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; a.count(&#39;l&#39;,1,5)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.count(&quot;hello&quot;)</span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>（14）index(sub,start=0,end=len(string))，返回字符串中查找到的第一个子串的起始位置索引值，可以指定查找起始和结束范围，若查找不到则报ValueError的异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.index(&#39;h&#39;)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; a.index(&#39;x&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: substring not found</span><br><span class="line">&gt;&gt;&gt; a.index(&#39;l&#39;,5,20)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.index(&quot;world&quot;)</span><br></pre></td></tr></table></figure></li><li><p>（15）rindex(sub,start=0,end=len(string)) 返回字符串中查找到的最后一个子串的起始位置的索引值，可以指定查找起始和结束范围，若查找不到则报ValueError的异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rindex(&quot;l&quot;)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; a.rindex(&quot;l&quot;,0,5)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.rindex(&quot;world&quot;)</span><br><span class="line">18</span><br></pre></td></tr></table></figure></li><li><p>（16）find(sub,start=0,end=len(string)) 返回字符串中查找到的第一个子串的起始位置索引值，可以指定查找起始和结束范围，若查找不到则返回-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.find(&#39;l&#39;)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a.find(&#39;x&#39;)</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; a.find(&#39;l&#39;,6,10)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.find(&quot;world&quot;)</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li><li><p>（17）rfind(sub,start=0,end=len(string)) 返回字符串中查找到最后一个子串的起始位置索引，可以指定查找起始和结束范围，若查找不到则返回-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rfind(&#39;l&#39;)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; a.rfind(&#39;x&#39;)</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; a.rfind(&#39;l&#39;,1,6)</span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>（18）split(rep=None,maxsplit=-1) 将字符串根据sep分割，如果sep不填则默认使用空格分割，如果maxsplt不指定则默认将根据字符串中所有的sep分割，否则分割指定的数目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.split()</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.split(&quot; &quot;,2)</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;hello world hello world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.split(&quot;world&quot;)</span><br><span class="line">[&#39;hello &#39;, &#39; hello &#39;, &#39; hello &#39;, &#39;&#39;]</span><br><span class="line">&gt;&gt;&gt; a.split(&#39;x&#39;)</span><br><span class="line">[&#39;hello world hello world hello world&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（19）split(rep=None,maxsplit=-1) 将字符串从右侧开始根据sep分割，如果sep不填则默认使用空格分割，如果maxsplt不指定则默认将根据字符串中所有的sep分割，否则分割指定的数目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rsplit()</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.rsplit(&quot; &quot;)</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.rsplit(&quot; &quot;,2)</span><br><span class="line">[&#39;hello world hello world&#39;, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.rsplit(&quot;world&quot;)</span><br><span class="line">[&#39;hello &#39;, &#39; hello &#39;, &#39; hello &#39;, &#39;&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（20）splitlines(keepends=False) 按照换行符（\r,\r\n,\n)分割，如果keepends不填默认为False，则返回的每一行没有回车符，如果keepends设置为True则每一行带有换行符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world 01\n hello world 02\r hello world 03 \r\n hello world 04&quot;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#39;hello world 01\n hello world 02\r hello world 03 \r\n hello world 04&#39;</span><br><span class="line">&gt;&gt;&gt; a.splitlines()</span><br><span class="line">[&#39;hello world 01&#39;, &#39; hello world 02&#39;, &#39; hello world 03 &#39;, &#39; hello world 04&#39;]</span><br><span class="line">&gt;&gt;&gt; a.splitlines(True)</span><br><span class="line">[&#39;hello world 01\n&#39;, &#39; hello world 02\r&#39;, &#39; hello world 03 \r\n&#39;, &#39; hello world 04&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（21）partition(sep) 根据指定的sep将字符串分割，返回一个三元组，第一个元素为分割符左边的部门，第二个元素为分隔符本身，第三个元素为分隔符有点的部分，若字符串中没有找到分隔符sep，则返回一个三元组,第一个元素为字符串本身，第二个第三个为空字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.partition(&quot; &quot;)</span><br><span class="line">(&#39;hello&#39;, &#39; &#39;, &#39;world hello world&#39;)</span><br><span class="line">&gt;&gt;&gt; a.partition(&#39;x&#39;)</span><br><span class="line">(&#39;hello world hello world&#39;, &#39;&#39;, &#39;&#39;)</span><br></pre></td></tr></table></figure></li><li><p>（22）rpartition(sep) 根据指定的sep将字符串从右侧开始查找并分割，返回一个三元组，第一个元素为分割符左边的部门，第二个元素为分隔符本身，第三个元素为分隔符有点的部分，若字符串中没有找到分隔符sep，则返回一个三元组,第一个元素为字符串本身，第二个第三个为空字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;&quot;hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rpartition(&quot; &quot;)</span><br><span class="line">(&#39;hello world hello&#39;, &#39; &#39;, &#39;world&#39;)</span><br></pre></td></tr></table></figure></li><li><p>（23）replace(old,new,count=-1) 将字符串中的old替换为new，如果不指定count则全部替换，否则按照count指定的数目替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.replace(&quot;hello&quot;,&quot;Hello&quot;)</span><br><span class="line">&#39;Hello world Hello world Hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a.replace(&quot;hello&quot;,&quot;Hello&quot;,1)</span><br><span class="line">&#39;Hello world hello world hello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（24）zfill(width) 将字符串用0填充至width指定的长度，若指定的长度比字符串长度还小，则不作任何操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.zfill(20)</span><br><span class="line">&#39;000000000hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a.zfill(4)</span><br><span class="line">&#39;hello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（25）join(iterable) 将列表中的元素以指定的字符连接为新的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;hello&quot;,&quot;world&quot;,&quot;hello&quot;,&quot;world&quot;]</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.join(a)</span><br><span class="line">&#39;hello world hello world hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;x&#39;.join(a)</span><br><span class="line">&#39;helloxworldxhelloxworldxhelloxworld&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;\n&#39;.join(a)</span><br><span class="line">&#39;hello\nworld\nhello\nworld\nhello\nworld&#39;</span><br></pre></td></tr></table></figure></li><li><p>（26）format() 字符串格式化</p><ul><li>1） format使用位置对字符串进行字符串进行变量替换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;&#123;&#125; &#123;&#125;&quot;.format(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;0&#125; &#123;1&#125;&quot;.format(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;.format(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&#39;world hello world&#39;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>2）使用参数指定对字符串进行变量替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;&#123;v1&#125; &#123;v2&#125;&quot;.format(v1&#x3D;&quot;hello&quot;,v2&#x3D;&quot;world&quot;)</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;v1&#125; this is a string &#123;v2&#125;&quot;.format(v2&#x3D;&quot;world&quot;,v1&#x3D;&quot;hello&quot;)</span><br><span class="line">&#39;hello this is a string world&#39;</span><br></pre></td></tr></table></figure></li><li><p>3）数字格式化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;3.141592653</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:.2f&#125;&quot;.format(a)</span><br><span class="line">&#39;3.14&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:+.2f&#125;&quot;.format(a)</span><br><span class="line">&#39;+3.14&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:.0f&#125;&quot;.format(a)</span><br><span class="line">&#39;3&#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;1000000000</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:0&gt;12d&#125;&quot;.format(a)</span><br><span class="line">&#39;001000000000&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:x&lt;12d&#125;&quot;.format(a)</span><br><span class="line">&#39;1000000000xx&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:,&#125;&quot;.format(a)</span><br><span class="line">&#39;1,000,000,000&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:.2e&#125;&quot;.format(a)</span><br><span class="line">&#39;1.00e+09&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:&gt;15d&#125;&quot;.format(a)</span><br><span class="line">&#39;     1000000000&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:&lt;15d&#125;&quot;.format(a)</span><br><span class="line">&#39;1000000000     &#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:^15d&#125;&quot;.format(a)</span><br><span class="line">&#39;  1000000000   &#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:.2%&#125;&quot;.format(0.25)</span><br><span class="line">&#39;25.00%&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:b&#125;&#39;.format(11)</span><br><span class="line">&#39;1011&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:d&#125;&#39;.format(11)</span><br><span class="line">&#39;11&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:o&#125;&#39;.format(11)</span><br><span class="line">&#39;13&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:x&#125;&#39;.format(11)</span><br><span class="line">&#39;b&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:#x&#125;&#39;.format(11)</span><br><span class="line">&#39;0xb&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:#X&#125;&#39;.format(11)</span><br><span class="line">&#39;0XB&#39;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>（27）format_map() 使用字典格式的数据对字符串进行变量替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; info&#x3D;&#123;&quot;v1&quot;:&quot;hello&quot;,&quot;v2&quot;:&quot;world&quot;&#125;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;v1&#125; &#123;v2&#125;&quot;.format_map(info)</span><br><span class="line">&#39;hello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（28）encode(encoding=”utf-8”,errors=’strict’) 以指定的编码格式编码字符串，默认的是utf-8，errors指定不同的错误处理方案</p><p> strict意为编码错误引起一个UnicodeError，其他可选的值有： ‘ignore’, ‘replace’, ‘xmlcharrefreplace’, ‘backslashreplace’ 以及通过 codecs.register_error() 注册的任何值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.encode(&quot;utf-8&quot;)</span><br><span class="line">b&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.encode(&quot;gbk&quot;)</span><br><span class="line">b&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.encode(&quot;ascii&quot;)</span><br><span class="line">b&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;你好，世界！&quot;.encode(&quot;utf-8&quot;)</span><br><span class="line">b&#39;\xe4\xbd\xa0\xe5\xa5\xbd\xef\xbc\x8c\xe4\xb8\x96\xe7\x95\x8c\xef\xbc\x81&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;你好，世界！&quot;.encode(&quot;gbk&quot;)</span><br><span class="line">b&#39;\xc4\xe3\xba\xc3\xa3\xac\xca\xc0\xbd\xe7\xa3\xa1&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;你好，世界！&quot;.encode(&quot;ascii&quot;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 0-5: ordinal not in range(128)</span><br><span class="line">&gt;&gt;&gt; &quot;你好，世界！&quot;.encode(&quot;ascii&quot;,&quot;ignore&quot;)</span><br><span class="line">b&#39;&#39;</span><br></pre></td></tr></table></figure></li><li><p>（29）maketrans() 创建字符映射的转换表，可以是一个参数，一个参数是时必须为字典dict，返回的类型为dict，key和value均用Unicode编码表示，也可以接受两个参数，如果是两个参数，则两个参数的类型为字符串str类型，并且两个参数的额字符串长度相同，以此来建立对应位置的映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str.maketrans(&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;)</span><br><span class="line">&#123;97: 1, 98: 2, 99: 3&#125;</span><br><span class="line">&gt;&gt;&gt; str.maketrans(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&#123;104: 119, 101: 111, 108: 108, 111: 100&#125;</span><br></pre></td></tr></table></figure></li><li><p>（30）translate(table) 根据maketrans生成的映射表对字符串进行字符替换，如果转换表中字符对应的value值为None的，则在此字符串中删除此字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; table&#x3D;str.maketrans(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&gt;&gt;&gt; &quot;hello world hello world&quot;.translate(table)</span><br><span class="line">&#39;wolld wdrld wolld wdrld&#39;</span><br><span class="line">&gt;&gt;&gt; table&#x3D;str.maketrans(&#123;&quot;h&quot;:&quot;w&quot;,&quot;e&quot;:None,&quot;l&quot;:&quot;o&quot;,&quot;o&quot;:None&#125;)</span><br><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.translate(table)</span><br><span class="line">&#39;woo wrod&#39;</span><br></pre></td></tr></table></figure></li><li><p>（31）expandtabs(tabsize=8) 吧字符串中的tab字符\t转换为指定数量的空格，默认为8个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello\tworld&quot;.expandtabs(tabsize&#x3D;8)</span><br><span class="line">&#39;hello   world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello\tworld&quot;.expandtabs(tabsize&#x3D;4)</span><br><span class="line">&#39;hello   world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello\tworld&quot;.expandtabs(tabsize&#x3D;16)</span><br><span class="line">&#39;hello           world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（32）startswith(prefix,start=0,end=len(string)) 判断字符串是否已给定的prefix为起始，如果是返回True，否则返回False，同时可以指定判断起始的位置。start和end默认为0和字符串的长度.</p><p> prefix还可以是一个有字符串元素组成的元组，只要有一个匹配上，即返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot;h&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot;hello&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot; &quot;,5,10)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot; &quot;,3,10)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; a.startswith((&quot;haha&quot;,&quot;hehe&quot;,&quot;h&quot;,&quot;w&quot;))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith((&quot;haha&quot;,&quot;hehe&quot;,&quot;m&quot;,&quot;w&quot;))</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（33）endswith(suffix,start=0,end=len(string)) 判断字符串是否已给定的suffix为结尾，如果是返回True，否则返回False，同时可以指定判断起始的位置。start和end默认为0和字符串的长度.</p><p> suffix还可以是一个有字符串元素组成的元组，只要有一个匹配上，即返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.endswith(&quot;d&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.endswith(&quot;world&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.endswith(&quot;d&quot;,0,4)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; a.endswith((&quot;hello&quot;,&quot;heheh&quot;,&quot;word&quot;,&quot;wd&quot;,&quot;d&quot;))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.endswith((&quot;hello&quot;,&quot;heheh&quot;,&quot;word&quot;,&quot;wd&quot;,&quot;h&quot;))</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（34）isupper() 如果字符串的所有字符都是大写，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;HELLO&quot;.isupper()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;HeLLO&quot;.isupper()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;HELLO WORLD&quot;.isupper()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.isupper()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（35）islower() 如果字符串的所有字符都是小写，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.islower()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;Hello world&quot;.islower()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.islower()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（36）istitle() 判断字符串中是否每个单词的首字母都睡大写，如果是返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;Hello World&quot;.istitle()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;Hello world&quot;.istitle()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（37）isspace() 如果字符串中的所有的字符都是空格，并且至少有一个字符，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;&quot;.isspace()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.isspace()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;    &quot;.isspace()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;\t&quot;.isspace()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;\n&quot;.isspace()</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（38）isprintable() 如果字符串中所有字符都可打印返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello &quot;.isprintable()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.isprintable()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;.isprintable()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;\t&quot;.isprintable()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;\n&quot;.isprintable()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;\r&quot;.isprintable()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;hello\nworld&quot;.isprintable()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（39）isnumeric() 如果字符串中所有字符均有数字组成，返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello&quot;.isnumeric()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;1234567890&quot;.isnumeric()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;0123&quot;.isnumeric()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot; 0234 &quot;.isnumeric()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;.isnumeric()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（40）isidentifier() 判断字符串是否为python的有效的标识符,python有效的额标识符为字母或下划线开头，由数字字母和下划线组成的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello&quot;.isidentifier()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;def&quot;.isidentifier()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;1abc&quot;.isidentifier()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;class&quot;.isidentifier()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;a-b&quot;.isidentifier()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（41）isdigit() 如果字符串中所有字符均有数字组成，返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;123&quot;.isdigit()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;a12&quot;.isdigit()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;0123&quot;.isdigit()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;.isdigit()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（42）isdecimal() 如果字符串中所有字符均有十进制字符组成，返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;0123456789&quot;.isdecimal()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;0b11&quot;.isdecimal()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;a0&quot;.isdecimal()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（43）isascii() 如果字符串中所有字符均为ascii范围内编码，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.isascii()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;你好&quot;.isascii()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（44）isalpha() 如果字符串中至少有一个字符并且所有字符都是字母，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.isalpha()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;helloworld&quot;.isalpha()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;abc123&quot;.isalpha()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（45）isalnum() 如果字符串中每个字符都是由字母或者数字组成，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.isalnum()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;helloworld&quot;.isalnum()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;abc123&quot;.isalnum()</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(3)--python的基本类型-数字</title>
      <link href="/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E6%95%B0%E5%AD%97/"/>
      <url>/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>数字：主要包括整数浮点数、布尔类型、复数</p><h4 id="1-整形和浮点型"><a href="#1-整形和浮点型" class="headerlink" title="1 整形和浮点型"></a>1 整形和浮点型</h4><ul><li>整数： int</li><li>浮点数： float</li></ul><p>注意：python3中没有long这种数据类型，python2中是有的</p><ul><li><p>(1)使用type函数可以查看数据的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(1)</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(-1)</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(1.1)</span><br><span class="line">&lt;class &#39;float&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（2）在交互式环境中数字四则运算可立即显示出结果，即所见即所得，这里需要注意的是 / 和 // 运算的区别，/运算的结果是float类型，而//的结果是向下取整</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 1+1</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 2*3</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; 4-3</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 5&#x2F;3</span><br><span class="line">1.6666666666666667</span><br><span class="line">&gt;&gt;&gt; 5&#x2F;&#x2F;3</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; -1&#x2F;&#x2F;2</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; 1&#x2F;&#x2F;-2</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; -1&#x2F;&#x2F;-2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="2-各种进制之间的数据使用与转换"><a href="#2-各种进制之间的数据使用与转换" class="headerlink" title="2 各种进制之间的数据使用与转换"></a>2 各种进制之间的数据使用与转换</h4></li><li><p>（1）各种进制在python中表示方法：二进制以0b开头，八进制以0o开头，十六进制以0x开头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 0b10</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 0b11</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; 0o10</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt; 0o11</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; 0x10</span><br><span class="line">16</span><br><span class="line">&gt;&gt;&gt; 0x11</span><br><span class="line">17</span><br><span class="line">&gt;&gt;&gt; 10</span><br><span class="line">10</span><br><span class="line">&gt;&gt;&gt; 11</span><br><span class="line">11</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（2）各种进制数向二进制转换，使用bin函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bin(10)</span><br><span class="line">&#39;0b1010&#39;</span><br><span class="line">&gt;&gt;&gt; bin(0o10)</span><br><span class="line">&#39;0b1000&#39;</span><br><span class="line">&gt;&gt;&gt; bin(0x10)</span><br><span class="line">&#39;0b10000&#39;</span><br></pre></td></tr></table></figure></li><li><p>（3）各种进制数向十进制转换，使用int函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(0b10)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; int(0o10)</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt; int(0x10)</span><br><span class="line">16</span><br></pre></td></tr></table></figure></li><li><p>（4）各种进制向十六进制转换，使用hex函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hex(0b10)</span><br><span class="line">&#39;0x2&#39;</span><br><span class="line">&gt;&gt;&gt; hex(10)</span><br><span class="line">&#39;0xa&#39;</span><br><span class="line">&gt;&gt;&gt; hex(0o10)</span><br><span class="line">&#39;0x8&#39;</span><br></pre></td></tr></table></figure></li><li><p>（5）各种进制数向八进制转换，使用oct函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; oct(0b10)</span><br><span class="line">&#39;0o2&#39;</span><br><span class="line">&gt;&gt;&gt; oct(10)</span><br><span class="line">&#39;0o12&#39;</span><br><span class="line">&gt;&gt;&gt; oct(0x10)</span><br><span class="line">&#39;0o20&#39;</span><br></pre></td></tr></table></figure><h4 id="3-布尔类型"><a href="#3-布尔类型" class="headerlink" title="3 布尔类型"></a>3 布尔类型</h4></li><li><p>（1）在python中，布尔值有True和False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; True</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; False</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; true</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &#39;true&#39; is not defined</span><br></pre></td></tr></table></figure></li><li><p>（2）使用type函数测试True和False的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(True)</span><br><span class="line">&lt;class &#39;bool&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(False)</span><br><span class="line">&lt;class &#39;bool&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（3）使用int函数观察True和False代表的整数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(True)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; int(False)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li><p>（4）数字中，非零的数转换为布尔类型均为True，只有零转换为布尔值为False，使用bool函数即可验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(1)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(0)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(-1)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(2)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(0.1)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（5）在字符串类型中，只有空字符串转换为布尔类型为False，非空字符串转换为布尔类型时均为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(&quot;abc&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(&quot;&quot;)</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（6）在列表类型中，只有空列表转换为布尔类型为False，非空列表转换为布尔类型时均为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool([1,2,3])</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool([]) </span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（7）在元组中，当元组为空时转换为布尔类型为False，非空时则表示的True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool((1,2,3))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(())</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（8）在字典中，但当字典中没有键值对时，转换为布尔类型为False，当字典中存在键值对时，则布尔值为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(&#123;&#125;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(&#123;&quot;a&quot;:1&#125;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（9）在集合中，当集合中没有元素时，代表的布尔值为False，当集合中存在元素时，其代表的布尔值为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(&#123;&#125;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(&#123;1,2,3,4&#125;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（10）在python中，None值代表的布尔值为False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(None)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h4 id="4-复数"><a href="#4-复数" class="headerlink" title="4 复数"></a>4 复数</h4><p>复数在平时代码开发中使用不是太多，了解即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 36j</span><br><span class="line">36j</span><br><span class="line">&gt;&gt;&gt; 1+4j</span><br><span class="line">(1+4j)</span><br><span class="line">&gt;&gt;&gt; (1+4j)*(2-3j)</span><br><span class="line">(14+5j)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(1)--python简介</title>
      <link href="/blog/2020/07/20/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--python%E7%AE%80%E4%BB%8B/"/>
      <url>/blog/2020/07/20/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--python%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="1-python与python特点："><a href="#1-python与python特点：" class="headerlink" title="1 python与python特点："></a>1 python与python特点：</h4><ul><li>Python是一种编程语言</li><li>语法简介、优雅，追求pythonic风格—-人生苦短，我用Python</li><li>跨平台，可以运行在Windows、Linux以及MacOS</li><li>易于学习，相对于C/C++，Java，C#，Go等，Python学习起来最简单</li><li>极为强大而丰富的标准库和第三方库，通俗点说轮子超多</li><li>Python是面向对象的语言</li></ul><h4 id="2-python能做什么？"><a href="#2-python能做什么？" class="headerlink" title="2 python能做什么？"></a>2 python能做什么？</h4><ul><li>爬虫</li><li>大数据与数据分析（Spark）</li><li>自动化测试与自动化运维</li><li>Web开发：Flask，Django</li><li>机器学习：TensorFlow（深度学习框架）</li><li>科学计算</li><li>胶水语言：缓和其他如C++,Java来编程</li></ul><h4 id="3-python之禅"><a href="#3-python之禅" class="headerlink" title="3 python之禅"></a>3 python之禅</h4><ul><li>1） Simple is better than complex  简洁胜于复杂</li><li>2） Now is better than never.Although newver is often than right now 做也许好过不做，但不假思索就动手还不如不做</li><li>3） Life is short,I use Python 人生苦短，我用Python</li></ul><h4 id="4-为什么喜欢python"><a href="#4-为什么喜欢python" class="headerlink" title="4 为什么喜欢python"></a>4 为什么喜欢python</h4><ul><li>1） 简洁，灵活，优雅，哲学</li><li>2） 易于上手，难于精通</li><li>3） Python既有动态脚本的特性，又有面向对象的特性</li></ul><h4 id="5-Python的缺点"><a href="#5-Python的缺点" class="headerlink" title="5 Python的缺点"></a>5 Python的缺点</h4><ul><li>1） 相对于C,C++,Java，运行效率较慢</li></ul><h4 id="6-常见语言的特点对比"><a href="#6-常见语言的特点对比" class="headerlink" title="6 常见语言的特点对比"></a>6 常见语言的特点对比</h4><ul><li>1） 运行效率从高到低：C，C++，Go，Java，Python</li><li>2） 开发效率从高到低：Python，Go，Java，C++，C</li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(2)--Python环境的安装-miniconda的使用</title>
      <link href="/blog/2020/07/10/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--Python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-miniconda%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/07/10/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--Python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-miniconda%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Miniconda是做什么用的？"><a href="#1、Miniconda是做什么用的？" class="headerlink" title="1、Miniconda是做什么用的？"></a>1、Miniconda是做什么用的？</h2><p>简单点来说，miniconda是为了方便的创建多个python虚拟环境，方便多个python项目同时开发的时候，每个项目都有自己独立的python开发环境，可以理解为virtualenv的高级版，使用起来非常方便</p><h2 id="2、win10下如何下载安装？"><a href="#2、win10下如何下载安装？" class="headerlink" title="2、win10下如何下载安装？"></a>2、win10下如何下载安装？</h2><ul><li><p>打开miniconda官网地址，根据操作系统位数选择，这里选择windows系统下64位，python3.7版本的软件安装包，然后点击即可下载<br><a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener">https://docs.conda.io/en/latest/miniconda.html</a></p></li><li><p>下载完成后，然后找到下载的安装文件Miniconda3-latest-Windows-x86_64.exe，然后【右键】-【以管理员权限运行】，在选择install for的步骤时，选择【all users】，安装路径推荐放在D:/Miniconda  路径下（尽量不要安装到C盘，因为C盘是系统盘，选择将Miniconda3天假到系统环境变量中，其他步骤中均保持默认即可</p></li></ul><h2 id="3、Miniconda如何使用？"><a href="#3、Miniconda如何使用？" class="headerlink" title="3、Miniconda如何使用？"></a>3、Miniconda如何使用？</h2><ul><li>创建python虚拟环境：</li></ul><p>比如这里创建一个名称为Test1Env的虚拟环境，指定其python版本为3.8.3，则打开cmd窗口，然后执行如下命令，遇到提示继续输入y即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n Test1Env python&#x3D;3.8.3</span><br></pre></td></tr></table></figure><ul><li>查看当前已经安装的虚拟环境列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><ul><li>激活指定名称的虚拟环境</li></ul><p>比如激活名称为Test1ENV的虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate Test1Env</span><br></pre></td></tr></table></figure><ul><li>退出当前环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><ul><li>删除虚拟环境</li></ul><p>比如删除名称为Test1Env的虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env remove -n Test1Env</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 基础语法</title>
      <link href="/blog/2020/07/10/markdown-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/blog/2020/07/10/markdown-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h2><p>一个#号是一级标题，二个#号是二级标题，以此类推，支持六级</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题 </span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h5 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h5><h2 id="2、字体"><a href="#2、字体" class="headerlink" title="2、字体"></a>2、字体</h2><ul><li>加粗</li></ul><p>要加粗的文字左右分别用两个*括起来</p><ul><li>斜体</li></ul><p>要斜体的文字左右分别用一个*括起来</p><ul><li>斜体加粗</li></ul><p>要倾斜和加粗的文字左右分别用三个*括起来</p><ul><li>删除线</li></ul><p>要加删除线的文字左右分别用两个~括起来</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是要加粗的文字**</span><br><span class="line">*这是要倾斜的文字*</span><br><span class="line">***这是要倾斜并且加粗的文字***</span><br><span class="line">~~这是要加删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是要加粗的文字</strong></p><p><em>这是要倾斜的文字</em></p><p><strong><em>这是要倾斜并且加粗的文字</em></strong></p><p><del>这是要加删除线的文字</del></p><h2 id="3、引用"><a href="#3、引用" class="headerlink" title="3、引用"></a>3、引用</h2><p>在应用的文字前加 &gt; 即可</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是应用的内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p></blockquote><h2 id="4、分割线"><a href="#4、分割线" class="headerlink" title="4、分割线"></a>4、分割线</h2><p>三个或三个以上的-或者* 都可以</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">****</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><hr><h2 id="5、图片"><a href="#5、图片" class="headerlink" title="5、图片"></a>5、图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;</span><br><span class="line">u&#x3D;702257389,1274025419&amp;fm&#x3D;27&amp;gp&#x3D;0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>![blockchain](<a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/" target="_blank" rel="noopener">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a><br>u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)</p><h2 id="6、超链接"><a href="#6、超链接" class="headerlink" title="6、超链接"></a>6、超链接</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http:&#x2F;&#x2F;jianshu.com)</span><br><span class="line">[百度](http:&#x2F;&#x2F;baidu.com)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a></p><p><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><h3 id="7、列表"><a href="#7、列表" class="headerlink" title="7、列表"></a>7、列表</h3><ul><li>无序列表</li></ul><p>语法：无需列表用- * + 任何一种都可以</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br></pre></td></tr></table></figure><p>注意：- + * 跟内容之间都要有一个空格</p><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li><p>列表内容</p></li><li><p>有序列表</p></li></ul><p>语法：数字加点</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br></pre></td></tr></table></figure><p>注意：序号跟内容之间要有空格</p><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><ul><li>列表嵌套</li></ul><p>上一级和下一级敲三个空格即可</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 一级无序列表</span><br><span class="line">   * 二级无序列表</span><br><span class="line">   * 二级无序列表</span><br><span class="line">   * 二级无序列表</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>一级无序列表<ul><li>二级无序列表</li><li>二级无序列表</li><li>二级无序列表</li></ul></li></ul><h2 id="8、表格"><a href="#8、表格" class="headerlink" title="8、表格"></a>8、表格</h2><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|姓名|技能|排行|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|刘备|哭|大哥|</span><br><span class="line">|关羽|打|二哥|</span><br><span class="line">|张飞|骂|三弟|</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th align="left">姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td align="left">刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td align="left">关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td align="left">张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h2 id="9、代码"><a href="#9、代码" class="headerlink" title="9、代码"></a>9、代码</h2><p>语法：</p><p>单行代码：代码之间分别用一个反引号包起来</p><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;print(111)&#96;</span><br></pre></td></tr></table></figure><p>效果：</p><p><code>print(111)</code></p><p>示例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">    if a&gt;1:</span><br><span class="line">        print(11111)</span><br><span class="line">    else:</span><br><span class="line">        print(22222)</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p><p>效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if a&gt;1:</span><br><span class="line">    print(11111)</span><br><span class="line">else:</span><br><span class="line">    print(22222)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 公共基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公共基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
