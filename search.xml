<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python基础系列(8)--python的基本类型-字典</title>
      <link href="/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(8)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E5%85%B8/"/>
      <url>/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(8)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-字典的dict的定义与特点"><a href="#1-字典的dict的定义与特点" class="headerlink" title="1 字典的dict的定义与特点"></a>1 字典的dict的定义与特点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(&#123;&#125;)</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">&gt;&gt;&gt; a[&quot;a&quot;]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[&quot;b&quot;]</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: 0</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="2-dict-常用的运算"><a href="#2-dict-常用的运算" class="headerlink" title="2 dict 常用的运算"></a>2 dict 常用的运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; a[&quot;a&quot;]&#x3D;10</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">&#39;d&#39;</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">&#39;a&#39;</span><br><span class="line">&gt;&gt;&gt; a[&quot;e&quot;]&#x3D;5</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 5&#125;</span><br><span class="line">&gt;&gt;&gt; &quot;a&quot; in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 10 in a</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;b&quot; in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 10 not in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&#123;[1,2]:1&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unhashable type: &#39;list&#39;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(7)--python的基本类型-集合</title>
      <link href="/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(7)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E9%9B%86%E5%90%88/"/>
      <url>/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(7)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h4 id="1-集合的定义和特点"><a href="#1-集合的定义和特点" class="headerlink" title="1 集合的定义和特点"></a>1 集合的定义和特点</h4><ul><li>（1） 集合是用花括号括起来的，集合的特点是元素没有顺序，元素具有唯一性，不能重复<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;set&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-集合的常用运算"><a href="#2-集合的常用运算" class="headerlink" title="2 集合的常用运算"></a>2 集合的常用运算</h4><ul><li><p>（1）集合元素没有顺序，所以不能像列表和元组那样用下标取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#39;set&#39; object is not subscriptable</span><br></pre></td></tr></table></figure></li><li><p>（2）集合也不支持加法运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [1,2,3]*3</span><br><span class="line">[1, 2, 3, 1, 2, 3, 1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; &#123;1,2,3&#125;+&#123;4,5,6&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unsupported operand type(s) for +: &#39;set&#39; and &#39;set&#39;</span><br></pre></td></tr></table></figure></li><li><p>（3）len() 函数返回集合的长度，即集合中元素的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">5</span><br></pre></td></tr></table></figure></li><li><p>（4）max() 函数返回集合中元素的最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">5</span><br></pre></td></tr></table></figure></li><li><p>（5）min() 函数返回集合中元素的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>（6）”-“表示两个集合差集，A-B，即在A中不在B中的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a-b</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure></li><li><p>（7） “|”表示两个集合的并集，A | B， 表示A，B中所有元素的集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; a | b</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br></pre></td></tr></table></figure></li><li><p>（8） “&amp;”表示两个集合的交集，A &amp; B，表示既在A中又在B中的集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a &amp; b</span><br><span class="line">&#123;4, 5, 6&#125;</span><br></pre></td></tr></table></figure></li><li><p>（9） in，not in 判断集合中是否有某一元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; 0 in a</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 0 not in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 3 in a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（10） sum() 返回集合中所有元素之和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; sum(a)</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-集合常用的函数"><a href="#3-集合常用的函数" class="headerlink" title="3 集合常用的函数"></a>3 集合常用的函数</h4><ul><li><p>（1） add(elem) 向集合中增加一个元素，如果此元素已经存在于集合中，则不作任何处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; a.add(4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br><span class="line">&gt;&gt;&gt; a.add(1)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure></li><li><p>（2） clear() 清除集合中的所有元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&gt;&gt;&gt; a.clear()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">set()</span><br></pre></td></tr></table></figure></li><li><p>（3）copy() 返回集合的一个浅拷贝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.copy()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure></li><li><p>（4）pop() 从集合中弹出一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;2, 3, 4, 5&#125;</span><br></pre></td></tr></table></figure></li><li><p>（5）remove(elem) 从集合中去除某元素,若集合中没有此元素则会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; a.remove(3)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 4, 5&#125;</span><br><span class="line">&gt;&gt;&gt; a.remove(7)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: 7</span><br></pre></td></tr></table></figure></li><li><p>（6）union(set) 计算两个集合的合集,并返回一个新的集合，原来的两个集合没有变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;3,4,5,6,7,8&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;a.union(b)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;3, 4, 5, 6, 7, 8&#125;</span><br></pre></td></tr></table></figure></li><li><p>（7）update(set) 将set集合与原集合计算并集，并更新至原集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;3,4,5,6,7,8&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&gt;&gt;&gt; a.update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;3, 4, 5, 6, 7, 8&#125;</span><br></pre></td></tr></table></figure></li><li><p>（8）difference(set) 计算集合的差集，和“-”运算符一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a.difference(b)</span><br><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（9）difference_update(set) 计算差集，将结果更新至原集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.difference_update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（10）discard(elem) 与remove(elem)功能一致，只不过discard移除的元素若不存在，不会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; a.discard(4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; a.discard(10)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 5, 6&#125;</span><br></pre></td></tr></table></figure></li><li><p>（11）intersection(set) 计算两个集合的交集，结果生成新的集合，原有的集合不变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.intersection(b)</span><br><span class="line">&#123;4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（12）intersection_update(set) 计算两个交集，结果更新至原有集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.intersection_update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（13）isdisjoint(set) 判断两个是否有公共元素，若没有返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;&#123;7,8,9,0&#125;</span><br><span class="line">&gt;&gt;&gt; a.isdisjoint(b)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; a.isdisjoint(c)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（14）issubset(set) 判断是否为子集，若是set的子集，返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; a.issubset(b)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; c&#x3D;&#123;2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; a.issubset(c)</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（15）issuperset(set) 判断是否为超集，若是返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;&#123;1,2,3,4,5,6,7,8&#125;</span><br><span class="line">&gt;&gt;&gt; a.issuperset(b)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.issuperset(c)</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（17）symmetric_difference(set) 返回两个集合的不重复的元素，原有的集合不变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.symmetric_difference(b)</span><br><span class="line">&#123;1, 2, 3, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（17）symmetric_difference_update(set) 返回两个集合的不重复的元素，并将结果更新至原有集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.symmetric_difference_update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(6)--python的基本类型-元组</title>
      <link href="/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(6)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%85%83%E7%BB%84/"/>
      <url>/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(6)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h4 id="1-元组的定义及特点"><a href="#1-元组的定义及特点" class="headerlink" title="1 元组的定义及特点"></a>1 元组的定义及特点</h4><ul><li><p>（1）元组的定义，使用小括号括起来(),也可以直接赋给多个值，如果一个值在后面加一个逗号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4)</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;1,2,3</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">(1, 2, 3)</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;1,</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">(1,)</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（2）元组是不可变的，不能对元组的元素进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[1]&#x3D;100</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#39;tuple&#39; object does not support item assignment</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-元组的常用运算"><a href="#2-元组的常用运算" class="headerlink" title="2 元组的常用运算"></a>2 元组的常用运算</h4><ul><li><p>（1）元组中元素可以通过位置下标来方位，第一个元素的下标为0，下标不可超过元素的长度范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[5]</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; a[7]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: tuple index out of range</span><br></pre></td></tr></table></figure></li><li><p>（2）元组中元素的下标可以是负数，负数表示从右边开始标记，-1表示最后一个元素，-2表示倒数第二个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[-1]</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; a[-2]</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a[-6]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[-7]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: tuple index out of range</span><br></pre></td></tr></table></figure></li><li><p>（3）元组中的元素可以通过切片操作获取元组的一部分，切片操作坚持左闭右开原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[0:4]</span><br><span class="line">(1, 2, 3, 4)</span><br><span class="line">&gt;&gt;&gt; a[4:5]</span><br><span class="line">(5,)</span><br></pre></td></tr></table></figure></li><li><p>（4）元组的切片操作第二个参数可以超过元组的长度，超出元组的长度时默认取到最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[2:6]</span><br><span class="line">(3, 4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; a[2:10]</span><br><span class="line">(3, 4, 5, 6)</span><br></pre></td></tr></table></figure></li><li><p>（5）元组的切片操作第一个和第二个参数都可以省略，第一个参数省略时表示左侧从第一个元素开始取，第二个参数<br>省略时表示右侧取到最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[:4]</span><br><span class="line">(1, 2, 3, 4)</span><br><span class="line">&gt;&gt;&gt; a[3:]</span><br><span class="line">(4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; a[:]</span><br><span class="line">(1, 2, 3, 4, 5, 6)</span><br></pre></td></tr></table></figure></li><li><p>（6）元组的切片操作第一个参数表示的位置可以在第二个参数表示的位置的右侧，此时返回为一个空元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[5:1]</span><br><span class="line">()</span><br><span class="line">&gt;&gt;&gt; a[-1:-3]</span><br><span class="line">()</span><br></pre></td></tr></table></figure></li><li><p>（7）元素的切片操作还可以有第三个参数，表示步长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6,7,8,9,0)</span><br><span class="line">&gt;&gt;&gt; a[1:9:3]</span><br><span class="line">(2, 5, 8)</span><br><span class="line">&gt;&gt;&gt; a[::-1]</span><br><span class="line">(0, 9, 8, 7, 6, 5, 4, 3, 2, 1)</span><br></pre></td></tr></table></figure></li><li><p>（8）len()函数返回元组长度，即元素的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li><li><p>（9）max()函数返回元组中元素的最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li><li><p>（10）min()函数返回元组中的元素的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>（11）sum()函数返回元祖中的所有元素之和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5)</span><br><span class="line">&gt;&gt;&gt; sum(a)</span><br><span class="line">15</span><br></pre></td></tr></table></figure></li><li><p>（12）in, not in 判断元组中是否包含某元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; 0 in a</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 0 not in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 4 in a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（13）两个元组可以用加号，加起来，形成一个新的元组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; (1,2,3)+(1,2,3)</span><br><span class="line">(1, 2, 3, 1, 2, 3)</span><br></pre></td></tr></table></figure></li><li><p>（14）元组也可以乘以一个数字将现有元组的元素复制多倍构造新的元组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; (1,2,3)*3</span><br><span class="line">(1, 2, 3, 1, 2, 3, 1, 2, 3)</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-元组中常用的函数"><a href="#3-元组中常用的函数" class="headerlink" title="3 元组中常用的函数"></a>3 元组中常用的函数</h4><p>因为元组是不可变的，元组中的元素不可修改，所以元组的可用函数就很少了，只有count和index两个</p><ul><li>（1）count(value) 返回元组中元素的个数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,2,1,2,3,2,1)</span><br><span class="line">&gt;&gt;&gt; a.count(1)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; a.count(4)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li>（2）index(value, start=0, stop=9223372036854775807) 返回查询到的第一个元素的位置索引值，可以指定查询的起始和结束位置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,3,2,1,2,3,4)</span><br><span class="line">&gt;&gt;&gt; a.index(3)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a.index(3,3)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a.index(3,5,8)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: tuple.index(x): x not in tuple</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(5)--python的基本类型-列表</title>
      <link href="/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%88%97%E8%A1%A8/"/>
      <url>/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-列表定义及特点"><a href="#1-列表定义及特点" class="headerlink" title="1 列表定义及特点"></a>1 列表定义及特点</h4><ul><li><p>（1）列表是用[]括起来的元素列表，类似于其他编程语言种的数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;haha&quot;]</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（2）python中列表中的元素时可以不同类型的（其他编程语言种数组中的所有元素必须为同一类型）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,&quot;hello&quot;,&quot;world&quot;]</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;list&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,&quot;hello&quot;,&quot;world&quot;,[4,5,6]]</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-列表中的基本运算"><a href="#2-列表中的基本运算" class="headerlink" title="2 列表中的基本运算"></a>2 列表中的基本运算</h4><ul><li><p>（1）列表可以通过下标索引取列表中的元素，索引从0开始，不能超出列表的长度范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[4]</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a[5]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure></li><li><p>（2）取列表元素的索引值可以是负数，负数时表示从右边开始计数，比如-1表示最后面一个，-2表示倒数第二个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a[-1]</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a[-2]</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a[-5]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[-6]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure></li><li><p>（3）列表可以通过切片取出列表中的一部分元素，切片坚持左闭右开原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6,7,8,9]</span><br><span class="line">&gt;&gt;&gt; a[0:3]</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; a[5:8]</span><br><span class="line">[6, 7, 8]</span><br><span class="line">&gt;&gt;&gt; a[0:8]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure></li><li><p>（4）列表的切片操作中第一个参数或者第二个参数是可以省略的，第一个参数省略时表示从第一个开始，第二个参数省略时表示右侧取到最后一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6,7,8,9]</span><br><span class="line">&gt;&gt;&gt; a[:4]</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; a[5:]</span><br><span class="line">[6, 7, 8, 9]</span><br><span class="line">&gt;&gt;&gt; a[:]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure></li><li><p>（5）列表的切片操作中第二参数的可以超出列表的长度，超出后默认取到最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a[3:10]</span><br><span class="line">[4, 5]</span><br></pre></td></tr></table></figure></li><li><p>（6）列表的切片操作第一个参数表示的位置可以在第二个参数表示的位置的右侧，此时返回值为空列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a[4:1]</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; a[-1:4]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li><li><p>（7）列表的切片操作可以有三个参数，第二个参数表示步长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6,7,8,9]</span><br><span class="line">&gt;&gt;&gt; a[0:5:2]</span><br><span class="line">[1, 3, 5]</span><br><span class="line">&gt;&gt;&gt; a[2:8:4]</span><br><span class="line">[3, 7]</span><br></pre></td></tr></table></figure></li><li><p>（8）len()函数可以计算列表的元素个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[]</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li><p>（9）max()函数返回列表中最大元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;ok&quot;]</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">&#39;world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（10）min()函数返回列表中最小元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;ok&quot;]</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">&#39;hello&#39;</span><br></pre></td></tr></table></figure></li><li><p>（11）sum()函数返回列表中所有元素之和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; sum(a)</span><br><span class="line">15</span><br></pre></td></tr></table></figure></li><li><p>（12）in ，not in 判断列表中是否有某元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; 0 in a</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 0 not in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 1 in a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（13）两个列表可以用加号连接起来构造一下新的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [1,2,3]+[4,5,6]</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure></li><li><p>（14）列表可以乘以一个整数来对现有列表进行元素数数倍复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [1,2,3]*3</span><br><span class="line">[1, 2, 3, 1, 2, 3, 1, 2, 3]</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-列表中的常用函数"><a href="#3-列表中的常用函数" class="headerlink" title="3 列表中的常用函数"></a>3 列表中的常用函数</h4><ul><li><p>（1）append(obj) 向列表中增加一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3]</span><br><span class="line">&gt;&gt;&gt; a.append(4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; a.append(&quot;hello&quot;)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, &#39;hello&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（2）clear() 清空列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3]</span><br><span class="line">&gt;&gt;&gt; a.clear()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li><li><p>（3）copy() 返回列表的一个浅拷贝，浅拷贝需要注意的是如果列表中的元素时可变元素，则返回的copy的元素会跟着原来的列表变化而变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,[5,6,7]]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.copy()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, [5, 6, 7]]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[1, 2, 3, [5, 6, 7]]</span><br><span class="line">&gt;&gt;&gt; a[3].append(8)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, [5, 6, 7, 8]]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[1, 2, 3, [5, 6, 7, 8]]</span><br><span class="line">&gt;&gt;&gt; a[1]&#x3D;100</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 100, 3, [5, 6, 7, 8]]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[1, 2, 3, [5, 6, 7, 8]]</span><br></pre></td></tr></table></figure></li><li><p>（4）count(value) 返回列表中给定的参数值的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,3,2,3,4,3,2,1,3,4,2]</span><br><span class="line">&gt;&gt;&gt; a.count(2)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a.count(3)</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a.count(0)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li><p>（5）index(value,start=0,stop=9223372036854775807) 返回列表中某个值的位置索引，如果不存在则报ValueError</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6,7,8,9,0]</span><br><span class="line">&gt;&gt;&gt; a.index(1)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; a.index(1,3,5)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: 1 is not in list</span><br><span class="line">&gt;&gt;&gt; a.index(5,3,5)</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>（6）insert(index,obj) 向列表中的指定位置插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a.insert(0,100)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[100, 1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; a.insert(3,300)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[100, 1, 2, 300, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; a.insert(7,700)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[100, 1, 2, 300, 3, 4, 5, 700]</span><br></pre></td></tr></table></figure></li><li><p>（7）pop(index=-1) 弹出列表中指定位置的元素，如不指定默认弹出最后一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop(3)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 5]</span><br></pre></td></tr></table></figure></li><li><p>（8）remove(value) 删除列表中的第一个与给定值一致的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,3,2,1,2,3]</span><br><span class="line">&gt;&gt;&gt; a.remove(2)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 3, 4, 3, 2, 1, 2, 3]</span><br></pre></td></tr></table></figure></li><li><p>（9）reverse() 将列表中的元素反转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a.reverse()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[5, 4, 3, 2, 1]</span><br><span class="line">&gt;&gt;&gt; a.reverse()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></li><li><p>（10）sort(key=None,reverse=False) 对列表元素进行排序，如果reverse不指定则默认升序，若设置为True<br>则为降序,key 可以自定义排序规则,其中，可以为一个函数，作用于列表的每个元素，按照返回值的的大小对原数据进行排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; a.sort()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; a.sort(reverse&#x3D;True)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[4, 3, 2, 1]</span><br><span class="line">&gt;&gt;&gt; def func(a):</span><br><span class="line">...     return len(a)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; def func2(a):</span><br><span class="line">...     return a[0]</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;ha&quot;,&quot;hehehehe&quot;,&quot;ok&quot;]</span><br><span class="line">&gt;&gt;&gt; a.sort(key&#x3D;func)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[&#39;ha&#39;, &#39;ok&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;hehehehe&#39;]</span><br><span class="line">&gt;&gt;&gt; a.sort(key&#x3D;func2)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[&#39;hello&#39;, &#39;ha&#39;, &#39;hehehehe&#39;, &#39;ok&#39;, &#39;world&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（11） extend(iterable) 将一个列表合并到当前列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;[&quot;hello&quot;,&quot;world&quot;]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.extend(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; b.extend(a)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, 1, 2, 3, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, &#39;hello&#39;, &#39;world&#39;]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(4)--python的基本类型-字符串</title>
      <link href="/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="1-字符串的表示方法"><a href="#1-字符串的表示方法" class="headerlink" title="1 字符串的表示方法"></a>1 字符串的表示方法</h4><ul><li><p>（1）字符串可以使用单引号，双引号，三个单引号，单个双引号表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;hello world&#39;</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;&quot;hello world</span><br><span class="line">... hello world</span><br><span class="line">... hello world</span><br><span class="line">... &quot;&quot;&quot;</span><br><span class="line">&#39;hello world\nhello world\nhello world\n&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#39;&#39;hello world</span><br><span class="line">... hello world</span><br><span class="line">... hello world</span><br><span class="line">... &#39;&#39;&#39;</span><br><span class="line">&#39;hello world\nhello world\nhello world\n&#39;</span><br></pre></td></tr></table></figure></li><li><p>（2）字符串中若有双引号，可以采用单引号嵌套双引号的方式，也可以采用后面要讲的转义的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;he said:&quot;hello world&quot;&#39;</span><br><span class="line">&#39;he said:&quot;hello world&quot;&#39;</span><br></pre></td></tr></table></figure><h4 id="2-转义字符"><a href="#2-转义字符" class="headerlink" title="2 转义字符"></a>2 转义字符</h4></li><li><p>（1）常用的转义字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\n   换行</span><br><span class="line">\\   \</span><br><span class="line">\t   制表符</span><br><span class="line">\&quot;   &quot;</span><br><span class="line">\&#39;   &#39;</span><br></pre></td></tr></table></figure></li><li><p>（2）字符串中使用转义举例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;hello \\n world&quot;)</span><br><span class="line">hello \n world</span><br><span class="line">&gt;&gt;&gt; print(&quot;hello \&quot;Tom\&quot;&quot;)</span><br><span class="line">hello &quot;Tom&quot;</span><br><span class="line">&gt;&gt;&gt; print(&quot;hello\tworld&quot;)</span><br><span class="line">hello   world</span><br><span class="line">&gt;&gt;&gt; print(&quot;hello\nworld&quot;)</span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure></li><li><p>（3）在Windows操作系统上使用文件路径时要特别小心，注意使用转义符对\进行转义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;C:\north\nrothwest&quot;)</span><br><span class="line">C:</span><br><span class="line">orth</span><br><span class="line">rothwest</span><br><span class="line">&gt;&gt;&gt; print(&quot;C:\\north\\northwest&quot;)</span><br><span class="line">C:\north\northwest</span><br><span class="line">&gt;&gt;&gt; print(r&quot;C:\north\northwest&quot;)</span><br><span class="line">C:\north\northwest</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="2-字符串的常用运算"><a href="#2-字符串的常用运算" class="headerlink" title="2 字符串的常用运算"></a>2 字符串的常用运算</h4></li><li><p>（1）字符串可以用加号来拼接字符串，使用*号来重复字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello&quot;+&quot;world&quot;</span><br><span class="line">&#39;helloworld&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello&quot;*3</span><br><span class="line">&#39;hellohellohello&#39;</span><br></pre></td></tr></table></figure></li><li><p>（2）字符串可以通过下标获取具体的字符，下标从0开始，下标不允许超过边界</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; print(a[0])</span><br><span class="line">h</span><br><span class="line">&gt;&gt;&gt; print(a[2])</span><br><span class="line">l</span><br><span class="line">&gt;&gt;&gt; print(a[-1])</span><br><span class="line">d</span><br><span class="line">&gt;&gt;&gt; print(a[-3])</span><br><span class="line">r</span><br><span class="line">&gt;&gt;&gt; print(a[11])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: string index out of range</span><br></pre></td></tr></table></figure></li><li><p>（3）字符串可以通过切片获取字符串的片段，坚持前闭后开的原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; print(a[0:4])</span><br><span class="line">hell</span><br><span class="line">&gt;&gt;&gt; print(a[1:3])</span><br><span class="line">el</span><br><span class="line">&gt;&gt;&gt; print(a[0:-1])</span><br><span class="line">hello worl</span><br><span class="line">&gt;&gt;&gt; print(a[0:10])</span><br><span class="line">hello worl</span><br></pre></td></tr></table></figure></li><li><p>（4）字符串中切片操作，右边界值允许炒作最大值，超过后表示取到最右边的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a[0:11])</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></li><li><p>（5）字符串切片操作可以使用三个参数，第三个参数表示步长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a[1:9:3])</span><br><span class="line">eoo</span><br></pre></td></tr></table></figure></li><li><p>（6）字符串切片操作的参数可以省略，省略第一个参数表示左侧从头开始取，省略第二参数，表示右侧到字符串末尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a[:3])</span><br><span class="line">hel</span><br><span class="line">&gt;&gt;&gt; print(a[3:])</span><br><span class="line">lo world</span><br><span class="line">&gt;&gt;&gt; print(a[::3])</span><br><span class="line">hlwl</span><br></pre></td></tr></table></figure></li><li><p>（7）字符串切片操作的参数中若第一个参数大于等于第二个参数，且第二个参数不为负数时，表示取出来的子串为空串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a[5:1])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(a[10:0])</span><br></pre></td></tr></table></figure></li><li><p>（8）字符串可以通过in或者not in判断字符或者字符串是否在字符串中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;h&#39; in &quot;hello world&quot;</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &#39;z&#39; in &quot;hello world&quot;</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &#39;z&#39; not in &quot;hello world&quot;</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（9）通过len函数计算字符串的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; len(&quot;hello world&quot;)</span><br><span class="line">11</span><br></pre></td></tr></table></figure></li><li><p>（10）通过max和min计算字符串中的最小和最大的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; max(&quot;hello world&quot;)</span><br><span class="line">&#39;w&#39;</span><br><span class="line">&gt;&gt;&gt; min(&quot;hello world&quot;)</span><br><span class="line">&#39; &#39;</span><br></pre></td></tr></table></figure></li><li><p>（11）ord可以将字符转换为整数，chr可以将整数转换为字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ord(&#39;a&#39;)</span><br><span class="line">97</span><br><span class="line">&gt;&gt;&gt; chr(90)</span><br><span class="line">&#39;Z&#39;</span><br></pre></td></tr></table></figure><h4 id="3-字符串常用的函数"><a href="#3-字符串常用的函数" class="headerlink" title="3 字符串常用的函数"></a>3 字符串常用的函数</h4></li><li><p>（1）capitalize() 将字符串首字母大写,其他字母变成小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello Word HeLLO WORd&quot;</span><br><span class="line">&gt;&gt;&gt; a.capitalize()</span><br><span class="line">&#39;Hello word hello word&#39;</span><br></pre></td></tr></table></figure></li><li><p>（2）lower() 将大写字母转换为小写字母(仅限ASCII编码范围内的语言)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;HEllo WorLD HelLO WoRLD&quot;</span><br><span class="line">&gt;&gt;&gt; a.lower()</span><br><span class="line">&#39;hello world hello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（3）casefold() 将大写字母转换为小写字母（ASCII编码范围外的语言也支持）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;HEllo WorLD HelLO WoRLD&quot;</span><br><span class="line">&gt;&gt;&gt; a.casefold()</span><br><span class="line">&#39;hello world hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;ß&quot;   # 德语</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#39;ß&#39;</span><br><span class="line">&gt;&gt;&gt; a.casefold()</span><br><span class="line">&#39;ss&#39;</span><br><span class="line">&gt;&gt;&gt; a.lower()</span><br><span class="line">&#39;ß&#39;</span><br></pre></td></tr></table></figure></li><li><p>（4）upper() 将小写字母转换为大写字母(仅限ASCII编码范围内的语言)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello Word HeLLO WORd&quot;</span><br><span class="line">&gt;&gt;&gt; a.upper()</span><br><span class="line">&#39;HELLO WORD HELLO WORD&#39;</span><br></pre></td></tr></table></figure></li><li><p>（5）swapcase() 将小写字母转换为大写字母,将原来大写的变为小写字母</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;HEllo WorLD HelLO WoRLD&quot;</span><br><span class="line">&gt;&gt;&gt; a.swapcase()</span><br><span class="line">&#39;heLLO wORld hELlo wOrld&#39;</span><br></pre></td></tr></table></figure></li><li><p>（6）title() 将字符串中每个单词的首字母大写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;HEllo WorLD HelLO WoRLD&quot;</span><br><span class="line">&gt;&gt;&gt; a.title()</span><br><span class="line">&#39;Hello World Hello World&#39;</span><br></pre></td></tr></table></figure></li><li><p>（7）strip(chars=None) 如果chars不填，则去除字符串两端的空格，如果chars指定了字符，则去除字符串两端的chars指定的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;   hello world    &quot;</span><br><span class="line">&gt;&gt;&gt; a.strip()</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hahahahello world hello world hahahaha&quot;</span><br><span class="line">&gt;&gt;&gt; a.strip(&quot;ha&quot;)</span><br><span class="line">&#39;ello world hello world &#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hahahahaahello world hahahaha&quot;</span><br><span class="line">&gt;&gt;&gt; a.strip(&quot;ha&quot;)</span><br><span class="line">&#39;ello world &#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world gogole world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.strip(&quot;olhe&quot;)</span><br><span class="line">&#39; world gogole world &#39;</span><br></pre></td></tr></table></figure></li><li><p>（8）lstrip(chars=None)，和strip功能类似，只不过lstrip只去除字符串左边空格或者chars指定的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;  hello world   &quot;</span><br><span class="line">&gt;&gt;&gt; a.lstrip()</span><br><span class="line">&#39;hello world   &#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.lstrip(&quot;elho&quot;)</span><br><span class="line">&#39; world hello&#39;</span><br></pre></td></tr></table></figure></li><li><p>（9）rstrip(chars=None)，和strip功能类似，只不过rstrip只去除字符串右边空格或者chars指定的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot; hello world &quot;</span><br><span class="line">&gt;&gt;&gt; a.rstrip()</span><br><span class="line">&#39; hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.rstrip(&quot;elho&quot;)</span><br><span class="line">&#39;hello world &#39;</span><br></pre></td></tr></table></figure></li><li><p>（10）rjust(width,fillchar=’ ‘),返回一个原字符串右对齐，并使用fillchar指定的字符填充至width长度的字符串，fillchar不指定时默认为空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rjust(20)</span><br><span class="line">&#39;         hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a.rjust(20,&#39;x&#39;)</span><br><span class="line">&#39;xxxxxxxxxhello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（11）ljust(width,fillchar=’ ‘)，返回一个原字符串左对齐，并使用fillchar指定的字符填充至width长度的字符串，fillchar不指定时默认为空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.ljust(20)</span><br><span class="line">&#39;hello world         &#39;</span><br><span class="line">&gt;&gt;&gt; a.ljust(20,&#39;x&#39;)</span><br><span class="line">&#39;hello worldxxxxxxxxx&#39;</span><br></pre></td></tr></table></figure></li><li><p>（12）center(width,fillchar=’ ‘)，返回一个原字符串居中对齐，并使用fillchar指定的字符填充到width长度的字符串，fillchar不指定时默认为空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.center(20)</span><br><span class="line">&#39;    hello world     &#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.center(20,&#39;x&#39;)</span><br><span class="line">&#39;xxxxhello worldxxxxx&#39;</span><br></pre></td></tr></table></figure></li><li><p>（13）count(sub,start=0,end=len(string))，返回字符串包含子串的数量，可以指定查询的起始位置和结束位置，不指定则默认为整个字符串中计数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.count(&#39;l&#39;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; a.count(&#39;l&#39;,1,5)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.count(&quot;hello&quot;)</span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>（14）index(sub,start=0,end=len(string))，返回字符串中查找到的第一个子串的起始位置索引值，可以指定查找起始和结束范围，若查找不到则报ValueError的异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.index(&#39;h&#39;)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; a.index(&#39;x&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: substring not found</span><br><span class="line">&gt;&gt;&gt; a.index(&#39;l&#39;,5,20)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.index(&quot;world&quot;)</span><br></pre></td></tr></table></figure></li><li><p>（15）rindex(sub,start=0,end=len(string)) 返回字符串中查找到的最后一个子串的起始位置的索引值，可以指定查找起始和结束范围，若查找不到则报ValueError的异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rindex(&quot;l&quot;)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; a.rindex(&quot;l&quot;,0,5)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.rindex(&quot;world&quot;)</span><br><span class="line">18</span><br></pre></td></tr></table></figure></li><li><p>（16）find(sub,start=0,end=len(string)) 返回字符串中查找到的第一个子串的起始位置索引值，可以指定查找起始和结束范围，若查找不到则返回-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.find(&#39;l&#39;)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a.find(&#39;x&#39;)</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; a.find(&#39;l&#39;,6,10)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.find(&quot;world&quot;)</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li><li><p>（17）rfind(sub,start=0,end=len(string)) 返回字符串中查找到最后一个子串的起始位置索引，可以指定查找起始和结束范围，若查找不到则返回-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rfind(&#39;l&#39;)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; a.rfind(&#39;x&#39;)</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; a.rfind(&#39;l&#39;,1,6)</span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>（18）split(rep=None,maxsplit=-1) 将字符串根据sep分割，如果sep不填则默认使用空格分割，如果maxsplt不指定则默认将根据字符串中所有的sep分割，否则分割指定的数目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.split()</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.split(&quot; &quot;,2)</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;hello world hello world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.split(&quot;world&quot;)</span><br><span class="line">[&#39;hello &#39;, &#39; hello &#39;, &#39; hello &#39;, &#39;&#39;]</span><br><span class="line">&gt;&gt;&gt; a.split(&#39;x&#39;)</span><br><span class="line">[&#39;hello world hello world hello world&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（19）split(rep=None,maxsplit=-1) 将字符串从右侧开始根据sep分割，如果sep不填则默认使用空格分割，如果maxsplt不指定则默认将根据字符串中所有的sep分割，否则分割指定的数目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rsplit()</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.rsplit(&quot; &quot;)</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.rsplit(&quot; &quot;,2)</span><br><span class="line">[&#39;hello world hello world&#39;, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.rsplit(&quot;world&quot;)</span><br><span class="line">[&#39;hello &#39;, &#39; hello &#39;, &#39; hello &#39;, &#39;&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（20）splitlines(keepends=False) 按照换行符（\r,\r\n,\n)分割，如果keepends不填默认为False，则返回的每一行没有回车符，如果keepends设置为True则每一行带有换行符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world 01\n hello world 02\r hello world 03 \r\n hello world 04&quot;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#39;hello world 01\n hello world 02\r hello world 03 \r\n hello world 04&#39;</span><br><span class="line">&gt;&gt;&gt; a.splitlines()</span><br><span class="line">[&#39;hello world 01&#39;, &#39; hello world 02&#39;, &#39; hello world 03 &#39;, &#39; hello world 04&#39;]</span><br><span class="line">&gt;&gt;&gt; a.splitlines(True)</span><br><span class="line">[&#39;hello world 01\n&#39;, &#39; hello world 02\r&#39;, &#39; hello world 03 \r\n&#39;, &#39; hello world 04&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（21）partition(sep) 根据指定的sep将字符串分割，返回一个三元组，第一个元素为分割符左边的部门，第二个元素为分隔符本身，第三个元素为分隔符有点的部分，若字符串中没有找到分隔符sep，则返回一个三元组,第一个元素为字符串本身，第二个第三个为空字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.partition(&quot; &quot;)</span><br><span class="line">(&#39;hello&#39;, &#39; &#39;, &#39;world hello world&#39;)</span><br><span class="line">&gt;&gt;&gt; a.partition(&#39;x&#39;)</span><br><span class="line">(&#39;hello world hello world&#39;, &#39;&#39;, &#39;&#39;)</span><br></pre></td></tr></table></figure></li><li><p>（22）rpartition(sep) 根据指定的sep将字符串从右侧开始查找并分割，返回一个三元组，第一个元素为分割符左边的部门，第二个元素为分隔符本身，第三个元素为分隔符有点的部分，若字符串中没有找到分隔符sep，则返回一个三元组,第一个元素为字符串本身，第二个第三个为空字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;&quot;hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rpartition(&quot; &quot;)</span><br><span class="line">(&#39;hello world hello&#39;, &#39; &#39;, &#39;world&#39;)</span><br></pre></td></tr></table></figure></li><li><p>（23）replace(old,new,count=-1) 将字符串中的old替换为new，如果不指定count则全部替换，否则按照count指定的数目替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.replace(&quot;hello&quot;,&quot;Hello&quot;)</span><br><span class="line">&#39;Hello world Hello world Hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a.replace(&quot;hello&quot;,&quot;Hello&quot;,1)</span><br><span class="line">&#39;Hello world hello world hello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（24）zfill(width) 将字符串用0填充至width指定的长度，若指定的长度比字符串长度还小，则不作任何操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.zfill(20)</span><br><span class="line">&#39;000000000hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a.zfill(4)</span><br><span class="line">&#39;hello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（25）join(iterable) 将列表中的元素以指定的字符连接为新的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;hello&quot;,&quot;world&quot;,&quot;hello&quot;,&quot;world&quot;]</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.join(a)</span><br><span class="line">&#39;hello world hello world hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;x&#39;.join(a)</span><br><span class="line">&#39;helloxworldxhelloxworldxhelloxworld&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;\n&#39;.join(a)</span><br><span class="line">&#39;hello\nworld\nhello\nworld\nhello\nworld&#39;</span><br></pre></td></tr></table></figure></li><li><p>（26）format() 字符串格式化</p><ul><li>1） format使用位置对字符串进行字符串进行变量替换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;&#123;&#125; &#123;&#125;&quot;.format(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;0&#125; &#123;1&#125;&quot;.format(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;.format(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&#39;world hello world&#39;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>2）使用参数指定对字符串进行变量替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;&#123;v1&#125; &#123;v2&#125;&quot;.format(v1&#x3D;&quot;hello&quot;,v2&#x3D;&quot;world&quot;)</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;v1&#125; this is a string &#123;v2&#125;&quot;.format(v2&#x3D;&quot;world&quot;,v1&#x3D;&quot;hello&quot;)</span><br><span class="line">&#39;hello this is a string world&#39;</span><br></pre></td></tr></table></figure></li><li><p>3）数字格式化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;3.141592653</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:.2f&#125;&quot;.format(a)</span><br><span class="line">&#39;3.14&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:+.2f&#125;&quot;.format(a)</span><br><span class="line">&#39;+3.14&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:.0f&#125;&quot;.format(a)</span><br><span class="line">&#39;3&#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;1000000000</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:0&gt;12d&#125;&quot;.format(a)</span><br><span class="line">&#39;001000000000&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:x&lt;12d&#125;&quot;.format(a)</span><br><span class="line">&#39;1000000000xx&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:,&#125;&quot;.format(a)</span><br><span class="line">&#39;1,000,000,000&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:.2e&#125;&quot;.format(a)</span><br><span class="line">&#39;1.00e+09&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:&gt;15d&#125;&quot;.format(a)</span><br><span class="line">&#39;     1000000000&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:&lt;15d&#125;&quot;.format(a)</span><br><span class="line">&#39;1000000000     &#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:^15d&#125;&quot;.format(a)</span><br><span class="line">&#39;  1000000000   &#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:.2%&#125;&quot;.format(0.25)</span><br><span class="line">&#39;25.00%&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:b&#125;&#39;.format(11)</span><br><span class="line">&#39;1011&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:d&#125;&#39;.format(11)</span><br><span class="line">&#39;11&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:o&#125;&#39;.format(11)</span><br><span class="line">&#39;13&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:x&#125;&#39;.format(11)</span><br><span class="line">&#39;b&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:#x&#125;&#39;.format(11)</span><br><span class="line">&#39;0xb&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:#X&#125;&#39;.format(11)</span><br><span class="line">&#39;0XB&#39;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>（27）format_map() 使用字典格式的数据对字符串进行变量替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; info&#x3D;&#123;&quot;v1&quot;:&quot;hello&quot;,&quot;v2&quot;:&quot;world&quot;&#125;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;v1&#125; &#123;v2&#125;&quot;.format_map(info)</span><br><span class="line">&#39;hello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（28）encode(encoding=”utf-8”,errors=’strict’) 以指定的编码格式编码字符串，默认的是utf-8，errors指定不同的错误处理方案</p><p> strict意为编码错误引起一个UnicodeError，其他可选的值有： ‘ignore’, ‘replace’, ‘xmlcharrefreplace’, ‘backslashreplace’ 以及通过 codecs.register_error() 注册的任何值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.encode(&quot;utf-8&quot;)</span><br><span class="line">b&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.encode(&quot;gbk&quot;)</span><br><span class="line">b&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.encode(&quot;ascii&quot;)</span><br><span class="line">b&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;你好，世界！&quot;.encode(&quot;utf-8&quot;)</span><br><span class="line">b&#39;\xe4\xbd\xa0\xe5\xa5\xbd\xef\xbc\x8c\xe4\xb8\x96\xe7\x95\x8c\xef\xbc\x81&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;你好，世界！&quot;.encode(&quot;gbk&quot;)</span><br><span class="line">b&#39;\xc4\xe3\xba\xc3\xa3\xac\xca\xc0\xbd\xe7\xa3\xa1&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;你好，世界！&quot;.encode(&quot;ascii&quot;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 0-5: ordinal not in range(128)</span><br><span class="line">&gt;&gt;&gt; &quot;你好，世界！&quot;.encode(&quot;ascii&quot;,&quot;ignore&quot;)</span><br><span class="line">b&#39;&#39;</span><br></pre></td></tr></table></figure></li><li><p>（29）maketrans() 创建字符映射的转换表，可以是一个参数，一个参数是时必须为字典dict，返回的类型为dict，key和value均用Unicode编码表示，也可以接受两个参数，如果是两个参数，则两个参数的类型为字符串str类型，并且两个参数的额字符串长度相同，以此来建立对应位置的映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str.maketrans(&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;)</span><br><span class="line">&#123;97: 1, 98: 2, 99: 3&#125;</span><br><span class="line">&gt;&gt;&gt; str.maketrans(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&#123;104: 119, 101: 111, 108: 108, 111: 100&#125;</span><br></pre></td></tr></table></figure></li><li><p>（30）translate(table) 根据maketrans生成的映射表对字符串进行字符替换，如果转换表中字符对应的value值为None的，则在此字符串中删除此字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; table&#x3D;str.maketrans(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&gt;&gt;&gt; &quot;hello world hello world&quot;.translate(table)</span><br><span class="line">&#39;wolld wdrld wolld wdrld&#39;</span><br><span class="line">&gt;&gt;&gt; table&#x3D;str.maketrans(&#123;&quot;h&quot;:&quot;w&quot;,&quot;e&quot;:None,&quot;l&quot;:&quot;o&quot;,&quot;o&quot;:None&#125;)</span><br><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.translate(table)</span><br><span class="line">&#39;woo wrod&#39;</span><br></pre></td></tr></table></figure></li><li><p>（31）expandtabs(tabsize=8) 吧字符串中的tab字符\t转换为指定数量的空格，默认为8个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello\tworld&quot;.expandtabs(tabsize&#x3D;8)</span><br><span class="line">&#39;hello   world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello\tworld&quot;.expandtabs(tabsize&#x3D;4)</span><br><span class="line">&#39;hello   world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello\tworld&quot;.expandtabs(tabsize&#x3D;16)</span><br><span class="line">&#39;hello           world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（32）startswith(prefix,start=0,end=len(string)) 判断字符串是否已给定的prefix为起始，如果是返回True，否则返回False，同时可以指定判断起始的位置。start和end默认为0和字符串的长度.</p><p> prefix还可以是一个有字符串元素组成的元组，只要有一个匹配上，即返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot;h&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot;hello&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot; &quot;,5,10)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot; &quot;,3,10)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; a.startswith((&quot;haha&quot;,&quot;hehe&quot;,&quot;h&quot;,&quot;w&quot;))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith((&quot;haha&quot;,&quot;hehe&quot;,&quot;m&quot;,&quot;w&quot;))</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（33）endswith(suffix,start=0,end=len(string)) 判断字符串是否已给定的suffix为结尾，如果是返回True，否则返回False，同时可以指定判断起始的位置。start和end默认为0和字符串的长度.</p><p> suffix还可以是一个有字符串元素组成的元组，只要有一个匹配上，即返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.endswith(&quot;d&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.endswith(&quot;world&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.endswith(&quot;d&quot;,0,4)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; a.endswith((&quot;hello&quot;,&quot;heheh&quot;,&quot;word&quot;,&quot;wd&quot;,&quot;d&quot;))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.endswith((&quot;hello&quot;,&quot;heheh&quot;,&quot;word&quot;,&quot;wd&quot;,&quot;h&quot;))</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（34）isupper() 如果字符串的所有字符都是大写，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;HELLO&quot;.isupper()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;HeLLO&quot;.isupper()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;HELLO WORLD&quot;.isupper()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.isupper()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（35）islower() 如果字符串的所有字符都是小写，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.islower()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;Hello world&quot;.islower()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.islower()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（36）istitle() 判断字符串中是否每个单词的首字母都睡大写，如果是返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;Hello World&quot;.istitle()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;Hello world&quot;.istitle()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（37）isspace() 如果字符串中的所有的字符都是空格，并且至少有一个字符，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;&quot;.isspace()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.isspace()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;    &quot;.isspace()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;\t&quot;.isspace()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;\n&quot;.isspace()</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（38）isprintable() 如果字符串中所有字符都可打印返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello &quot;.isprintable()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.isprintable()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;.isprintable()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;\t&quot;.isprintable()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;\n&quot;.isprintable()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;\r&quot;.isprintable()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;hello\nworld&quot;.isprintable()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（39）isnumeric() 如果字符串中所有字符均有数字组成，返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello&quot;.isnumeric()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;1234567890&quot;.isnumeric()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;0123&quot;.isnumeric()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot; 0234 &quot;.isnumeric()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;.isnumeric()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（40）isidentifier() 判断字符串是否为python的有效的标识符,python有效的额标识符为字母或下划线开头，由数字字母和下划线组成的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello&quot;.isidentifier()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;def&quot;.isidentifier()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;1abc&quot;.isidentifier()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;class&quot;.isidentifier()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;a-b&quot;.isidentifier()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（41）isdigit() 如果字符串中所有字符均有数字组成，返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;123&quot;.isdigit()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;a12&quot;.isdigit()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;0123&quot;.isdigit()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;.isdigit()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（42）isdecimal() 如果字符串中所有字符均有十进制字符组成，返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;0123456789&quot;.isdecimal()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;0b11&quot;.isdecimal()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;a0&quot;.isdecimal()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（43）isascii() 如果字符串中所有字符均为ascii范围内编码，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.isascii()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;你好&quot;.isascii()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（44）isalpha() 如果字符串中至少有一个字符并且所有字符都是字母，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.isalpha()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;helloworld&quot;.isalpha()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;abc123&quot;.isalpha()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（45）isalnum() 如果字符串中每个字符都是由字母或者数字组成，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.isalnum()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;helloworld&quot;.isalnum()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;abc123&quot;.isalnum()</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(3)--python的基本类型-数字</title>
      <link href="/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E6%95%B0%E5%AD%97/"/>
      <url>/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>数字：主要包括整数浮点数、布尔类型、复数</p><h4 id="1-整形和浮点型"><a href="#1-整形和浮点型" class="headerlink" title="1 整形和浮点型"></a>1 整形和浮点型</h4><ul><li>整数： int</li><li>浮点数： float</li></ul><p>注意：python3中没有long这种数据类型，python2中是有的</p><ul><li><p>(1)使用type函数可以查看数据的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(1)</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(-1)</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(1.1)</span><br><span class="line">&lt;class &#39;float&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（2）在交互式环境中数字四则运算可立即显示出结果，即所见即所得，这里需要注意的是 / 和 // 运算的区别，/运算的结果是float类型，而//的结果是向下取整</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 1+1</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 2*3</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; 4-3</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 5&#x2F;3</span><br><span class="line">1.6666666666666667</span><br><span class="line">&gt;&gt;&gt; 5&#x2F;&#x2F;3</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; -1&#x2F;&#x2F;2</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; 1&#x2F;&#x2F;-2</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; -1&#x2F;&#x2F;-2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="2-各种进制之间的数据使用与转换"><a href="#2-各种进制之间的数据使用与转换" class="headerlink" title="2 各种进制之间的数据使用与转换"></a>2 各种进制之间的数据使用与转换</h4></li><li><p>（1）各种进制在python中表示方法：二进制以0b开头，八进制以0o开头，十六进制以0x开头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 0b10</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 0b11</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; 0o10</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt; 0o11</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; 0x10</span><br><span class="line">16</span><br><span class="line">&gt;&gt;&gt; 0x11</span><br><span class="line">17</span><br><span class="line">&gt;&gt;&gt; 10</span><br><span class="line">10</span><br><span class="line">&gt;&gt;&gt; 11</span><br><span class="line">11</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（2）各种进制数向二进制转换，使用bin函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bin(10)</span><br><span class="line">&#39;0b1010&#39;</span><br><span class="line">&gt;&gt;&gt; bin(0o10)</span><br><span class="line">&#39;0b1000&#39;</span><br><span class="line">&gt;&gt;&gt; bin(0x10)</span><br><span class="line">&#39;0b10000&#39;</span><br></pre></td></tr></table></figure></li><li><p>（3）各种进制数向十进制转换，使用int函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(0b10)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; int(0o10)</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt; int(0x10)</span><br><span class="line">16</span><br></pre></td></tr></table></figure></li><li><p>（4）各种进制向十六进制转换，使用hex函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hex(0b10)</span><br><span class="line">&#39;0x2&#39;</span><br><span class="line">&gt;&gt;&gt; hex(10)</span><br><span class="line">&#39;0xa&#39;</span><br><span class="line">&gt;&gt;&gt; hex(0o10)</span><br><span class="line">&#39;0x8&#39;</span><br></pre></td></tr></table></figure></li><li><p>（5）各种进制数向八进制转换，使用oct函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; oct(0b10)</span><br><span class="line">&#39;0o2&#39;</span><br><span class="line">&gt;&gt;&gt; oct(10)</span><br><span class="line">&#39;0o12&#39;</span><br><span class="line">&gt;&gt;&gt; oct(0x10)</span><br><span class="line">&#39;0o20&#39;</span><br></pre></td></tr></table></figure><h4 id="3-布尔类型"><a href="#3-布尔类型" class="headerlink" title="3 布尔类型"></a>3 布尔类型</h4></li><li><p>（1）在python中，布尔值有True和False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; True</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; False</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; true</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &#39;true&#39; is not defined</span><br></pre></td></tr></table></figure></li><li><p>（2）使用type函数测试True和False的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(True)</span><br><span class="line">&lt;class &#39;bool&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(False)</span><br><span class="line">&lt;class &#39;bool&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（3）使用int函数观察True和False代表的整数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(True)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; int(False)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li><p>（4）数字中，非零的数转换为布尔类型均为True，只有零转换为布尔值为False，使用bool函数即可验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(1)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(0)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(-1)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(2)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(0.1)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（5）在字符串类型中，只有空字符串转换为布尔类型为False，非空字符串转换为布尔类型时均为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(&quot;abc&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(&quot;&quot;)</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（6）在列表类型中，只有空列表转换为布尔类型为False，非空列表转换为布尔类型时均为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool([1,2,3])</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool([]) </span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（7）在元组中，当元组为空时转换为布尔类型为False，非空时则表示的True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool((1,2,3))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(())</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（8）在字典中，但当字典中没有键值对时，转换为布尔类型为False，当字典中存在键值对时，则布尔值为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(&#123;&#125;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(&#123;&quot;a&quot;:1&#125;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（9）在集合中，当集合中没有元素时，代表的布尔值为False，当集合中存在元素时，其代表的布尔值为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(&#123;&#125;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(&#123;1,2,3,4&#125;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（10）在python中，None值代表的布尔值为False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(None)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h4 id="4-复数"><a href="#4-复数" class="headerlink" title="4 复数"></a>4 复数</h4><p>复数在平时代码开发中使用不是太多，了解即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 36j</span><br><span class="line">36j</span><br><span class="line">&gt;&gt;&gt; 1+4j</span><br><span class="line">(1+4j)</span><br><span class="line">&gt;&gt;&gt; (1+4j)*(2-3j)</span><br><span class="line">(14+5j)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(1)--python简介</title>
      <link href="/blog/2020/07/20/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--python%E7%AE%80%E4%BB%8B/"/>
      <url>/blog/2020/07/20/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--python%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="1-python与python特点："><a href="#1-python与python特点：" class="headerlink" title="1 python与python特点："></a>1 python与python特点：</h4><ul><li>Python是一种编程语言</li><li>语法简介、优雅，追求pythonic风格—-人生苦短，我用Python</li><li>跨平台，可以运行在Windows、Linux以及MacOS</li><li>易于学习，相对于C/C++，Java，C#，Go等，Python学习起来最简单</li><li>极为强大而丰富的标准库和第三方库，通俗点说轮子超多</li><li>Python是面向对象的语言</li></ul><h4 id="2-python能做什么？"><a href="#2-python能做什么？" class="headerlink" title="2 python能做什么？"></a>2 python能做什么？</h4><ul><li>爬虫</li><li>大数据与数据分析（Spark）</li><li>自动化测试与自动化运维</li><li>Web开发：Flask，Django</li><li>机器学习：TensorFlow（深度学习框架）</li><li>科学计算</li><li>胶水语言：缓和其他如C++,Java来编程</li></ul><h4 id="3-python之禅"><a href="#3-python之禅" class="headerlink" title="3 python之禅"></a>3 python之禅</h4><ul><li>1） Simple is better than complex  简洁胜于复杂</li><li>2） Now is better than never.Although newver is often than right now 做也许好过不做，但不假思索就动手还不如不做</li><li>3） Life is short,I use Python 人生苦短，我用Python</li></ul><h4 id="4-为什么喜欢python"><a href="#4-为什么喜欢python" class="headerlink" title="4 为什么喜欢python"></a>4 为什么喜欢python</h4><ul><li>1） 简洁，灵活，优雅，哲学</li><li>2） 易于上手，难于精通</li><li>3） Python既有动态脚本的特性，又有面向对象的特性</li></ul><h4 id="5-Python的缺点"><a href="#5-Python的缺点" class="headerlink" title="5 Python的缺点"></a>5 Python的缺点</h4><ul><li>1） 相对于C,C++,Java，运行效率较慢</li></ul><h4 id="6-常见语言的特点对比"><a href="#6-常见语言的特点对比" class="headerlink" title="6 常见语言的特点对比"></a>6 常见语言的特点对比</h4><ul><li>） 运行效率从高到低：C，C++，Go，Java，Python</li><li>） 开发效率从高到低：Python，Go，Java，C++，C</li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(24)--pytest的skip和skipif-嵌套使用</title>
      <link href="/blog/2020/07/19/pytest%E7%B3%BB%E5%88%97(24)--pytest%E7%9A%84skip%E5%92%8Cskipif-%E5%B5%8C%E5%A5%97%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/07/19/pytest%E7%B3%BB%E5%88%97(24)--pytest%E7%9A%84skip%E5%92%8Cskipif-%E5%B5%8C%E5%A5%97%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>pytest 的skip/skipif在跳过模块，跳过类，跳过函数这个三个层级是可以嵌套使用的，嵌套使用的规则就是只要有一个是真，则执行跳过操作</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_024</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>其中在test_ex_01.py编写如下在代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"># 因为1！&#x3D;2 ，所以这个跳过不会生效</span><br><span class="line">pytestmark&#x3D;pytest.mark.skipif(1&#x3D;&#x3D;2,reason&#x3D;&quot;跳过模块&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 因为没有skip生效，所以此用例会执行</span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"># 因为这个函数层级的skiif中1&#x3D;&#x3D;1为真，所以skip会生效，即不会执行此用例</span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;1,reason&#x3D;&quot;跳过test_02&quot;)</span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 此类没有类层级的skip</span><br><span class="line">class TestExample01():</span><br><span class="line">    # 因为函数层级的skip为真，会跳过</span><br><span class="line">    @pytest.mark.skipif(2&#x3D;&#x3D;2,reaon&#x3D;&quot;跳过test_01&quot;)</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br><span class="line"></span><br><span class="line">因为类层级的skip会生效，所以这个类中的所有测试函数都不会执行</span><br><span class="line">@pytest.mark.skip(&quot;跳过TestExample02类&quot;)</span><br><span class="line">class TestExample02():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample02.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample02.test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中的terminal中切入到ex_024目录中，然后执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_024&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_024</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py in test_01</span><br><span class="line">.ssin TestExample01.test_02</span><br><span class="line">.ss</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed, 4 skipped in 0.03s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(23)--pytest的skip和skipif-跳过模块</title>
      <link href="/blog/2020/07/18/pytest%E7%B3%BB%E5%88%97(23)--pytest%E7%9A%84skip%E5%92%8Cskipif-%E8%B7%B3%E8%BF%87%E6%A8%A1%E5%9D%97/"/>
      <url>/blog/2020/07/18/pytest%E7%B3%BB%E5%88%97(23)--pytest%E7%9A%84skip%E5%92%8Cskipif-%E8%B7%B3%E8%BF%87%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<p>skip和skipif跳过模块和跳过类以及函数略有区别，跳过模块即跳过文件，很简单，只需要在当前文件中增加如下一行即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytestmark&#x3D;pytest.mark.skip(reason&#x3D;&quot;跳过模块&quot;)</span><br></pre></td></tr></table></figure><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ex_023</span><br><span class="line">   |----test_ex_01.py</span><br><span class="line">   |----test_ex_02.py</span><br><span class="line">   |----test_ex_03.py</span><br></pre></td></tr></table></figure><p>其中在test_ex_01.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample01():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br></pre></td></tr></table></figure><p>test_ex_02.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">pytestmark&#x3D;pytest.mark.skip(reason&#x3D;&quot;跳过模块&quot;)</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample01():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br></pre></td></tr></table></figure><p>test_ex03.py文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">pytestmark&#x3D;pytest.mark.skipif(1&#x3D;&#x3D;1,reason&#x3D;&quot;跳过模块&quot;)</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample01():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中的terminal中切入到ex_023目录下，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_023&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_023</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 12 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_ex_01.py in test_01</span><br><span class="line">.in test_02</span><br><span class="line">.in TestExample01.test_01</span><br><span class="line">.in TestExample01.test_02</span><br><span class="line">.</span><br><span class="line">test_ex_02.py ssss</span><br><span class="line">test_ex_03.py ssss</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 4 passed, 8 skipped in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(22)--pytest的skip和skipif-跳过类</title>
      <link href="/blog/2020/07/18/pytest%E7%B3%BB%E5%88%97(22)--pytest%E7%9A%84skip%E5%92%8Cskipif-%E8%B7%B3%E8%BF%87%E7%B1%BB/"/>
      <url>/blog/2020/07/18/pytest%E7%B3%BB%E5%88%97(22)--pytest%E7%9A%84skip%E5%92%8Cskipif-%E8%B7%B3%E8%BF%87%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>跳过类中skip和skipif的用法不变，唯一改变的就是将skip或者skipif的装饰器放到要跳过的类的上面</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_022</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>其中在test_ex_01.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample01():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skip(&quot;跳过测试类&quot;)</span><br><span class="line">class TestExample02():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample02.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample02.test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;1,reason&#x3D;&quot;跳过测试类&quot;)</span><br><span class="line">class TestExample03():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample03.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample03.test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;2,reason&#x3D;&quot;跳过测试类&quot;)</span><br><span class="line">class TestExample04():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample04.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample04.test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中terminal中执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下，和上述分析预期一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_022&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_022</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 10 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_ex_01.py in test_01</span><br><span class="line">.in test_02</span><br><span class="line">.in TestExample01.test_01</span><br><span class="line">.in TestExample01.test_02</span><br><span class="line">.ssssin TestExample04.test_01</span><br><span class="line">.in TestExample04.test_02</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed, 4 skipped in 0.04s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(21)--pytest的skip和skipif-跳过函数</title>
      <link href="/blog/2020/07/18/pytest%E7%B3%BB%E5%88%97(21)--pytest%E7%9A%84skip%E5%92%8Cskipif-%E8%B7%B3%E8%BF%87%E5%87%BD%E6%95%B0/"/>
      <url>/blog/2020/07/18/pytest%E7%B3%BB%E5%88%97(21)--pytest%E7%9A%84skip%E5%92%8Cskipif-%E8%B7%B3%E8%BF%87%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>在函数上面加一个@pytest.mark.skip()装饰器即表示此函数所代表的测试用例不再执行，skip函数可以指定一个reason的参数，表示跳过此用例的原因，同样skipif函数则表示通过判断一定的条件，满足条件时则跳过此用例，skipif第二个参数同样是reason表示跳过的原因</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_021</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>其中test_ex_01.py编写如下代码，在类外和类中的函数分表增加skip和skipif装饰器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skip()</span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skip(reason&#x3D;&quot;功能暂时不支持&quot;)</span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;1,reason&#x3D;&quot;跳过，测试skipif的功能是否生效&quot;)</span><br><span class="line">def test_04():</span><br><span class="line">    print(&quot;in test_04&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;2,reason&#x3D;&quot;跳过，测试skipif的功能是否生效&quot;)</span><br><span class="line">def test_05():</span><br><span class="line">    print(&quot;in test_05&quot;)</span><br><span class="line"></span><br><span class="line">def test_06():</span><br><span class="line">    print(&quot;in test_06&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    @pytest.mark.skip()</span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample.test_02&quot;)</span><br><span class="line"></span><br><span class="line">    @pytest.mark.skip(reason&#x3D;&quot;功能暂时不支持&quot;)</span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;in TestExample.test_03&quot;)</span><br><span class="line"></span><br><span class="line">    @pytest.mark.skipif(1 &#x3D;&#x3D; 1, reason&#x3D;&quot;跳过，测试skipif的功能是否生效&quot;)</span><br><span class="line">    def test_04(self):</span><br><span class="line">        print(&quot;in TestExample.test_04&quot;)</span><br><span class="line"></span><br><span class="line">    @pytest.mark.skipif(1 &#x3D;&#x3D; 2, reason&#x3D;&quot;跳过，测试skipif的功能是否生效&quot;)</span><br><span class="line">    def test_05(self):</span><br><span class="line">        print(&quot;in TestExample.test_05&quot;)</span><br><span class="line"></span><br><span class="line">    def test_06(self):</span><br><span class="line">        print(&quot;in TestExample.test_06&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中terminal中执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下，和上述分析预期一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_021&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_021</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 12 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_ex_01.py in test_01</span><br><span class="line">.sssin test_05</span><br><span class="line">.in test_06</span><br><span class="line">.in TestExample.test_01</span><br><span class="line">.sssin TestExample.test_05</span><br><span class="line">.in TestExample.test_06</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed, 6 skipped in 0.07s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(20)--pytest的mark功能</title>
      <link href="/blog/2020/07/17/pytest%E7%B3%BB%E5%88%97(20)--pytest%E7%9A%84mark%E5%8A%9F%E8%83%BD/"/>
      <url>/blog/2020/07/17/pytest%E7%B3%BB%E5%88%97(20)--pytest%E7%9A%84mark%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p>pytest的mark功能主要用于给测试用例打不通的标签，在后续执行脚本的时候可以通过标签来指定运行哪些用例</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_020</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>在test_ex_01.py文件中编写如下代码，给一部分测试用例加上smoke的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.smoke</span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.smoke</span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_04():</span><br><span class="line">    print(&quot;in test_04&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.smoke</span><br><span class="line">def test_05():</span><br><span class="line">    print(&quot;in test_05&quot;)</span><br><span class="line"></span><br><span class="line">def test_06():</span><br><span class="line">    print(&quot;in test_06&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.smoke</span><br><span class="line">def test_07():</span><br><span class="line">    print(&quot;in test_07&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中的terminal中切换到ex_020的目录下，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s -m smoke</span><br></pre></td></tr></table></figure><p>运行结果如下，将打了smoke标签的几个用例执行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_020&gt;pytest -s -m smoke</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_020</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 7 items &#x2F; 3 deselected &#x2F; 4 selected                                                                                                                           </span><br><span class="line"></span><br><span class="line">test_ex_01.py in test_02</span><br><span class="line">.in test_03</span><br><span class="line">.in test_05</span><br><span class="line">.in test_07</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; warnings summary &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">test_ex_01.py:6</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\ex_020\test_ex_01.py:6: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can register cu</span><br><span class="line">stom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.smoke</span><br><span class="line"></span><br><span class="line">test_ex_01.py:10</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\ex_020\test_ex_01.py:10: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can register c</span><br><span class="line">ustom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.smoke</span><br><span class="line"></span><br><span class="line">test_ex_01.py:18</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\ex_020\test_ex_01.py:18: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can register c</span><br><span class="line">ustom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.smoke</span><br><span class="line"></span><br><span class="line">test_ex_01.py:25</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\ex_020\test_ex_01.py:25: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can register c</span><br><span class="line">ustom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.smoke</span><br><span class="line"></span><br><span class="line">-- Docs: https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;warnings.html</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 4 passed, 3 deselected, 4 warnings in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(19)--fixture调用方式-autouse=true</title>
      <link href="/blog/2020/07/16/pytest%E7%B3%BB%E5%88%97(19)--fixture%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F-autouse-true/"/>
      <url>/blog/2020/07/16/pytest%E7%B3%BB%E5%88%97(19)--fixture%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F-autouse-true/</url>
      
        <content type="html"><![CDATA[<p>如果所有的用例都需要执行的fixture，就没有必要再所有用例中通过传参的方式或者标记的方式，pytest的fixture提供了一种更为简洁的用例，即在定义fixture的时候，将参数autouse设置为True时，则在执行用例的时候自动去加载，无需显示调用</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_019</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>在文件test_ex_01.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;,autouse&#x3D;True)</span><br><span class="line">def func3():</span><br><span class="line">    print(&quot;in fixture func3 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func3 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的termin中切换至ex_019的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下，可以发现在三个测试用例中并未显示调用fixture，但是仍然执行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_019&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_019</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py in fixture func3 before testcase......</span><br><span class="line">in test_01</span><br><span class="line">.in fixture func3 after testcase......</span><br><span class="line">in fixture func3 before testcase......</span><br><span class="line">in test_02</span><br><span class="line">.in fixture func3 after testcase......</span><br><span class="line">in fixture func3 before testcase......</span><br><span class="line">in test_03</span><br><span class="line">.in fixture func3 after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(18)--fixture调用方式-pytest-mark-usefixtures</title>
      <link href="/blog/2020/07/16/pytest%E7%B3%BB%E5%88%97(18)--fixture%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F-pytest-mark-usefixtures/"/>
      <url>/blog/2020/07/16/pytest%E7%B3%BB%E5%88%97(18)--fixture%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F-pytest-mark-usefixtures/</url>
      
        <content type="html"><![CDATA[<p>fixture的第二种调用方式就是使用@pytest.mark.usefixtures的方式，如果有叠加调用，则先执行的需要放到下面</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_018</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>test_ex_01.py文件中编写如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;in fixture func1 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func1 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func2():</span><br><span class="line">    print(&quot;in fixture func2 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func2 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.usefixtures(&quot;func1&quot;)</span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.usefixtures(&quot;func2&quot;)</span><br><span class="line">@pytest.mark.usefixtures(&quot;func1&quot;)</span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的termin中切入到ex_018的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示，与上述分析结果一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_018&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_018</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 2 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py in fixture func1 before testcase......</span><br><span class="line">in test_01</span><br><span class="line">.in fixture func1 after testcase......</span><br><span class="line">in fixture func1 before testcase......</span><br><span class="line">in fixture func2 before testcase......</span><br><span class="line">in test_02</span><br><span class="line">.in fixture func2 after testcase......</span><br><span class="line">in fixture func1 after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_018&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(17)--fixture调用方式-参数传入</title>
      <link href="/blog/2020/07/16/pytest%E7%B3%BB%E5%88%97(17)--fixture%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F-%E5%8F%82%E6%95%B0%E4%BC%A0%E5%85%A5/"/>
      <url>/blog/2020/07/16/pytest%E7%B3%BB%E5%88%97(17)--fixture%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F-%E5%8F%82%E6%95%B0%E4%BC%A0%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>fixture的第一种调用方式就是作为参数传入，在测试用例中按照参数位置的先后顺序执行</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_017</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>在test_ex_01.py找那个编写如下代码：test_01中通过参数传入的方式调用一个fixture，而test_02则通过参数传递的方式调用两个fixture，这两个fixture的调用顺序跟参数的位置一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;in fixture func1 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func1 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func2():</span><br><span class="line">    print(&quot;in fixture func2 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func2 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_01(func1):</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func1,func2):</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中进入到ex_017的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_017&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_017</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 2 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py in fixture func1 before testcase......</span><br><span class="line">in test_01</span><br><span class="line">.in fixture func1 after testcase......</span><br><span class="line">in fixture func1 before testcase......</span><br><span class="line">in fixture func2 before testcase......</span><br><span class="line">in test_02</span><br><span class="line">.in fixture func2 after testcase......</span><br><span class="line">in fixture func1 after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed in 0.02s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(16)--fixture的作用范围-session</title>
      <link href="/blog/2020/07/16/pytest%E7%B3%BB%E5%88%97(16)--fixture%E7%9A%84%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4-session/"/>
      <url>/blog/2020/07/16/pytest%E7%B3%BB%E5%88%97(16)--fixture%E7%9A%84%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4-session/</url>
      
        <content type="html"><![CDATA[<p>当fixture的scope定义为session时，是指在当前目录下的所有用例之前和之后执行fixture对应的操作</p><p>使用方式是在指定目录下创建conftest.py文件，然后在conftest.py文件中定义fixture方法，病将scope指定为session，此时在当前目录下只要有一个用例使用了此fixture，则就会在当前目录下所有用例之前和之后会执行fixture定义的对应的操作</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ex_016</span><br><span class="line">   |----conftest.py</span><br><span class="line">   |----test_ex_01.py</span><br><span class="line">   |----test_ex_02.py</span><br></pre></td></tr></table></figure><p>其中在conftest.py中定义fixture，并且指定scope为session，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;session&quot;)</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;\nin session fixuture before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in session fixture after testcase......&quot;)</span><br></pre></td></tr></table></figure><p>在test_ex_01.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>在test_ex_02.py编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>载pycharm中的terminal中切换至ex_016目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示，与上述分析结果一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_016&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_016</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 12 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_ex_01.py</span><br><span class="line">in session fixuture before testcase......</span><br><span class="line">in outer class test_01</span><br><span class="line">.in outer class test_02</span><br><span class="line">.</span><br><span class="line">in outer class test_03</span><br><span class="line">.in inner class test_01</span><br><span class="line">.in inner class test_02</span><br><span class="line">.</span><br><span class="line">in inner class test_03</span><br><span class="line">.</span><br><span class="line">test_ex_02.py in outer class test_01</span><br><span class="line">.in outer class test_02</span><br><span class="line">.</span><br><span class="line">in outer class test_03</span><br><span class="line">.in inner class test_01</span><br><span class="line">.in inner class test_02</span><br><span class="line">.</span><br><span class="line">in inner class test_03</span><br><span class="line">.in session fixture after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 12 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(15)--fixture的作用范围-module</title>
      <link href="/blog/2020/07/15/pytest%E7%B3%BB%E5%88%97(15)--fixture%E7%9A%84%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4-module/"/>
      <url>/blog/2020/07/15/pytest%E7%B3%BB%E5%88%97(15)--fixture%E7%9A%84%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4-module/</url>
      
        <content type="html"><![CDATA[<p>在python中module即文件，所有fixture定义为module时，顾名思义，此fixture将在当前文件中去起作用</p><p>这里需要特别说明的是，当fixture的scope定义为module时，只要当前文件中有一个测试用例使用了fixture，不管这个用例是在类外，还是在类中，都会在当前文件（模块）的所有测试用例执行之前去执行fixture定义的行为以及当前文件的所有用例结束之后同样去执行fixture定义的对应操作</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_015</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>test_ex_01.py文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;module&quot;)</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;\nin fixture before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中的termin中切换至ex_015目录下，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_015&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_015</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py</span><br><span class="line">in fixture before testcase......</span><br><span class="line">in outer class test_01</span><br><span class="line">.in outer class test_02</span><br><span class="line">.</span><br><span class="line">in outer class test_03</span><br><span class="line">.in inner class test_01</span><br><span class="line">.in inner class test_02</span><br><span class="line">.</span><br><span class="line">in inner class test_03</span><br><span class="line">.in fixture after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.03s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(14)--fixture的作用范围-class</title>
      <link href="/blog/2020/07/15/pytest%E7%B3%BB%E5%88%97(14)--fixture%E7%9A%84%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4-class/"/>
      <url>/blog/2020/07/15/pytest%E7%B3%BB%E5%88%97(14)--fixture%E7%9A%84%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4-class/</url>
      
        <content type="html"><![CDATA[<p>fixture的scope值还可以是class，此时则fixture定义的动作就会在测试类class的所有用例之前和之后运行，这里需要注意两点</p><ul><li>测试类中只要有一个测试用例的参数中使用了class级别的fixture，则在整个测试类的所有测试用例之前都会去执行fixture定义的动作，以及此测试类的所有用例结束后同样要运行fixture指定的动作</li><li>如果在类外的函数中去使用class级别的fixture，则此时在测试类外每个测试用例中，fixture跟上一节讲的function级别的fixture作用是一致的，即在类外的函数中弱引用了fixture，则在此函数之前和之后同样去执行fixture定义的对应的操作</li></ul><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_014</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>在test_ex_01.py文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;class&quot;)</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;\nin fixture before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中切换至ex_014的目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_014&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_014</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py</span><br><span class="line">in fixture before testcase......</span><br><span class="line">in outer class test_01</span><br><span class="line">.in fixture after testcase......</span><br><span class="line"></span><br><span class="line">in fixture before testcase......</span><br><span class="line">in outer class test_02</span><br><span class="line">.in fixture after testcase......</span><br><span class="line"></span><br><span class="line">in outer class test_03</span><br><span class="line">.</span><br><span class="line">in fixture before testcase......</span><br><span class="line">in inner class test_01</span><br><span class="line">.in inner class test_02</span><br><span class="line">.</span><br><span class="line">in inner class test_03</span><br><span class="line">.in fixture after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.04s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(13)--fixture的作用范围-function</title>
      <link href="/blog/2020/07/15/pytest%E7%B3%BB%E5%88%97(13)--fixture%E7%9A%84%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4-function/"/>
      <url>/blog/2020/07/15/pytest%E7%B3%BB%E5%88%97(13)--fixture%E7%9A%84%E4%BD%9C%E7%94%A8%E8%8C%83%E5%9B%B4-function/</url>
      
        <content type="html"><![CDATA[<p>在定义fuxture函数的时候，可以使用scope来定义fixture作用的范围，如果不指定，则默认为函数级，即与scope=“function”是一样</p><p>定义为function级别，则只要在测试用例的参数中使用了fixture函数名，则就会在测试用例的之前和之后执行fixture对应的操作</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_013</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>其中在test_ex_01.py中编写如下代码，即定义了两个fixture，func1为未明确指定scope的范围，func2指定了scope的值为function，在类外定义了三个测试用例，其中test_03为使用fixture，在测试类中也定义了三个测试用例方法，test_03也未应用fixture</p><p>当fixture的scope未指定或指定为function时，不管是类外的测试用例还是测试类中的测试用例方法，只要在测试用例方法的参数中指定了fixture，则都会在每个测试用例之前和之后执行fixture定义的对应的操作</p><p>test_ex_01.py中代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;\nin func1 before testcase.......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in func1 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func2():</span><br><span class="line">    print(&quot;\nin func2 before testcase.......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in func2 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_01(func1):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func2):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func1):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func2):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中切换至ex_013的目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下，与上述分析结论一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_013&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_013</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py</span><br><span class="line">in func1 before testcase.......</span><br><span class="line">in outer class test_01</span><br><span class="line">.in func1 after testcase......</span><br><span class="line"></span><br><span class="line">in func2 before testcase.......</span><br><span class="line">in outer class test_02</span><br><span class="line">.in func2 after testcase......</span><br><span class="line"></span><br><span class="line">in outer class test_03</span><br><span class="line">.</span><br><span class="line">in func1 before testcase.......</span><br><span class="line">in inner class test_01</span><br><span class="line">.in func1 after testcase......</span><br><span class="line"></span><br><span class="line">in func2 before testcase.......</span><br><span class="line">in inner class test_02</span><br><span class="line">.in func2 after testcase......</span><br><span class="line"></span><br><span class="line">in inner class test_03</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.03s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(12)--fixture功能-在函数执行前后插入操作</title>
      <link href="/blog/2020/07/15/pytest%E7%B3%BB%E5%88%97(12)--fixture%E5%8A%9F%E8%83%BD-%E5%9C%A8%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%89%8D%E5%90%8E%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/2020/07/15/pytest%E7%B3%BB%E5%88%97(12)--fixture%E5%8A%9F%E8%83%BD-%E5%9C%A8%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E5%89%8D%E5%90%8E%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>pytest的fixture另一个强大的功能就是在函数执行前后增加操作，类似setup和teardown操作，但是比setup和teardown的操作更加灵活</p><p>具体使用方式是同样定义一个函数，然后用装饰器标记为fixture，然后在此函数中使用一个yield语句，yield语句之前的就会在测试用例之前使用，yield之后的语句就会在测试用例执行完成之后再执行</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_012</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>在test_ex_01.py文件中编写如下代码，实现一个fixture函数func，这里面有一个yield语句，它上面的都会在测试用例执行之前执行，它下面的会在测试用例执行之后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;run before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;run after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line">    </span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line">    </span><br><span class="line">def test_03(func):</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中切换到ex_012目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下：运行结果与分析一致，其中test_02这个测试用例的入参中没有设置func的参数，所以不会调用func的fixture功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_012&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_012</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py run before testcase......</span><br><span class="line">in test_01</span><br><span class="line">.run after testcase......</span><br><span class="line">in test_02</span><br><span class="line">.run before testcase......</span><br><span class="line">in test_03</span><br><span class="line">.run after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(11)--fixture功能-向测试用例注入参数</title>
      <link href="/blog/2020/07/15/pytest%E7%B3%BB%E5%88%97(11)--fixture%E5%8A%9F%E8%83%BD-%E5%90%91%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E6%B3%A8%E5%85%A5%E5%8F%82%E6%95%B0/"/>
      <url>/blog/2020/07/15/pytest%E7%B3%BB%E5%88%97(11)--fixture%E5%8A%9F%E8%83%BD-%E5%90%91%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E6%B3%A8%E5%85%A5%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>fixture功能是pytest一个强大的特性，本篇主要介绍fixture的其中一个功能：向测试用例注入参数。</p><p>可以这么简单的理解：讲一个函数通过装饰器的方式注册为fixture方法，然后在这个方法有一个返回值，这样在测试用例中如果想使用这个方绘制，直接将这个方法名放入测试用例的参数即可</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_011</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>在test_ex_01.py中编写如下代码,func函数被一个装饰器修饰为fixture方法，则在测试用例test_01和test_03中想使用func这个函数的返回值，则只需要将func函数名放入test_01和test_03,而测试用例test_02中并不想使用func的返回值，则测试用例test_02的入参中无需放入func函数名</p><p>如此以来，在测试用例test_01和test_03中就可以直接使用func的返回值了，而且在测试用例中，func这个函数名就代表的是func函数的返回值，比如这里在test_01和test_03中的func其实就是func函数中的返回的obj即一个字典</p><p>这里需要切记的是，在测试用例test_01和测试用例test_03中，func并不是指func这个函数，而是是func这个函数的返回值，这一点需要格外注意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def func():</span><br><span class="line">    obj&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">    return obj</span><br><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;\nin test_01&quot;)</span><br><span class="line">    for key,value in func.items():</span><br><span class="line">        print(key,value)</span><br><span class="line">        </span><br><span class="line">def test_02():</span><br><span class="line">    pritn(&quot;in test_02&quot;)</span><br><span class="line">    </span><br><span class="line">def test_03(func):</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br><span class="line">    print(type(func))</span><br></pre></td></tr></table></figure><p>在pycham的terminal中首先切换到ex_011目录下，然后执行如下命令：</p><p>运行结果如下：结果与上述分析一致，在test_01和test_03中，func的值就是func函数的返回值obj，即字典，而在test_02中，因为测试用例中的函数中没有将func加入到参数列表中，所以不会感知到func的存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_011&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_011</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py</span><br><span class="line">in test_01</span><br><span class="line">a 1</span><br><span class="line">b 2</span><br><span class="line">c 3</span><br><span class="line">.in test_02</span><br><span class="line">.in test_03</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(10)--测试模块的setup和teardown</title>
      <link href="/blog/2020/07/14/pytest%E7%B3%BB%E5%88%97(10)--%E6%B5%8B%E8%AF%95%E6%A8%A1%E5%9D%97%E7%9A%84setup%E5%92%8Cteardown/"/>
      <url>/blog/2020/07/14/pytest%E7%B3%BB%E5%88%97(10)--%E6%B5%8B%E8%AF%95%E6%A8%A1%E5%9D%97%E7%9A%84setup%E5%92%8Cteardown/</url>
      
        <content type="html"><![CDATA[<p>测试模块的setup和teardown只有一种，即：setup_module和teardown_module，在模块即文件中的所有测试用例包括测试类中和测试类外的之前和之后运行一次</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_010</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>在test_ex_01.py文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">def setup_module():</span><br><span class="line">    print(&quot;\nin setup_module&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown_module():</span><br><span class="line">    print(&quot;in teardown_module&quot;)</span><br><span class="line">    </span><br><span class="line">def setup_function():</span><br><span class="line">    print(&quot;in setup_function&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown_function():</span><br><span class="line">    print(&quot;in teardown_function&quot;)</span><br><span class="line">    </span><br><span class="line">def setup():</span><br><span class="line">    print(&quot;in class outer setup&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown():</span><br><span class="line">    print(&quot;in class outer teardown&quot;)</span><br><span class="line">    </span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in class outer test_01&quot;)</span><br><span class="line">    </span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in class outer test_02&quot;)</span><br><span class="line">    </span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in class outer test_03&quot;)</span><br><span class="line">    </span><br><span class="line">class TestExample():</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;in setup_class&quot;)</span><br><span class="line">        </span><br><span class="line">    def testdown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line">        </span><br><span class="line">    def setup_method(self):</span><br><span class="line">        print(&quot;in setup_method&quot;)</span><br><span class="line">        </span><br><span class="line">    def teardown_method(self):</span><br><span class="line">        print(&quot;in teardown_method&quot;)</span><br><span class="line">        </span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in class inner setup&quot;)</span><br><span class="line">        </span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;in class inner teardown&quot;)</span><br><span class="line">    </span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in class inner test_01&quot;)</span><br><span class="line">        </span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in class inner test_02&quot;)</span><br><span class="line">    </span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;in class inner test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中切换到ex_010的目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_010&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_010</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 7 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py</span><br><span class="line">in setup_module</span><br><span class="line">in setup_function</span><br><span class="line">in class outer setup</span><br><span class="line">in class outer test_01</span><br><span class="line">.in class outer teardown</span><br><span class="line">in teardown_function</span><br><span class="line">in setup_function</span><br><span class="line">in class outer setup</span><br><span class="line">in class outer test_02</span><br><span class="line">.in class outer teardown</span><br><span class="line">in teardown_function</span><br><span class="line">in setup_function</span><br><span class="line">in class outer setup</span><br><span class="line">in class outer test_03</span><br><span class="line">.in class outer teardown</span><br><span class="line">in teardown_function</span><br><span class="line">in setup_class</span><br><span class="line">in setup_method</span><br><span class="line">in class inner setup</span><br><span class="line">in teardown_class</span><br><span class="line">.in class inner teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in class inner setup</span><br><span class="line">in class inner test_01</span><br><span class="line">.in class inner teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in class inner setup</span><br><span class="line">in class inner test_02</span><br><span class="line">.in class inner teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in class inner setup</span><br><span class="line">in class inner test_03</span><br><span class="line">.in class inner teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in teardown_module</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 7 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(9)--测试类外的setup和teardown</title>
      <link href="/blog/2020/07/14/pytest%E7%B3%BB%E5%88%97(9)--%E6%B5%8B%E8%AF%95%E7%B1%BB%E5%A4%96%E7%9A%84setup%E5%92%8Cteardown/"/>
      <url>/blog/2020/07/14/pytest%E7%B3%BB%E5%88%97(9)--%E6%B5%8B%E8%AF%95%E7%B1%BB%E5%A4%96%E7%9A%84setup%E5%92%8Cteardown/</url>
      
        <content type="html"><![CDATA[<p>测试类外的setup和teardown有两类：</p><ul><li>setup_function 和 teardown_function 在类外的每个用例之前和之后执行</li><li>setup 和 teardown 在类外的每个测试用例之前和之后执行，其中setup在setup_function之后执行，teardown在teardown_function之前执行</li></ul><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_009</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>test_ex_01.py文件中编写如下测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def setup_function():</span><br><span class="line">    print(&quot;\nin setup_function&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown_function():</span><br><span class="line">    print(&quot;in teardown_function&quot;)</span><br><span class="line">    </span><br><span class="line">def setup():</span><br><span class="line">    print(&quot;in setup&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown():</span><br><span class="line">    print(&quot;in teardown&quot;)</span><br><span class="line">    </span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line">    </span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line">    </span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br></pre></td></tr></table></figure><p>执行结果如下：与上述分析结果一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_009&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_009</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py</span><br><span class="line">in setup_function</span><br><span class="line">in setup</span><br><span class="line">in test_01</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_function</span><br><span class="line"></span><br><span class="line">in setup_function</span><br><span class="line">in setup</span><br><span class="line">in test_02</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_function</span><br><span class="line"></span><br><span class="line">in setup_function</span><br><span class="line">in setup</span><br><span class="line">in test_03</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_function</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(8)--测试类中的setup与teardown</title>
      <link href="/blog/2020/07/14/pytest%E7%B3%BB%E5%88%97(8)--%E6%B5%8B%E8%AF%95%E7%B1%BB%E4%B8%AD%E7%9A%84setup%E4%B8%8Eteardown/"/>
      <url>/blog/2020/07/14/pytest%E7%B3%BB%E5%88%97(8)--%E6%B5%8B%E8%AF%95%E7%B1%BB%E4%B8%AD%E7%9A%84setup%E4%B8%8Eteardown/</url>
      
        <content type="html"><![CDATA[<p>测试类中的setup与teardown共有三类：</p><ul><li>setup_class 和 teardown_class 在类的所有用例之前和之后执行</li><li>setup_methond 和 teardown_method 在类中每个用例之前和之后执行</li><li>setup 和 teardown 也是在类中的每个用例之前和之后执行，但是setup在setup_method之后执行，teardown在teardown_methond之前执行</li></ul><p>建立如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_008</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>其中在test_ex_01.py中编写如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class TestExample():</span><br><span class="line"></span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;\nin setup_class&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line"></span><br><span class="line">    def setup_method(self):</span><br><span class="line">        print(&quot;in setup_method&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_method(self):</span><br><span class="line">        print(&quot;in teardown_method&quot;)</span><br><span class="line"></span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in setup&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;teardown&quot;)</span><br><span class="line"></span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;in test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中切换至ex_008目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下，与上述分析结果一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_008&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_008</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py</span><br><span class="line">in setup_class</span><br><span class="line">in setup_method</span><br><span class="line">in setup</span><br><span class="line">in test_01</span><br><span class="line">.teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in setup</span><br><span class="line">in test_02</span><br><span class="line">.teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in setup</span><br><span class="line">in test_03</span><br><span class="line">.teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in teardown_class</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.04s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(7)--断言使用assert</title>
      <link href="/blog/2020/07/13/pytest%E7%B3%BB%E5%88%97(7)--%E6%96%AD%E8%A8%80%E4%BD%BF%E7%94%A8assert/"/>
      <url>/blog/2020/07/13/pytest%E7%B3%BB%E5%88%97(7)--%E6%96%AD%E8%A8%80%E4%BD%BF%E7%94%A8assert/</url>
      
        <content type="html"><![CDATA[<p>pytest 断言使用的python的标准的assert，断言条件其实就是pyuthon基础语法中判断一个值或者表达式的结果是否为真的情况，在断言之后还可以加上断言的内容描述</p><p>创建如下结构的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_007</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>其中test_ex_01.py文件中编写如下测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def test_assert_01():</span><br><span class="line">    assert 1 &#x3D;&#x3D; 1, &quot;1应该等于1&quot;</span><br><span class="line"></span><br><span class="line">def test_assert_02():</span><br><span class="line">    assert isinstance(10,int), &quot;10应该是整形&quot;</span><br><span class="line"></span><br><span class="line">def test_assert_03():</span><br><span class="line">    assert &quot;&quot; ,&quot;空字符串应该是true&quot;</span><br></pre></td></tr></table></figure><p>在pycharm中的terminal首先切入到ex_007的目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：test_assert_03明显断言是错误的，所以这个用例会失败，另外两个则是成功的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_007&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_007</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_001.py ..F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_assert_03 ____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_assert_03():</span><br><span class="line">&gt;       assert &quot;&quot; ,&quot;空字符串应该是true&quot;</span><br><span class="line">E       AssertionError: 空字符串应该是true</span><br><span class="line">E       assert &#39;&#39;</span><br><span class="line"></span><br><span class="line">test_ex_001.py:10: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_ex_001.py::test_assert_03 - AssertionError: 空字符串应该是true</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 2 passed in 0.14s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(6)--使用类组织用例</title>
      <link href="/blog/2020/07/13/pytest%E7%B3%BB%E5%88%97(6)--%E4%BD%BF%E7%94%A8%E7%B1%BB%E7%BB%84%E7%BB%87%E7%94%A8%E4%BE%8B/"/>
      <url>/blog/2020/07/13/pytest%E7%B3%BB%E5%88%97(6)--%E4%BD%BF%E7%94%A8%E7%B1%BB%E7%BB%84%E7%BB%87%E7%94%A8%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>使用文件组织用例的时候，如果想在所有用例之前只执行一次初始化操作，而当所有用例执行完成之后再进行公共的清理配置操作，在文件组织用例的形式下是做不到的，这个时候就需要使用测试类来组织用例</p><p>在使用类组织用例的时候，类名必须是Test开头，类不能有初始化函数<strong>init</strong>，类中的测试用例名称同样必须test开头，此外，类中可以有setup和teardown，setup是在类中每个用例执行之前执行，teardown是在每个用例执行结束之后执行</p><p>除此以外，类中还有setup_class和teardown_class，setup_class是在类的所有用例执行前执行一次，待所有用例执行结束之后，再执行testdown_class方法</p><p>创建如下结构文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_006</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>其中test_ex_01.py文件中编写如下测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class TestFunction(object):</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;\nin setup_class&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line"></span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in setup&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;in teardown&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func1(self):</span><br><span class="line">        print(&quot;in test_func1&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func3(self):</span><br><span class="line">        print(&quot;in test_func3&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中切换至ex_006的目录中，然后执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下：与上述分析结果一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_006&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_006</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py</span><br><span class="line">in setup_class</span><br><span class="line">in setup</span><br><span class="line">in test_func1</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func2</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func3</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_class</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.04s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(5)--使用文件组织用例</title>
      <link href="/blog/2020/07/13/pytest%E7%B3%BB%E5%88%97(5)--%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87%E7%94%A8%E4%BE%8B/"/>
      <url>/blog/2020/07/13/pytest%E7%B3%BB%E5%88%97(5)--%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E7%BB%84%E7%BB%87%E7%94%A8%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="使用文件组织用例的结构"><a href="#使用文件组织用例的结构" class="headerlink" title="使用文件组织用例的结构"></a>使用文件组织用例的结构</h4><p>主要组成部分有setup，teardown 和各个用例，每个用例的方法名必须以test开头，在每个用例执行之前会去执行setup初始化配置，每个用例执行完成之后都会去执行teardown清理配置</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_005</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>在test_ex_01.py文件中编写如下测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def setup():</span><br><span class="line">    print(&quot;in setup&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown():</span><br><span class="line">    print(&quot;in teardown&quot;)</span><br><span class="line">    </span><br><span class="line">def test_func1():</span><br><span class="line">    print(&quot;in test_func1&quot;)</span><br><span class="line">    </span><br><span class="line">def test_func2():</span><br><span class="line">    print(&quot;in test_func2&quot;)</span><br><span class="line">    </span><br><span class="line">def test_func3():</span><br><span class="line">    print(&quot;in test_func3&quot;)</span><br></pre></td></tr></table></figure><p>然后在pycharm的terminal中首先切换到ex_005的目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示，即每个测试用例在执行之前首先执行setu操作，每个用例执行完成之后都执行了teardown操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_005&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_005</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py in setup</span><br><span class="line">in test_func1</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func2</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func3</span><br><span class="line">.in teardown</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.07s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(4)--断言指定异常</title>
      <link href="/blog/2020/07/12/pytest%E7%B3%BB%E5%88%97(4)--%E6%96%AD%E8%A8%80%E6%8C%87%E5%AE%9A%E5%BC%82%E5%B8%B8/"/>
      <url>/blog/2020/07/12/pytest%E7%B3%BB%E5%88%97(4)--%E6%96%AD%E8%A8%80%E6%8C%87%E5%AE%9A%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h4 id="raises-可以帮助断言指定代码抛出指定的异常，如果和断言一致，则用例通过，否则则失败"><a href="#raises-可以帮助断言指定代码抛出指定的异常，如果和断言一致，则用例通过，否则则失败" class="headerlink" title="raises 可以帮助断言指定代码抛出指定的异常，如果和断言一致，则用例通过，否则则失败"></a>raises 可以帮助断言指定代码抛出指定的异常，如果和断言一致，则用例通过，否则则失败</h4><p>断言异常的方式是使用with pytest.raises(Exception类型)的格式</p><p>建立文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_004</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><p>在test_ex_01.py文件中编写如下代码，首先编写一个被测函数function，函数功能是返回两个数的除法的商，然后写了两个测试用例，每个都传入两个数，其中除数是0，一个用例判断会抛出ZeroDivisionError异常，另一个断言会抛出ValueError异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def function(a,b):</span><br><span class="line">    return a&#x2F;b</span><br><span class="line"></span><br><span class="line">def test_function():</span><br><span class="line">    with pytest.raises(ZeroDivisionError):</span><br><span class="line">        function(100,0)</span><br><span class="line"></span><br><span class="line">def test_function2():</span><br><span class="line">    with pytest.raises(ValueError):</span><br><span class="line">        function(100,0)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal窗口中进入到ex_004的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下：和预期结果一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_004&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_004</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 2 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_ex_01.py .F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_function2 ____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_function2():</span><br><span class="line">        with pytest.raises(ValueError):</span><br><span class="line">&gt;           function(100,0)</span><br><span class="line"></span><br><span class="line">test_ex_01.py:12:</span><br><span class="line">_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _</span><br><span class="line"></span><br><span class="line">a &#x3D; 100, b &#x3D; 0</span><br><span class="line"></span><br><span class="line">    def function(a,b):</span><br><span class="line">&gt;       return a&#x2F;b</span><br><span class="line">E       ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">test_ex_01.py:4: ZeroDivisionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_ex_01.py::test_function2 - ZeroDivisionError: division by zero</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 1 passed in 0.12s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(3)--执行多条用例</title>
      <link href="/blog/2020/07/12/pytest%E7%B3%BB%E5%88%97(3)--%E6%89%A7%E8%A1%8C%E5%A4%9A%E6%9D%A1%E7%94%A8%E4%BE%8B/"/>
      <url>/blog/2020/07/12/pytest%E7%B3%BB%E5%88%97(3)--%E6%89%A7%E8%A1%8C%E5%A4%9A%E6%9D%A1%E7%94%A8%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>注：当前使用的pytest版本为5.4.3</p><h2 id="pytest-标准的测试发现原则："><a href="#pytest-标准的测试发现原则：" class="headerlink" title="pytest 标准的测试发现原则："></a>pytest 标准的测试发现原则：</h2><ul><li>如果pytest 命令指定了目录参数，则从指定目录查找</li><li>如果pytest 命令没有通过参数形式指定目录，则从当前目录下查找是否有pytest.ini文件，如果有则从文件中查找 testpaths的值作为查找目录</li><li>如果在当前目录下没有找到pytest.ini文件，或者pytest.ini文件中没有配置testpaths值，则从当前目录递归查找</li><li>查找文件要求是test_*.py 或者 *_test.py </li><li>在文件中类的外面查找test开头的函数</li><li>在没有定义<strong>init</strong>方法的并且以Test开头的类中查找test开头的函数</li></ul><p>新建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ex_003</span><br><span class="line">   |----ex_03_test.py</span><br><span class="line">   |----ex_04test.py</span><br><span class="line">   |----test_ex_01.py</span><br><span class="line">   |----testex_02.py</span><br></pre></td></tr></table></figure><p>每个文件中都编写如下相同的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 符合条件，文件中类外，test开头的函数</span><br><span class="line">def test_function1():</span><br><span class="line">    print(&quot;in test_function1&quot;)</span><br><span class="line">    </span><br><span class="line"># 符合条件，文件中类外，test开头的函数</span><br><span class="line">def testfunction2():</span><br><span class="line">    print(&quot;in testfunction2&quot;)</span><br><span class="line">    </span><br><span class="line"># 不符合条件，文件中类外，非test开头的函数</span><br><span class="line">def function3_test():</span><br><span class="line">    print(&quot;in function3_test&quot;)</span><br><span class="line">    </span><br><span class="line"># 不符合条件，文件中类外，非test开头的函数</span><br><span class="line">def function4test():</span><br><span class="line">    print(&quot;in function4test&quot;)</span><br><span class="line">    </span><br><span class="line"># 符合条件的类，类命名以Test开头，并且没有__init__.py文件</span><br><span class="line">class TestClass1():</span><br><span class="line">    </span><br><span class="line">    # 符合条件，类中以test开头的函数</span><br><span class="line">    def test_function1(self):</span><br><span class="line">        print(&quot;in TestClass1.test_function1&quot;)</span><br><span class="line"></span><br><span class="line">    # 符合条件，类中以test开头的函数</span><br><span class="line">    def testfunction2(self):</span><br><span class="line">        print(&quot;in TestClass1.testfunction2&quot;)</span><br><span class="line"></span><br><span class="line">    # 不符合条件，类中非以test开头的函数</span><br><span class="line">    def function3_test(self):</span><br><span class="line">        print(&quot;in TestClass1.function3_test&quot;)</span><br><span class="line"></span><br><span class="line">    # 不符合条件，类中非以test开头的函数</span><br><span class="line">    def function4test(self):</span><br><span class="line">        print(&quot;in TestClass1.function4test&quot;)</span><br><span class="line">       </span><br><span class="line"># 不符合条件的类，类命名虽然以Test开头，但是有__init__.py文件，此类中所有函数不会被pytest发现</span><br><span class="line">class TestClass2():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">    def test_function1(self):</span><br><span class="line">        print(&quot;in TestClass2.test_function1&quot;)</span><br><span class="line"></span><br><span class="line">    def testfunction2(self):</span><br><span class="line">        print(&quot;in TestClass2.testfunction2&quot;)</span><br><span class="line"></span><br><span class="line">    def function3_test(self):</span><br><span class="line">        print(&quot;in TestClass2.function3_test&quot;)</span><br><span class="line"></span><br><span class="line">    def function4test(self):</span><br><span class="line">        print(&quot;in TestClass2.function4test&quot;)</span><br><span class="line">        </span><br><span class="line"># 不符合条件的类，类命名非以Test开头，此类中所有测试函数不会被pytest发现</span><br><span class="line">class Class3Test():</span><br><span class="line"></span><br><span class="line">    def test_function1(self):</span><br><span class="line">        print(&quot;in Class3Test.test_function1&quot;)</span><br><span class="line"></span><br><span class="line">    def testfunction2(self):</span><br><span class="line">        print(&quot;in Class3Test.testfunction2&quot;)</span><br><span class="line"></span><br><span class="line">    def function3_test(self):</span><br><span class="line">        print(&quot;in Class3Test.function3_test&quot;)</span><br><span class="line"></span><br><span class="line">    def function4test(self):</span><br><span class="line">        print(&quot;in Class3Test.function4test&quot;)</span><br></pre></td></tr></table></figure><p>首先上述文件中通过与标准测试发现规则对比可以很容易的分析出只有 ex_03_test.py和test_ex_01.py符合文件命名规则要求，其他两个文件中的测试函数或者测试类不会被pytest发现</p><p>每个文件中的代码分析见代码中的每个函数或者类上面的分析</p><p>下面在pycharm的terminal中首先进入到ex_003的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_003&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_003</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 8 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">ex_03_test.py in test_function1</span><br><span class="line">.in testfunction2</span><br><span class="line">.in TestClass1.test_function1</span><br><span class="line">.in TestClass1.testfunction2</span><br><span class="line">.</span><br><span class="line">test_ex_01.py in test_function1</span><br><span class="line">.in testfunction2</span><br><span class="line">.in TestClass1.test_function1</span><br><span class="line">.in TestClass1.testfunction2</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; warnings summary &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">ex_03_test.py:38</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\ex_003\ex_03_test.py:38: PytestCollectionWarning: cannot collect test class &#39;TestClass2&#39; because it has a __init__</span><br><span class="line"> constructor (from: ex_03_test.py)</span><br><span class="line">    class TestClass2():</span><br><span class="line"></span><br><span class="line">test_ex_01.py:44</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\ex_003\test_ex_01.py:44: PytestCollectionWarning: cannot collect test class &#39;TestClass2&#39; because it has a __init__</span><br><span class="line"> constructor (from: test_ex_01.py)</span><br><span class="line">    class TestClass2():</span><br><span class="line"></span><br><span class="line">-- Docs: https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;warnings.html</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 8 passed, 2 warnings in 0.16s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_003&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(2)--创建第一个测试用例</title>
      <link href="/blog/2020/07/11/pytest%E7%B3%BB%E5%88%97(2)--%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/"/>
      <url>/blog/2020/07/11/pytest%E7%B3%BB%E5%88%97(2)--%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="1、新建一个目录，比如ex-002-在目录中新建一个测试文件，比如-test-ex-01-py"><a href="#1、新建一个目录，比如ex-002-在目录中新建一个测试文件，比如-test-ex-01-py" class="headerlink" title="1、新建一个目录，比如ex_002,在目录中新建一个测试文件，比如 test_ex_01.py"></a>1、新建一个目录，比如ex_002,在目录中新建一个测试文件，比如 test_ex_01.py</h4><p>文件结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex_002</span><br><span class="line">   |----test_ex_01.py</span><br></pre></td></tr></table></figure><h4 id="2、在test-ex-01-py文件中编写如下代码-即编写一个被测函数add，此函数返回两个数之和，然后对这个函数编写测试用例，assert为断言，这里判断函数传入10和20，返回结果等于50，很明显从逻辑上分析这个断言是错误的"><a href="#2、在test-ex-01-py文件中编写如下代码-即编写一个被测函数add，此函数返回两个数之和，然后对这个函数编写测试用例，assert为断言，这里判断函数传入10和20，返回结果等于50，很明显从逻辑上分析这个断言是错误的" class="headerlink" title="2、在test_ex_01.py文件中编写如下代码,即编写一个被测函数add，此函数返回两个数之和，然后对这个函数编写测试用例，assert为断言，这里判断函数传入10和20，返回结果等于50，很明显从逻辑上分析这个断言是错误的"></a>2、在test_ex_01.py文件中编写如下代码,即编写一个被测函数add，此函数返回两个数之和，然后对这个函数编写测试用例，assert为断言，这里判断函数传入10和20，返回结果等于50，很明显从逻辑上分析这个断言是错误的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def add(a,b):</span><br><span class="line">    return a+b</span><br><span class="line"></span><br><span class="line">def test_add():</span><br><span class="line">    assert(add(10,20)&#x3D;&#x3D;50)</span><br></pre></td></tr></table></figure><h4 id="3、在pycharm中打开terminal窗口，在terminal窗口通过cd命令进入到ex-002的目录，然后执行如下命令"><a href="#3、在pycharm中打开terminal窗口，在terminal窗口通过cd命令进入到ex-002的目录，然后执行如下命令" class="headerlink" title="3、在pycharm中打开terminal窗口，在terminal窗口通过cd命令进入到ex_002的目录，然后执行如下命令"></a>3、在pycharm中打开terminal窗口，在terminal窗口通过cd命令进入到ex_002的目录，然后执行如下命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest</span><br></pre></td></tr></table></figure><h4 id="4、运行之后得到如下结果，提示用例失败，断言30-50，与上面分析结论一致"><a href="#4、运行之后得到如下结果，提示用例失败，断言30-50，与上面分析结论一致" class="headerlink" title="4、运行之后得到如下结果，提示用例失败，断言30==50，与上面分析结论一致"></a>4、运行之后得到如下结果，提示用例失败，断言30==50，与上面分析结论一致</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_002&gt;pytest</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_002</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 1 item                                                                                                                                                        </span><br><span class="line"></span><br><span class="line">test_ex_01.py F                                                                                                                                                   [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_______________________________________________________________________________ test_add _______________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_add():</span><br><span class="line">&gt;       assert(add(10,20)&#x3D;&#x3D;50)</span><br><span class="line">E       assert 30 &#x3D;&#x3D; 50</span><br><span class="line">E        +  where 30 &#x3D; add(10, 20)</span><br><span class="line"></span><br><span class="line">test_ex_01.py:6: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_ex_01.py::test_add - assert 30 &#x3D;&#x3D; 50</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed in 0.16s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(1)--环境安装</title>
      <link href="/blog/2020/07/11/pytest%E7%B3%BB%E5%88%97(1)--%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
      <url>/blog/2020/07/11/pytest%E7%B3%BB%E5%88%97(1)--%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>注：默认环境已经安装了miniconda，若未安装，请参考<a href="https://redrose2100.github.io/blog/2020/07/10/miniconda%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">Miniconda安装</a></p><h4 id="1、安装python3-8-3的虚拟环境"><a href="#1、安装python3-8-3的虚拟环境" class="headerlink" title="1、安装python3.8.3的虚拟环境"></a>1、安装python3.8.3的虚拟环境</h4><p>打开cmd窗口，执行如下命令安装名为PytestEnv的基于python3.8.3的虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n PytestEnv python&#x3D;3.8.3</span><br></pre></td></tr></table></figure><h4 id="2、激活名为PytestEnv的虚拟环境"><a href="#2、激活名为PytestEnv的虚拟环境" class="headerlink" title="2、激活名为PytestEnv的虚拟环境"></a>2、激活名为PytestEnv的虚拟环境</h4><p>执行如下命令激活名为PytestEnv的虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate PytestEnv</span><br></pre></td></tr></table></figure><h4 id="3、安装pytest"><a href="#3、安装pytest" class="headerlink" title="3、安装pytest"></a>3、安装pytest</h4><p>执行如下命令安装pytest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest</span><br></pre></td></tr></table></figure><h4 id="4、安装pytest-html"><a href="#4、安装pytest-html" class="headerlink" title="4、安装pytest-html"></a>4、安装pytest-html</h4><p>执行如下命令，安装pytest-html，用于生成测试用例的html报告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest-html</span><br></pre></td></tr></table></figure><h4 id="5、查看安装的pytest版本"><a href="#5、查看安装的pytest版本" class="headerlink" title="5、查看安装的pytest版本"></a>5、查看安装的pytest版本</h4><p>执行如下命令查看pytest版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest --version</span><br></pre></td></tr></table></figure><p>显示信息如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation&gt;pytest --version</span><br><span class="line">This is pytest version 5.4.3, imported from d:\miniconda\envs\pytestenv\lib\site-packages\pytest\__init__.py</span><br><span class="line">setuptools registered plugins:</span><br><span class="line">  pytest-html-2.1.1 at d:\miniconda\envs\pytestenv\lib\site-packages\pytest_html\plugin.py</span><br><span class="line">  pytest-metadata-1.10.0 at d:\miniconda\envs\pytestenv\lib\site-packages\pytest_metadata\plugin.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_pytest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RobotFramework系列-环境安装</title>
      <link href="/blog/2020/07/11/RobotFramework%E7%B3%BB%E5%88%97-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
      <url>/blog/2020/07/11/RobotFramework%E7%B3%BB%E5%88%97-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>注：默认环境已经安装了miniconda，若未安装，请参考<a href="https://redrose2100.github.io/blog/2020/07/10/miniconda%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">Miniconda安装</a></p><h4 id="1、安装python3-7-6的虚拟环境"><a href="#1、安装python3-7-6的虚拟环境" class="headerlink" title="1、安装python3.7.6的虚拟环境"></a>1、安装python3.7.6的虚拟环境</h4><p>打开cmd，执行如下命令创建python3.7.6的虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n RobotFrameworkEnv python&#x3D;3.7.6</span><br></pre></td></tr></table></figure><h4 id="2、激活RobotFrameworkEnv虚拟环境"><a href="#2、激活RobotFrameworkEnv虚拟环境" class="headerlink" title="2、激活RobotFrameworkEnv虚拟环境"></a>2、激活RobotFrameworkEnv虚拟环境</h4><p>执行如下命令，激活RobotFrameworkEnv虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate RobotFrameworkEnv</span><br></pre></td></tr></table></figure><h4 id="3、安装RobotFramework包"><a href="#3、安装RobotFramework包" class="headerlink" title="3、安装RobotFramework包"></a>3、安装RobotFramework包</h4><p>执行如下命令，安装RobotFramework包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install robotframework</span><br></pre></td></tr></table></figure><h4 id="4、安装wxPython包"><a href="#4、安装wxPython包" class="headerlink" title="4、安装wxPython包"></a>4、安装wxPython包</h4><p>执行如下命令，安装wxPython</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install wxpython</span><br></pre></td></tr></table></figure><h4 id="5、安装Ride编辑器"><a href="#5、安装Ride编辑器" class="headerlink" title="5、安装Ride编辑器"></a>5、安装Ride编辑器</h4><p>执行如下命令，安装RobotFramework-ride编辑器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install robotframework-ride</span><br></pre></td></tr></table></figure><h4 id="6、启动RF"><a href="#6、启动RF" class="headerlink" title="6、启动RF"></a>6、启动RF</h4><p>在cmd中执行如下命令，即可启动RobotFramework的图形化界面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ride</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python_robotframework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python_robotframework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(2)--Python环境的安装-miniconda的使用</title>
      <link href="/blog/2020/07/10/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--Python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-miniconda%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/07/10/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--Python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-miniconda%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Miniconda是做什么用的？"><a href="#1、Miniconda是做什么用的？" class="headerlink" title="1、Miniconda是做什么用的？"></a>1、Miniconda是做什么用的？</h2><p>简单点来说，miniconda是为了方便的创建多个python虚拟环境，方便多个python项目同时开发的时候，每个项目都有自己独立的python开发环境，可以理解为virtualenv的高级版，使用起来非常方便</p><h2 id="2、win10下如何下载安装？"><a href="#2、win10下如何下载安装？" class="headerlink" title="2、win10下如何下载安装？"></a>2、win10下如何下载安装？</h2><ul><li><p>打开miniconda官网地址，根据操作系统位数选择，这里选择windows系统下64位，python3.7版本的软件安装包，然后点击即可下载<br><a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener">https://docs.conda.io/en/latest/miniconda.html</a></p></li><li><p>下载完成后，然后找到下载的安装文件Miniconda3-latest-Windows-x86_64.exe，然后【右键】-【以管理员权限运行】，在选择install for的步骤时，选择【all users】，安装路径推荐放在D:/Miniconda  路径下（尽量不要安装到C盘，因为C盘是系统盘，选择将Miniconda3天假到系统环境变量中，其他步骤中均保持默认即可</p></li></ul><h2 id="3、Miniconda如何使用？"><a href="#3、Miniconda如何使用？" class="headerlink" title="3、Miniconda如何使用？"></a>3、Miniconda如何使用？</h2><ul><li>创建python虚拟环境：</li></ul><p>比如这里创建一个名称为Test1Env的虚拟环境，指定其python版本为3.8.3，则打开cmd窗口，然后执行如下命令，遇到提示继续输入y即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n Test1Env python&#x3D;3.8.3</span><br></pre></td></tr></table></figure><ul><li>查看当前已经安装的虚拟环境列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><ul><li>激活指定名称的虚拟环境</li></ul><p>比如激活名称为Test1ENV的虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate Test1Env</span><br></pre></td></tr></table></figure><ul><li>退出当前环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><ul><li>删除虚拟环境</li></ul><p>比如删除名称为Test1Env的虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env remove -n Test1Env</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 基础语法</title>
      <link href="/blog/2020/07/10/markdown-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/blog/2020/07/10/markdown-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h2><p>一个#号是一级标题，二个#号是二级标题，以此类推，支持六级</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题 </span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h5 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h5><h2 id="2、字体"><a href="#2、字体" class="headerlink" title="2、字体"></a>2、字体</h2><ul><li>加粗</li></ul><p>要加粗的文字左右分别用两个*括起来</p><ul><li>斜体</li></ul><p>要斜体的文字左右分别用一个*括起来</p><ul><li>斜体加粗</li></ul><p>要倾斜和加粗的文字左右分别用三个*括起来</p><ul><li>删除线</li></ul><p>要加删除线的文字左右分别用两个~括起来</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是要加粗的文字**</span><br><span class="line">*这是要倾斜的文字*</span><br><span class="line">***这是要倾斜并且加粗的文字***</span><br><span class="line">~~这是要加删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是要加粗的文字</strong></p><p><em>这是要倾斜的文字</em></p><p><strong><em>这是要倾斜并且加粗的文字</em></strong></p><p><del>这是要加删除线的文字</del></p><h2 id="3、引用"><a href="#3、引用" class="headerlink" title="3、引用"></a>3、引用</h2><p>在应用的文字前加 &gt; 即可</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是应用的内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p></blockquote><h2 id="4、分割线"><a href="#4、分割线" class="headerlink" title="4、分割线"></a>4、分割线</h2><p>三个或三个以上的-或者* 都可以</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">****</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><hr><h2 id="5、图片"><a href="#5、图片" class="headerlink" title="5、图片"></a>5、图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;</span><br><span class="line">u&#x3D;702257389,1274025419&amp;fm&#x3D;27&amp;gp&#x3D;0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>![blockchain](<a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/" target="_blank" rel="noopener">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a><br>u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)</p><h2 id="6、超链接"><a href="#6、超链接" class="headerlink" title="6、超链接"></a>6、超链接</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http:&#x2F;&#x2F;jianshu.com)</span><br><span class="line">[百度](http:&#x2F;&#x2F;baidu.com)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a></p><p><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><h3 id="7、列表"><a href="#7、列表" class="headerlink" title="7、列表"></a>7、列表</h3><ul><li>无序列表</li></ul><p>语法：无需列表用- * + 任何一种都可以</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br></pre></td></tr></table></figure><p>注意：- + * 跟内容之间都要有一个空格</p><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li><p>列表内容</p></li><li><p>有序列表</p></li></ul><p>语法：数字加点</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br></pre></td></tr></table></figure><p>注意：序号跟内容之间要有空格</p><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><ul><li>列表嵌套</li></ul><p>上一级和下一级敲三个空格即可</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 一级无序列表</span><br><span class="line">   * 二级无序列表</span><br><span class="line">   * 二级无序列表</span><br><span class="line">   * 二级无序列表</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>一级无序列表<ul><li>二级无序列表</li><li>二级无序列表</li><li>二级无序列表</li></ul></li></ul><h2 id="8、表格"><a href="#8、表格" class="headerlink" title="8、表格"></a>8、表格</h2><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|姓名|技能|排行|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|刘备|哭|大哥|</span><br><span class="line">|关羽|打|二哥|</span><br><span class="line">|张飞|骂|三弟|</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th align="left">姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td align="left">刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td align="left">关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td align="left">张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h2 id="9、代码"><a href="#9、代码" class="headerlink" title="9、代码"></a>9、代码</h2><p>语法：</p><p>单行代码：代码之间分别用一个反引号包起来</p><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;print(111)&#96;</span><br></pre></td></tr></table></figure><p>效果：</p><p><code>print(111)</code></p><p>示例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">    if a&gt;1:</span><br><span class="line">        print(11111)</span><br><span class="line">    else:</span><br><span class="line">        print(22222)</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p><p>效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if a&gt;1:</span><br><span class="line">    print(11111)</span><br><span class="line">else:</span><br><span class="line">    print(22222)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
