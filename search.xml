<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python高级语法系列(3)--python中常见内置类型</title>
      <link href="/blog/2020/08/17/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(3)--python%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/blog/2020/08/17/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(3)--python%E4%B8%AD%E5%B8%B8%E8%A7%81%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="1-对象三个特征"><a href="#1-对象三个特征" class="headerlink" title="1 对象三个特征"></a>1 对象三个特征</h4><ul><li>身份 ，可以通过id()获得</li><li>类型</li><li>值<h4 id="2-python中常见的内置类型"><a href="#2-python中常见的内置类型" class="headerlink" title="2 python中常见的内置类型"></a>2 python中常见的内置类型</h4></li><li>（1）None（全局唯一）</li><li>（2）数值<ul><li>int</li><li>float</li><li>complex</li><li>bool</li></ul></li><li>（3）序列类型<ul><li>list</li><li>bytes,bytearray,memoryview</li><li>range</li><li>tuple</li><li>str</li><li>array</li></ul></li><li>（4）迭代类型</li><li>（5）映射类型（dict）</li><li>（6）集合<ul><li>set</li><li>frozenset</li></ul></li><li>（7）上下文管理类型(with)</li><li>其他<ul><li>模块类型</li><li>class 和 实例</li><li>函数类型</li><li>方法类型</li><li>代码类型</li><li>object对象</li><li>type类型</li><li>ellipsis</li><li>notimplemented类型</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(2)--type、object和class的关系</title>
      <link href="/blog/2020/08/17/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(2)--type%E3%80%81object%E5%92%8Cclass%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/blog/2020/08/17/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(2)--type%E3%80%81object%E5%92%8Cclass%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="1-type类生成具体的类，具体的类则生成具体的实例，type-gt-int-gt-1-type-gt-str-gt-”abc”"><a href="#1-type类生成具体的类，具体的类则生成具体的实例，type-gt-int-gt-1-type-gt-str-gt-”abc”" class="headerlink" title="1 type类生成具体的类，具体的类则生成具体的实例，type-&gt;int-&gt;1,type-&gt;str-&gt;”abc”"></a>1 type类生成具体的类，具体的类则生成具体的实例，type-&gt;int-&gt;1,type-&gt;str-&gt;”abc”</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;100</span><br><span class="line">b&#x3D;&quot;hello world&quot;</span><br><span class="line">print(type(a))</span><br><span class="line">print(type(int))</span><br><span class="line">print(type(b))</span><br><span class="line">print(type(str))</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&lt;class &#39;type&#39;&gt;</span><br><span class="line">&lt;class &#39;str&#39;&gt;</span><br><span class="line">&lt;class &#39;type&#39;&gt;</span><br></pre></td></tr></table></figure><h4 id="2-对于自定义类，对象由自定义的类生成的，而自定义的类同样也是由type生成的"><a href="#2-对于自定义类，对象由自定义的类生成的，而自定义的类同样也是由type生成的" class="headerlink" title="2 对于自定义类，对象由自定义的类生成的，而自定义的类同样也是由type生成的"></a>2 对于自定义类，对象由自定义的类生成的，而自定义的类同样也是由type生成的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Student:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">stu&#x3D;Student()</span><br><span class="line">print(type(stu))</span><br><span class="line">print(type(Student))</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;__main__.Student&#39;&gt;</span><br><span class="line">&lt;class &#39;type&#39;&gt;</span><br></pre></td></tr></table></figure><h4 id="3-object类是所有类的最顶层的基类"><a href="#3-object类是所有类的最顶层的基类" class="headerlink" title="3 object类是所有类的最顶层的基类"></a>3 object类是所有类的最顶层的基类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(int.__bases__)</span><br><span class="line">print(str.__bases__)</span><br><span class="line"></span><br><span class="line">class People:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Person(People):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">print(Person.__bases__)</span><br><span class="line">print(People.__bases__)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(&lt;class &#39;object&#39;&gt;,)</span><br><span class="line">(&lt;class &#39;object&#39;&gt;,)</span><br><span class="line">(&lt;class &#39;__main__.People&#39;&gt;,)</span><br><span class="line">(&lt;class &#39;object&#39;&gt;,)</span><br></pre></td></tr></table></figure><h4 id="4、object类是由type类实例化而来的，而type的基类又是object，而object的基类则为空"><a href="#4、object类是由type类实例化而来的，而type的基类又是object，而object的基类则为空" class="headerlink" title="4、object类是由type类实例化而来的，而type的基类又是object，而object的基类则为空"></a>4、object类是由type类实例化而来的，而type的基类又是object，而object的基类则为空</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(type(object))</span><br><span class="line">print(type.__bases__)</span><br><span class="line">print(object.__bases__)</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &#39;type&#39;&gt;</span><br><span class="line">(&lt;class &#39;object&#39;&gt;,)</span><br><span class="line">()</span><br></pre></td></tr></table></figure><h4 id="5-type，object-和class-的关系"><a href="#5-type，object-和class-的关系" class="headerlink" title="5 type，object 和class 的关系"></a>5 type，object 和class 的关系</h4><ul><li>object 是所有类的顶层基类</li><li>type 的基类也是object</li><li>object是type的实例</li><li>type 是 type的实例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">实例-------&gt;|</span><br><span class="line"> |         |</span><br><span class="line"> |         |&lt;---实例-----|     </span><br><span class="line"> |--------type        object&lt;--继承---|</span><br><span class="line">           |----继承----&gt;|            |</span><br><span class="line">           |                         |</span><br><span class="line">           |&lt;----------实例----------list</span><br><span class="line">           |&lt;----------实例----------str</span><br><span class="line">           |&lt;----------实例----------dict</span><br><span class="line">           |&lt;----------实例----------tuple</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式python系列(1)--设计模式简介</title>
      <link href="/blog/2020/08/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fpython%E7%B3%BB%E5%88%97(1)--%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/"/>
      <url>/blog/2020/08/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8Fpython%E7%B3%BB%E5%88%97(1)--%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="1-设计模式简介"><a href="#1-设计模式简介" class="headerlink" title="1 设计模式简介"></a>1 设计模式简介</h4><ul><li>设计模式（Design Pattern）是一套被反复使用，多数人知晓的，经过分类编目的、代码设计经验的总结</li><li>设计模式是为了可重用代码，让代码更容易被他人理解、保证代码可靠性</li><li>设计模式使代码编程真正的工程化，设计模式是软件工程的基石</li></ul><h4 id="2-设计模式的分类"><a href="#2-设计模式的分类" class="headerlink" title="2 设计模式的分类"></a>2 设计模式的分类</h4><ul><li>创建型模式<ul><li>简单工厂模式（Simple Factory）</li><li>工厂方法模式（Factory Method）</li><li>抽象工厂模式（Abstract Factory）</li><li>创建者模式（Builder）</li><li>原型模式（Prototype）</li><li>单例模式（Singleton）</li></ul></li><li>结构型模式<ul><li>外观模式（Facade）</li><li>适配器模式（Adapter）</li><li>代理模式（Proxy）</li><li>装饰模式（Decorator）</li><li>桥模式（Bridge）</li><li>组合模式（Composite）</li><li>享元模式（Flyweight）</li></ul></li><li>行为型模式<ul><li>模板方法模式（Template Method）</li><li>观察者模式（Observer）</li><li>状态模式（State）</li><li>策略模式（Strategy）</li><li>职责链模式（Chain of Responsibility）</li><li>命令模式（Command）</li><li>访问者模式（Visitor)</li><li>调停者模式（Mediator）</li><li>备忘录模式（Memento）</li><li>迭代器模式（Iterator）</li><li>解释器模式（Interpreter）<h4 id="3-设计模式的六大原则"><a href="#3-设计模式的六大原则" class="headerlink" title="3 设计模式的六大原则"></a>3 设计模式的六大原则</h4></li></ul></li><li>开闭原则(Open Close Principle)<ul><li>开闭原则就是对扩展开放，对修改关闭</li></ul></li><li>里氏代换原则(Liskow Substitution Principle)<ul><li>里氏代换原则是面向对象设计的基本原则之一，任何基类可以出现的地方，子类一定可以出现</li></ul></li><li>依赖倒转原则(Dependence Inversion Principle)<ul><li>只对接口编程，依赖于抽象而不依赖于具体</li></ul></li><li>接口隔离原则(Interface Segregation Principle)<ul><li>使用多个隔离的接口，比使用单个接口更好</li></ul></li><li>迪米特法则（最少知道原则）(Demeter Principle)<ul><li>一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立</li></ul></li><li>合成复用原则(Composite Reuse Principle)<ul><li>原则是尽量使用合成/聚合，尽量减少使用继承</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式python系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式python系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础知识超详细实战系列总结</title>
      <link href="/blog/2020/08/10/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%B6%85%E8%AF%A6%E7%BB%86%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/"/>
      <url>/blog/2020/08/10/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E8%B6%85%E8%AF%A6%E7%BB%86%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="python基础系列-1-–python简介"><a href="#python基础系列-1-–python简介" class="headerlink" title="python基础系列(1)–python简介"></a><a href="https://redrose2100.github.io/blog/2020/07/20/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--python%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">python基础系列(1)–python简介</a></h3><h3 id="python基础系列-2-–Python环境的安装-miniconda的使用"><a href="#python基础系列-2-–Python环境的安装-miniconda的使用" class="headerlink" title="python基础系列(2)–Python环境的安装-miniconda的使用"></a><a href="https://redrose2100.github.io/blog/2020/07/10/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--Python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-miniconda%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">python基础系列(2)–Python环境的安装-miniconda的使用</a></h3><h3 id="python基础系列-3-–python的基本类型-数字"><a href="#python基础系列-3-–python的基本类型-数字" class="headerlink" title="python基础系列(3)–python的基本类型-数字"></a><a href="https://redrose2100.github.io/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E6%95%B0%E5%AD%97/" target="_blank" rel="noopener">python基础系列(3)–python的基本类型-数字</a></h3><h3 id="python基础系列-4-–python的基本类型-字符串"><a href="#python基础系列-4-–python的基本类型-字符串" class="headerlink" title="python基础系列(4)–python的基本类型-字符串"></a><a href="https://redrose2100.github.io/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E4%B8%B2/" target="_blank" rel="noopener">python基础系列(4)–python的基本类型-字符串</a></h3><h3 id="python基础系列-5-–python的基本类型-列表"><a href="#python基础系列-5-–python的基本类型-列表" class="headerlink" title="python基础系列(5)–python的基本类型-列表"></a><a href="https://redrose2100.github.io/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%88%97%E8%A1%A8/" target="_blank" rel="noopener">python基础系列(5)–python的基本类型-列表</a></h3><h3 id="python基础系列-6-–python的基本类型-元组"><a href="#python基础系列-6-–python的基本类型-元组" class="headerlink" title="python基础系列(6)–python的基本类型-元组"></a><a href="https://redrose2100.github.io/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(6)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%85%83%E7%BB%84/" target="_blank" rel="noopener">python基础系列(6)–python的基本类型-元组</a></h3><h3 id="python基础系列-7-–python的基本类型-集合"><a href="#python基础系列-7-–python的基本类型-集合" class="headerlink" title="python基础系列(7)–python的基本类型-集合"></a><a href="https://redrose2100.github.io/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(7)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E9%9B%86%E5%90%88/" target="_blank" rel="noopener">python基础系列(7)–python的基本类型-集合</a></h3><h3 id="python基础系列-8-–python的基本类型-字典"><a href="#python基础系列-8-–python的基本类型-字典" class="headerlink" title="python基础系列(8)–python的基本类型-字典"></a><a href="https://redrose2100.github.io/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(8)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E5%85%B8/" target="_blank" rel="noopener">python基础系列(8)–python的基本类型-字典</a></h3>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级语法系列(1)--python中的一切皆对象</title>
      <link href="/blog/2020/08/10/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(1)--python%E4%B8%AD%E7%9A%84%E4%B8%80%E5%88%87%E7%9A%86%E5%AF%B9%E8%B1%A1/"/>
      <url>/blog/2020/08/10/python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95%E7%B3%BB%E5%88%97(1)--python%E4%B8%AD%E7%9A%84%E4%B8%80%E5%88%87%E7%9A%86%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="1-python中一切皆对象，类和函数都是“一等公民”，其中一等公民的含义如下："><a href="#1-python中一切皆对象，类和函数都是“一等公民”，其中一等公民的含义如下：" class="headerlink" title="1 python中一切皆对象，类和函数都是“一等公民”，其中一等公民的含义如下："></a>1 python中一切皆对象，类和函数都是“一等公民”，其中一等公民的含义如下：</h4><ul><li>赋值给一个变量</li><li>可以增加到集合对象中</li><li>可以作为参数传递给参数</li><li>可以作为函数的返回值</li></ul><h4 id="2-下面用代码演示在python中类和函数都是一等公民"><a href="#2-下面用代码演示在python中类和函数都是一等公民" class="headerlink" title="2 下面用代码演示在python中类和函数都是一等公民"></a>2 下面用代码演示在python中类和函数都是一等公民</h4><ul><li><p>（1） 类和函数都可以进行赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 定义一个函数</span><br><span class="line">def func(name&#x3D;&quot;default&quot;):</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"># 函数赋值</span><br><span class="line">my_func&#x3D;func</span><br><span class="line">my_func(&quot;jack&quot;)</span><br><span class="line"></span><br><span class="line"># 定义一个类</span><br><span class="line">class Person:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&#39;person&#39;)</span><br><span class="line"></span><br><span class="line"># 类进行赋值</span><br><span class="line">MyPerson&#x3D;Person</span><br><span class="line">p&#x3D;MyPerson()</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jack</span><br><span class="line">person</span><br></pre></td></tr></table></figure></li><li><p>（2）类和函数都可以加到列表中去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个函数</span><br><span class="line">def func(name&#x3D;&quot;default&quot;):</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"># 定义一个类</span><br><span class="line">class Person:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&#39;person&#39;)</span><br><span class="line"></span><br><span class="line"># 定义一个列表</span><br><span class="line">obj_list&#x3D;[]</span><br><span class="line"># 函数和类可以加到列表中</span><br><span class="line">obj_list.append(func)</span><br><span class="line">obj_list.append(Person)</span><br><span class="line">for item in obj_list:</span><br><span class="line">    item()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">default</span><br><span class="line">person</span><br></pre></td></tr></table></figure></li><li><p>（3）类和函数都可以作为参数传入函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个函数</span><br><span class="line">def func(name&#x3D;&quot;default&quot;):</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"># 定义一个类</span><br><span class="line">class Person:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        print(&#39;person&#39;)</span><br><span class="line"></span><br><span class="line"># 定义一个执行函数，参数为一个函数</span><br><span class="line">def run(func):</span><br><span class="line">    print(&quot;begin to run func&quot;)</span><br><span class="line">    func()</span><br><span class="line">    print(&quot;finish running func...&quot;)</span><br><span class="line"></span><br><span class="line">run(func)</span><br><span class="line">run(Person)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">begin to run func</span><br><span class="line">default</span><br><span class="line">finish running func...</span><br><span class="line">begin to run func</span><br><span class="line">person</span><br><span class="line">finish running func...</span><br></pre></td></tr></table></figure></li><li><p>（4）类和函数都可以作为函数的返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 函数作为函数的返回值</span><br><span class="line">def func_01():</span><br><span class="line">    def func():</span><br><span class="line">        print(&quot;jack&quot;)</span><br><span class="line">    return func</span><br><span class="line"></span><br><span class="line"># 类作为函数的返回值</span><br><span class="line">def func_02():</span><br><span class="line">    class Person():</span><br><span class="line">        def __init__(self):</span><br><span class="line">            print(&quot;person&quot;)</span><br><span class="line">    return Person</span><br><span class="line"></span><br><span class="line">f&#x3D;func_01()</span><br><span class="line">f()</span><br><span class="line">p&#x3D;func_02()</span><br><span class="line">p()</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jack</span><br><span class="line">person</span><br></pre></td></tr></table></figure><p>总结：在python中，函数和类都和普通的变量一样，都可以赋值，加到列表中，也可以作为函数的参数传入函数，也可以作为函数的返回值返回</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> python高级语法系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python高级语法系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest自动化测试框架超详细实战系列总结</title>
      <link href="/blog/2020/08/10/pytest%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E8%B6%85%E8%AF%A6%E7%BB%86%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/"/>
      <url>/blog/2020/08/10/pytest%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E8%B6%85%E8%AF%A6%E7%BB%86%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="pytest系列-1-–安装以及快速入门"><a href="#pytest系列-1-–安装以及快速入门" class="headerlink" title="pytest系列(1)–安装以及快速入门"></a><a href="https://redrose2100.github.io/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(1)--%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/" target="_blank" rel="noopener">pytest系列(1)–安装以及快速入门</a></h3><h3 id="pytest系列-2-–测试用例的组织及运行"><a href="#pytest系列-2-–测试用例的组织及运行" class="headerlink" title="pytest系列(2)–测试用例的组织及运行"></a><a href="https://redrose2100.github.io/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(2)--%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%BB%84%E7%BB%87%E5%8F%8A%E8%BF%90%E8%A1%8C/" target="_blank" rel="noopener">pytest系列(2)–测试用例的组织及运行</a></h3><h3 id="pytest系列-3-–断言的使用"><a href="#pytest系列-3-–断言的使用" class="headerlink" title="pytest系列(3)–断言的使用"></a><a href="https://redrose2100.github.io/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(3)--%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">pytest系列(3)–断言的使用</a></h3><h3 id="pytest系列-4-–setup与teardown"><a href="#pytest系列-4-–setup与teardown" class="headerlink" title="pytest系列(4)–setup与teardown"></a><a href="https://redrose2100.github.io/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(4)--setup%E4%B8%8Eteardown/" target="_blank" rel="noopener">pytest系列(4)–setup与teardown</a></h3><h3 id="pytest系列-5-–fixture详解"><a href="#pytest系列-5-–fixture详解" class="headerlink" title="pytest系列(5)–fixture详解"></a><a href="https://redrose2100.github.io/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(5)--fixture%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">pytest系列(5)–fixture详解</a></h3><h3 id="pytest系列-6-–skip和skipif详解"><a href="#pytest系列-6-–skip和skipif详解" class="headerlink" title="pytest系列(6)–skip和skipif详解"></a><a href="https://redrose2100.github.io/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(6)--skip%E5%92%8Cskipif%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">pytest系列(6)–skip和skipif详解</a></h3><h3 id="pytest系列-7-–parametrize参数化详解"><a href="#pytest系列-7-–parametrize参数化详解" class="headerlink" title="pytest系列(7)–parametrize参数化详解"></a><a href="https://redrose2100.github.io/blog/2020/08/10/pytest%E7%B3%BB%E5%88%97(7)--parametrize%E5%8F%82%E6%95%B0%E5%8C%96%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">pytest系列(7)–parametrize参数化详解</a></h3><h3 id="pytest系列-8-–repeat插件详解"><a href="#pytest系列-8-–repeat插件详解" class="headerlink" title="pytest系列(8)–repeat插件详解"></a><a href="https://redrose2100.github.io/blog/2020/08/10/pytest%E7%B3%BB%E5%88%97(8)--repeat%E6%8F%92%E4%BB%B6%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">pytest系列(8)–repeat插件详解</a></h3>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(8)--repeat插件详解</title>
      <link href="/blog/2020/08/10/pytest%E7%B3%BB%E5%88%97(8)--repeat%E6%8F%92%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/10/pytest%E7%B3%BB%E5%88%97(8)--repeat%E6%8F%92%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-安装pytest-repeat插件"><a href="#1-安装pytest-repeat插件" class="headerlink" title="1 安装pytest-repeat插件"></a>1 安装pytest-repeat插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pip install pytest-repeat</span><br><span class="line">Collecting pytest-repeat</span><br><span class="line">  Downloading pytest_repeat-0.8.0-py2.py3-none-any.whl (4.2 kB)</span><br><span class="line">Requirement already satisfied: pytest&gt;&#x3D;3.6 in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest-repeat) (5.4.3)</span><br><span class="line">Requirement already satisfied: colorama; sys_platform &#x3D;&#x3D; &quot;win32&quot; in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (0.4.3)</span><br><span class="line">Requirement already satisfied: pluggy&lt;1.0,&gt;&#x3D;0.12 in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (0.13.1)</span><br><span class="line">Requirement already satisfied: packaging in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (20.4)</span><br><span class="line">Requirement already satisfied: more-itertools&gt;&#x3D;4.0.0 in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (8.4.0)</span><br><span class="line">Requirement already satisfied: py&gt;&#x3D;1.5.0 in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (1.9.0)</span><br><span class="line">Requirement already satisfied: attrs&gt;&#x3D;17.4.0 in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (19.3.0)</span><br><span class="line">Requirement already satisfied: atomicwrites&gt;&#x3D;1.0; sys_platform &#x3D;&#x3D; &quot;win32&quot; in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (1.4.0)</span><br><span class="line">Requirement already satisfied: wcwidth in d:\miniconda\envs\pytestenv\lib\site-packages (from pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (0.2.5)</span><br><span class="line">Requirement already satisfied: pyparsing&gt;&#x3D;2.0.2 in d:\miniconda\envs\pytestenv\lib\site-packages (from packaging-&gt;pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (2.4.7)</span><br><span class="line">Requirement already satisfied: six in d:\miniconda\envs\pytestenv\lib\site-packages (from packaging-&gt;pytest&gt;&#x3D;3.6-&gt;pytest-repeat) (1.15.0)</span><br><span class="line">Installing collected packages: pytest-repeat</span><br><span class="line">Successfully installed pytest-repeat-0.8.0</span><br></pre></td></tr></table></figure><h4 id="2-使用-pytest-s-–count-3-命令可以重复执行-不管结果成功还是失败"><a href="#2-使用-pytest-s-–count-3-命令可以重复执行-不管结果成功还是失败" class="headerlink" title="2 使用 pytest -s –count=3 命令可以重复执行,不管结果成功还是失败"></a>2 使用 pytest -s –count=3 命令可以重复执行,不管结果成功还是失败</h4><p>test_example.py中编写如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def test_01():</span><br><span class="line">    assert 1&#x3D;&#x3D;1</span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    assert 1&#x3D;&#x3D;2</span><br></pre></td></tr></table></figure><p>重复执行的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s --count&#x3D;3</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ...FFF</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_____________________________________________________________________________ test_02[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">_____________________________________________________________________________ test_02[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">_____________________________________________________________________________ test_02[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_02[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_02[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_02[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 failed, 3 passed in 0.24s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="3-使用-pytest-s-–count-3-x-命令可以重复执行，直到失败位置，如果执行满三次了还没有失败，也不再继续了"><a href="#3-使用-pytest-s-–count-3-x-命令可以重复执行，直到失败位置，如果执行满三次了还没有失败，也不再继续了" class="headerlink" title="3 使用 pytest -s –count=3 -x 命令可以重复执行，直到失败位置，如果执行满三次了还没有失败，也不再继续了"></a>3 使用 pytest -s –count=3 -x 命令可以重复执行，直到失败位置，如果执行满三次了还没有失败，也不再继续了</h4><p>test_example.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def test_01():</span><br><span class="line">    assert 1&#x3D;&#x3D;1</span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    assert 1&#x3D;&#x3D;2</span><br></pre></td></tr></table></figure><p>使用如下命令执行：test_02因为第一次就失败了，所以不再继续执行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s --count&#x3D;3 -x</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s --count&#x3D;3 -x</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ...F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_____________________________________________________________________________ test_02[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:6: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_02[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 3 passed in 0.18s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="4-使用装饰器标记重复执行的次数"><a href="#4-使用装饰器标记重复执行的次数" class="headerlink" title="4 使用装饰器标记重复执行的次数"></a>4 使用装饰器标记重复执行的次数</h4><p>在test_example.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    assert 1&#x3D;&#x3D;1</span><br><span class="line"></span><br><span class="line">@pytest.mark.repeat(3)</span><br><span class="line">def test_02():</span><br><span class="line">    assert 1&#x3D;&#x3D;2</span><br></pre></td></tr></table></figure><p>此时执行只需要使用 pytest -s即可，运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 4 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .FFF</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_____________________________________________________________________________ test_02[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    @pytest.mark.repeat(3)</span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:8: AssertionError</span><br><span class="line">_____________________________________________________________________________ test_02[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    @pytest.mark.repeat(3)</span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:8: AssertionError</span><br><span class="line">_____________________________________________________________________________ test_02[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    @pytest.mark.repeat(3)</span><br><span class="line">    def test_02():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:8: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_02[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_02[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_02[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 failed, 1 passed in 0.19s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="5-重复执行类，只需要在类上加上装饰器即可"><a href="#5-重复执行类，只需要在类上加上装饰器即可" class="headerlink" title="5 重复执行类，只需要在类上加上装饰器即可"></a>5 重复执行类，只需要在类上加上装饰器即可</h4><p>test_example.py 中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.mark.repeat(3)</span><br><span class="line">class TestExample():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        assert 1&#x3D;&#x3D;1</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        assert 1&#x3D;&#x3D;2</span><br></pre></td></tr></table></figure><p>使用pytest -s执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ...FFF</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_______________________________________________________________________ TestExample.test_02[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x00000239A98BC370&gt;</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;3</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 3</span><br><span class="line"></span><br><span class="line">test_example.py:9: AssertionError</span><br><span class="line">_______________________________________________________________________ TestExample.test_02[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x00000239A98CB6D0&gt;</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;3</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 3</span><br><span class="line"></span><br><span class="line">test_example.py:9: AssertionError</span><br><span class="line">_______________________________________________________________________ TestExample.test_02[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x00000239A98CBAC0&gt;</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;3</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 3</span><br><span class="line"></span><br><span class="line">test_example.py:9: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::TestExample::test_02[1-3] - assert 1 &#x3D;&#x3D; 3</span><br><span class="line">FAILED test_example.py::TestExample::test_02[2-3] - assert 1 &#x3D;&#x3D; 3</span><br><span class="line">FAILED test_example.py::TestExample::test_02[3-3] - assert 1 &#x3D;&#x3D; 3</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 failed, 3 passed in 0.23s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="6-pytest-命令行可通过-–repeat-scope指定重复执行的单元，可选值有：session，module，class，function"><a href="#6-pytest-命令行可通过-–repeat-scope指定重复执行的单元，可选值有：session，module，class，function" class="headerlink" title="6 pytest 命令行可通过 –repeat-scope指定重复执行的单元，可选值有：session，module，class，function"></a>6 pytest 命令行可通过 –repeat-scope指定重复执行的单元，可选值有：session，module，class，function</h4><ul><li>(1) function（默认）范围针对每个用例重复执行，再执行下一个用例</li><li>(2) class 以class为用例集合单位，重复执行class里面的用例，再执行下一个</li><li>(3) module 以模块为单位，重复执行模块里面的用例，再执行下一个</li><li>(4) session 重复整个测试会话，即所有收集的测试执行一次，然后所有这些测试再次执行等等</li></ul><p>创建如下结构的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_demo</span><br><span class="line">    |----test_example.py</span><br><span class="line">    |----test_example_02.py</span><br></pre></td></tr></table></figure><p>在两个py文件中都编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_001():</span><br><span class="line">    assert 1&#x3D;&#x3D;1</span><br><span class="line"></span><br><span class="line">def test_002():</span><br><span class="line">    assert 1&#x3D;&#x3D;2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample():</span><br><span class="line">    def test_003(self):</span><br><span class="line">        assert 3&#x3D;&#x3D;3</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">        assert 3&#x3D;&#x3D;4</span><br></pre></td></tr></table></figure><p>pytest -s –count=3 –repeat-scope=function 运行的结果如下，每个函数都运行三次后在进行下一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s --count&#x3D;3 --repeat-scope&#x3D;function</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 24 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py ...FFF...FFF</span><br><span class="line">test_example_02.py ...FFF...FFF</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001DD9BD0E730&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001DD9BCFBDF0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001DD9BCFB460&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001DD9BD2E7C0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001DD9BD9F6A0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001DD9BD16DC0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 12 failed, 12 passed in 0.34s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>pytest -s –count=3 –repeat-scope=class 运行结果如下，以类为单位进行重复执行3此，然后执行下一个类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s --count&#x3D;3 --repeat-scope&#x3D;class</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 24 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py .F.F.F.F.F.F</span><br><span class="line">test_example_02.py .F.F.F.F.F.F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001DAE249AB50&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001DAE24B0430&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001DAE24B0FA0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001DAE24C30A0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001DAE24C3F70&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001DAE24BD1C0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 12 failed, 12 passed in 0.26s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>pytest -s –count=3 –repeat-scope=module运行结果如下：以模块为单位进行重复执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 24 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py .F.F.F.F.F.F</span><br><span class="line">test_example_02.py .F.F.F.F.F.F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001C76ED3D760&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001C76ED74D90&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001C76ED74D00&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001C76ED9D2E0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001C76ED7D850&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001C76ED9D9A0&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 12 failed, 12 passed in 0.28s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>pytest -s –count=3 –repeat-scope=session 运行结果如下，以整个测试过程为单位重复执行3此</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s --count&#x3D;3 --repeat-scope&#x3D;session</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0, repeat-0.8.0</span><br><span class="line">collected 24 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py .F.F</span><br><span class="line">test_example_02.py .F.F</span><br><span class="line">test_example.py .F.F</span><br><span class="line">test_example_02.py .F.F</span><br><span class="line">test_example.py .F.F</span><br><span class="line">test_example_02.py .F.F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x0000018975001730&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[1-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[1-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001897504FD60&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001897504F130&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[2-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[2-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x0000018975060100&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestExample object at 0x000001897505EC10&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example.py:15: AssertionError</span><br><span class="line">____________________________________________________________________________ test_002[3-3] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_002():</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example_02.py:7: AssertionError</span><br><span class="line">______________________________________________________________________ TestExample.test_004[3-3] _______________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example_02.TestExample object at 0x000001897505E670&gt;</span><br><span class="line"></span><br><span class="line">    def test_004(self):</span><br><span class="line">&gt;       assert 3&#x3D;&#x3D;4</span><br><span class="line">E       assert 3 &#x3D;&#x3D; 4</span><br><span class="line"></span><br><span class="line">test_example_02.py:15: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[1-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[1-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[2-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[2-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">FAILED test_example_02.py::test_002[3-3] - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">FAILED test_example_02.py::TestExample::test_004[3-3] - assert 3 &#x3D;&#x3D; 4</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 12 failed, 12 passed in 0.27s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(7)--parametrize参数化详解</title>
      <link href="/blog/2020/08/10/pytest%E7%B3%BB%E5%88%97(7)--parametrize%E5%8F%82%E6%95%B0%E5%8C%96%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/10/pytest%E7%B3%BB%E5%88%97(7)--parametrize%E5%8F%82%E6%95%B0%E5%8C%96%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-parametrize参数化实质上是DDT，即数据驱动测试，下面首先看下不用数据驱动的方式"><a href="#1-parametrize参数化实质上是DDT，即数据驱动测试，下面首先看下不用数据驱动的方式" class="headerlink" title="1 parametrize参数化实质上是DDT，即数据驱动测试，下面首先看下不用数据驱动的方式"></a>1 parametrize参数化实质上是DDT，即数据驱动测试，下面首先看下不用数据驱动的方式</h4><p>在test_example.py 文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def add(a,b):</span><br><span class="line">    return (a+b)</span><br><span class="line"></span><br><span class="line">def test_1():</span><br><span class="line">    assert add(3,5)&#x3D;&#x3D;8</span><br><span class="line"></span><br><span class="line">def test_2():</span><br><span class="line">    assert add(2,4)&#x3D;&#x3D;7</span><br><span class="line"></span><br><span class="line">def test_3():</span><br><span class="line">    assert add(5,7)&#x3D;&#x3D;12</span><br></pre></td></tr></table></figure><p>使用pytest -s 执行结果如下：两个通过，一个失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .F.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">________________________________________________________________________________ test_2 ________________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_2():</span><br><span class="line">&gt;       assert add(2,4)&#x3D;&#x3D;7</span><br><span class="line">E       assert 6 &#x3D;&#x3D; 7</span><br><span class="line">E        +  where 6 &#x3D; add(2, 4)</span><br><span class="line"></span><br><span class="line">test_example.py:11: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_2 - assert 6 &#x3D;&#x3D; 7</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 2 passed in 0.16s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="2-上述代码中，存在大量重复代码，实质每个测试用例的功能是一样的，只不过是每次的参数不一样，此时就使用数据驱动测试的方式，在pytest中即parametrize参数化"><a href="#2-上述代码中，存在大量重复代码，实质每个测试用例的功能是一样的，只不过是每次的参数不一样，此时就使用数据驱动测试的方式，在pytest中即parametrize参数化" class="headerlink" title="2 上述代码中，存在大量重复代码，实质每个测试用例的功能是一样的，只不过是每次的参数不一样，此时就使用数据驱动测试的方式，在pytest中即parametrize参数化"></a>2 上述代码中，存在大量重复代码，实质每个测试用例的功能是一样的，只不过是每次的参数不一样，此时就使用数据驱动测试的方式，在pytest中即parametrize参数化</h4><p>请看如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def add(a,b):</span><br><span class="line">    return (a+b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&quot;a,b,c&quot;,[(3,5,8),(2,4,7),(5,7,12)])</span><br><span class="line">def test_1(a,b,c):</span><br><span class="line">    assert add(a,b)&#x3D;&#x3D;c</span><br></pre></td></tr></table></figure><p>使用pytest -s执行结果如下：这里虽然只写了一个test函数，但是结果仍然显示三个用例，是因为参数化的时候填写了三个元组的数据，这就是参数化，其实叫数据驱动可能更好理解一些，这样可以节省大量的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .F.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_1[2-4-7] _____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">a &#x3D; 2, b &#x3D; 4, c &#x3D; 7</span><br><span class="line"></span><br><span class="line">    @pytest.mark.parametrize(&quot;a,b,c&quot;,[(3,5,8),(2,4,7),(5,7,12)])</span><br><span class="line">    def test_1(a,b,c):</span><br><span class="line">&gt;       assert add(a,b)&#x3D;&#x3D;c</span><br><span class="line">E       assert 6 &#x3D;&#x3D; 7</span><br><span class="line">E        +  where 6 &#x3D; add(2, 4)</span><br><span class="line"></span><br><span class="line">test_example.py:9: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_1[2-4-7] - assert 6 &#x3D;&#x3D; 7</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 2 passed in 0.16s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="3-参数化功能在参数需要组合所有情况的时候，只需要将参数化叠加起来即可"><a href="#3-参数化功能在参数需要组合所有情况的时候，只需要将参数化叠加起来即可" class="headerlink" title="3 参数化功能在参数需要组合所有情况的时候，只需要将参数化叠加起来即可"></a>3 参数化功能在参数需要组合所有情况的时候，只需要将参数化叠加起来即可</h4><p>请看如下代码：表示a可以取值2,4,6，而b可以取值1,3,5，而在执行测试用例的时候是将a，b全部可能的值组合起来的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&quot;a&quot;,[2,4,6])</span><br><span class="line">@pytest.mark.parametrize(&quot;b&quot;,[1,3,5])</span><br><span class="line">def test_1(a,b):</span><br><span class="line">    print(a,b)</span><br></pre></td></tr></table></figure><p>使用pytest -s执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 9 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py 2 1</span><br><span class="line">.4 1</span><br><span class="line">.6 1</span><br><span class="line">.2 3</span><br><span class="line">.4 3</span><br><span class="line">.6 3</span><br><span class="line">.2 5</span><br><span class="line">.4 5</span><br><span class="line">.6 5</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 9 passed in 0.07s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="4-当参数化应用在类上时，则此时类的所有测试方法都将使用参数化中的变量"><a href="#4-当参数化应用在类上时，则此时类的所有测试方法都将使用参数化中的变量" class="headerlink" title="4 当参数化应用在类上时，则此时类的所有测试方法都将使用参数化中的变量"></a>4 当参数化应用在类上时，则此时类的所有测试方法都将使用参数化中的变量</h4><p>如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&quot;a,b&quot;,[(1,2),(3,4),(5,6)])</span><br><span class="line">class TestExample(object):</span><br><span class="line">    </span><br><span class="line">    def test_01(self,a,b):</span><br><span class="line">        print(a,b)</span><br><span class="line">        </span><br><span class="line">    def test_02(self,a,b):</span><br><span class="line">        print(b,a)</span><br></pre></td></tr></table></figure><p>使用pytest -s执行结果如下，显示运行了6个用例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py 1 2</span><br><span class="line">.3 4</span><br><span class="line">.5 6</span><br><span class="line">.2 1</span><br><span class="line">.4 3</span><br><span class="line">.6 5</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="5-在使用参数化的过程中也可以使用标记，比如标记为fail或者skip"><a href="#5-在使用参数化的过程中也可以使用标记，比如标记为fail或者skip" class="headerlink" title="5 在使用参数化的过程中也可以使用标记，比如标记为fail或者skip"></a>5 在使用参数化的过程中也可以使用标记，比如标记为fail或者skip</h4><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.mark.parametrize(&quot;a,b&quot;,[(1,2),(3,4),pytest.param(5,6,marks&#x3D;pytest.mark.xfail),pytest.param(7,8,marks&#x3D;pytest.mark.skip)])</span><br><span class="line">class TestExample(object):</span><br><span class="line"></span><br><span class="line">    def test_01(self,a,b):</span><br><span class="line">        print(a,b)</span><br></pre></td></tr></table></figure><p>使用pytest -s执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 4 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py 1 2</span><br><span class="line">.3 4</span><br><span class="line">.5 6</span><br><span class="line">Xs</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed, 1 skipped, 1 xpassed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(6)--skip和skipif详解</title>
      <link href="/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(6)--skip%E5%92%8Cskipif%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(6)--skip%E5%92%8Cskipif%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-测试用例中函数级跳过"><a href="#1-测试用例中函数级跳过" class="headerlink" title="1 测试用例中函数级跳过"></a>1 测试用例中函数级跳过</h4><p>在函数上面加一个@pytest.mark.skip()装饰器即表示此函数所代表的测试用例不再执行，skip函数可以指定一个reason的参数，表示跳过此用例的原因，同样skipif函数则表示通过判断一定的条件，满足条件时则跳过此用例，skipif第二个参数同样是reason表示跳过的原因</p><p>在test_example.py编写如下代码，在类外和类中的函数分表增加skip和skipif装饰器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skip()</span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skip(reason&#x3D;&quot;功能暂时不支持&quot;)</span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;1,reason&#x3D;&quot;跳过，测试skipif的功能是否生效&quot;)</span><br><span class="line">def test_04():</span><br><span class="line">    print(&quot;in test_04&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;2,reason&#x3D;&quot;跳过，测试skipif的功能是否生效&quot;)</span><br><span class="line">def test_05():</span><br><span class="line">    print(&quot;in test_05&quot;)</span><br><span class="line"></span><br><span class="line">def test_06():</span><br><span class="line">    print(&quot;in test_06&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    @pytest.mark.skip()</span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample.test_02&quot;)</span><br><span class="line"></span><br><span class="line">    @pytest.mark.skip(reason&#x3D;&quot;功能暂时不支持&quot;)</span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;in TestExample.test_03&quot;)</span><br><span class="line"></span><br><span class="line">    @pytest.mark.skipif(1 &#x3D;&#x3D; 1, reason&#x3D;&quot;跳过，测试skipif的功能是否生效&quot;)</span><br><span class="line">    def test_04(self):</span><br><span class="line">        print(&quot;in TestExample.test_04&quot;)</span><br><span class="line"></span><br><span class="line">    @pytest.mark.skipif(1 &#x3D;&#x3D; 2, reason&#x3D;&quot;跳过，测试skipif的功能是否生效&quot;)</span><br><span class="line">    def test_05(self):</span><br><span class="line">        print(&quot;in TestExample.test_05&quot;)</span><br><span class="line"></span><br><span class="line">    def test_06(self):</span><br><span class="line">        print(&quot;in TestExample.test_06&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中terminal中执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下，和上述分析预期一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 12 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py in test_01</span><br><span class="line">.sssin test_05</span><br><span class="line">.in test_06</span><br><span class="line">.in TestExample.test_01</span><br><span class="line">.sssin TestExample.test_05</span><br><span class="line">.in TestExample.test_06</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed, 6 skipped in 0.07s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="2-测试用例中跳过测试类"><a href="#2-测试用例中跳过测试类" class="headerlink" title="2 测试用例中跳过测试类"></a>2 测试用例中跳过测试类</h4><p>跳过类中skip和skipif的用法不变，唯一改变的就是将skip或者skipif的装饰器放到要跳过的类的上面</p><p>在test_example.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample01():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skip(&quot;跳过测试类&quot;)</span><br><span class="line">class TestExample02():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample02.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample02.test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;1,reason&#x3D;&quot;跳过测试类&quot;)</span><br><span class="line">class TestExample03():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample03.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample03.test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;2,reason&#x3D;&quot;跳过测试类&quot;)</span><br><span class="line">class TestExample04():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample04.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample04.test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中terminal中执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下，和上述分析预期一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 10 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py in test_01</span><br><span class="line">.in test_02</span><br><span class="line">.in TestExample01.test_01</span><br><span class="line">.in TestExample01.test_02</span><br><span class="line">.ssssin TestExample04.test_01</span><br><span class="line">.in TestExample04.test_02</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed, 4 skipped in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="3-在测试用例中跳过测试模块"><a href="#3-在测试用例中跳过测试模块" class="headerlink" title="3 在测试用例中跳过测试模块"></a>3 在测试用例中跳过测试模块</h4><p>skip和skipif跳过模块和跳过类以及函数略有区别，跳过模块即跳过文件，很简单，只需要在当前文件中增加如下一行即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytestmark&#x3D;pytest.mark.skip(reason&#x3D;&quot;跳过模块&quot;)</span><br></pre></td></tr></table></figure><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ex_023</span><br><span class="line">   |----test_ex_01.py</span><br><span class="line">   |----test_ex_02.py</span><br><span class="line">   |----test_ex_03.py</span><br></pre></td></tr></table></figure><p>其中在test_ex_01.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample01():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br></pre></td></tr></table></figure><p>test_ex_02.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">pytestmark&#x3D;pytest.mark.skip(reason&#x3D;&quot;跳过模块&quot;)</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample01():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br></pre></td></tr></table></figure><p>test_ex03.py文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">pytestmark&#x3D;pytest.mark.skipif(1&#x3D;&#x3D;1,reason&#x3D;&quot;跳过模块&quot;)</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class TestExample01():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中的terminal中切入到ex_023目录下，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_023&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_023</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 12 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_ex_01.py in test_01</span><br><span class="line">.in test_02</span><br><span class="line">.in TestExample01.test_01</span><br><span class="line">.in TestExample01.test_02</span><br><span class="line">.</span><br><span class="line">test_ex_02.py ssss</span><br><span class="line">test_ex_03.py ssss</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 4 passed, 8 skipped in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="4-skip-skipif-嵌套使用"><a href="#4-skip-skipif-嵌套使用" class="headerlink" title="4 skip skipif 嵌套使用"></a>4 skip skipif 嵌套使用</h4><p>pytest 的skip/skipif在跳过模块，跳过类，跳过函数这个三个层级是可以嵌套使用的，嵌套使用的规则就是只要有一个是真，则执行跳过操作</p><p>在test_example.py编写如下在代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"># 因为1！&#x3D;2 ，所以这个跳过不会生效</span><br><span class="line">pytestmark&#x3D;pytest.mark.skipif(1&#x3D;&#x3D;2,reason&#x3D;&quot;跳过模块&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 因为没有skip生效，所以此用例会执行</span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line"># 因为这个函数层级的skiif中1&#x3D;&#x3D;1为真，所以skip会生效，即不会执行此用例</span><br><span class="line">@pytest.mark.skipif(1&#x3D;&#x3D;1,reason&#x3D;&quot;跳过test_02&quot;)</span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 此类没有类层级的skip</span><br><span class="line">class TestExample01():</span><br><span class="line">    # 因为函数层级的skip为真，会跳过</span><br><span class="line">    @pytest.mark.skipif(2&#x3D;&#x3D;2,reaon&#x3D;&quot;跳过test_01&quot;)</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample01.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample01.test_02&quot;)</span><br><span class="line"></span><br><span class="line">#因为类层级的skip会生效，所以这个类中的所有测试函数都不会执行</span><br><span class="line">@pytest.mark.skip(&quot;跳过TestExample02类&quot;)</span><br><span class="line">class TestExample02():</span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in TestExample02.test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in TestExample02.test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中的terminal中切入到test_example.py目录中，然后执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py in test_01</span><br><span class="line">.ssin TestExample01.test_02</span><br><span class="line">.ss</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed, 4 skipped in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(5)--fixture详解</title>
      <link href="/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(5)--fixture%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(5)--fixture%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-fixture功能一：fixture的函数名作为测试用例函数的一个参数，实际返回的是fixture的返回值，并不是函数本身"><a href="#1-fixture功能一：fixture的函数名作为测试用例函数的一个参数，实际返回的是fixture的返回值，并不是函数本身" class="headerlink" title="1 fixture功能一：fixture的函数名作为测试用例函数的一个参数，实际返回的是fixture的返回值，并不是函数本身"></a>1 fixture功能一：fixture的函数名作为测试用例函数的一个参数，实际返回的是fixture的返回值，并不是函数本身</h4><p>在test_example.py中编写如下代码,func函数被一个装饰器修饰为fixture方法，则在测试用例test_01和test_03中想使用func这个函数的返回值，则只需要将func函数名放入test_01和test_03,而测试用例test_02中并不想使用func的返回值，则测试用例test_02的入参中无需放入func函数名</p><p>如此以来，在测试用例test_01和test_03中就可以直接使用func的返回值了，而且在测试用例中，func这个函数名就代表的是func函数的返回值，比如这里在test_01和test_03中的func其实就是func函数中的返回的obj即一个字典</p><p>这里需要切记的是，在测试用例test_01和测试用例test_03中，func并不是指func这个函数，而是是func这个函数的返回值，这一点需要格外注意</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def func():</span><br><span class="line">    obj&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">    return obj</span><br><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;\nin test_01&quot;)</span><br><span class="line">    for key,value in func.items():</span><br><span class="line">        print(key,value)</span><br><span class="line">        </span><br><span class="line">def test_02():</span><br><span class="line">    pritn(&quot;in test_02&quot;)</span><br><span class="line">    </span><br><span class="line">def test_03(func):</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br><span class="line">    print(type(func))</span><br></pre></td></tr></table></figure><p>运行结果如下：结果与上述分析一致，在test_01和test_03中，func的值就是func函数的返回值obj，即字典，而在test_02中，因为测试用例中的函数中没有将func加入到参数列表中，所以不会感知到func的存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in test_01</span><br><span class="line">a 1</span><br><span class="line">b 2</span><br><span class="line">c 3</span><br><span class="line">.in test_02</span><br><span class="line">.in test_03</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.31s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="2-fixture-功能之二：提供灵活的类似setup与teardown的功能"><a href="#2-fixture-功能之二：提供灵活的类似setup与teardown的功能" class="headerlink" title="2 fixture 功能之二：提供灵活的类似setup与teardown的功能"></a>2 fixture 功能之二：提供灵活的类似setup与teardown的功能</h4><p>pytest的fixture另一个强大的功能就是在函数执行前后增加操作，类似setup和teardown操作，但是比setup和teardown的操作更加灵活</p><p>具体使用方式是同样定义一个函数，然后用装饰器标记为fixture，然后在此函数中使用一个yield语句，yield语句之前的就会在测试用例之前使用，yield之后的语句就会在测试用例执行完成之后再执行</p><p>在test_example.py文件中编写如下代码，实现一个fixture函数func，这里面有一个yield语句，它上面的都会在测试用例执行之前执行，它下面的会在测试用例执行之后执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;run before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;run after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line">    </span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line">    </span><br><span class="line">def test_03(func):</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br></pre></td></tr></table></figure><p>运行结果如下：运行结果与分析一致，其中test_02这个测试用例的入参中没有设置func的参数，所以不会调用func的fixture功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py run before testcase......</span><br><span class="line">in test_01</span><br><span class="line">.run after testcase......</span><br><span class="line">in test_02</span><br><span class="line">.run before testcase......</span><br><span class="line">in test_03</span><br><span class="line">.run after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="3-fixture-作用范围之function"><a href="#3-fixture-作用范围之function" class="headerlink" title="3 fixture 作用范围之function"></a>3 fixture 作用范围之function</h4><p>在定义fuxture函数的时候，可以使用scope来定义fixture作用的范围，如果不指定，则默认为函数级，即与scope=“function”是一样</p><p>定义为function级别，则只要在测试用例的参数中使用了fixture函数名，则就会在测试用例的之前和之后执行fixture对应的操作</p><p>在test_example.py中编写如下代码，即定义了两个fixture，func1为未明确指定scope的范围，func2指定了scope的值为function，在类外定义了三个测试用例，其中test_03为使用fixture，在测试类中也定义了三个测试用例方法，test_03也未应用fixture</p><p>当fixture的scope未指定或指定为function时，不管是类外的测试用例还是测试类中的测试用例方法，只要在测试用例方法的参数中指定了fixture，则都会在每个测试用例之前和之后执行fixture定义的对应的操作</p><p>test_example.py中代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture()</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;\nin func1 before testcase.......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in func1 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func2():</span><br><span class="line">    print(&quot;\nin func2 before testcase.......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in func2 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_01(func1):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func2):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func1):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func2):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中切换至test_example.py的目录中，然后执行如下命令：</p><p>pytest -s 运行结果如下，与上述分析结论一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in func1 before testcase.......</span><br><span class="line">in outer class test_01</span><br><span class="line">.in func1 after testcase......</span><br><span class="line"></span><br><span class="line">in func2 before testcase.......</span><br><span class="line">in outer class test_02</span><br><span class="line">.in func2 after testcase......</span><br><span class="line"></span><br><span class="line">in outer class test_03</span><br><span class="line">.</span><br><span class="line">in func1 before testcase.......</span><br><span class="line">in inner class test_01</span><br><span class="line">.in func1 after testcase......</span><br><span class="line"></span><br><span class="line">in func2 before testcase.......</span><br><span class="line">in inner class test_02</span><br><span class="line">.in func2 after testcase......</span><br><span class="line"></span><br><span class="line">in inner class test_03</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="4-fixture-作用范围之class"><a href="#4-fixture-作用范围之class" class="headerlink" title="4 fixture 作用范围之class"></a>4 fixture 作用范围之class</h4><p>fixture的scope值还可以是class，此时则fixture定义的动作就会在测试类class的所有用例之前和之后运行，这里需要注意两点</p><ul><li>测试类中只要有一个测试用例的参数中使用了class级别的fixture，则在整个测试类的所有测试用例之前都会去执行fixture定义的动作，以及此测试类的所有用例结束后同样要运行fixture指定的动作</li><li>如果在类外的函数中去使用class级别的fixture，则此时在测试类外每个测试用例中，fixture跟上一节讲的function级别的fixture作用是一致的，即在类外的函数中弱引用了fixture，则在此函数之前和之后同样去执行fixture定义的对应的操作</li></ul><p>在test_example.py文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;class&quot;)</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;\nin fixture before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中切换至test_example.py的目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in fixture before testcase......</span><br><span class="line">in outer class test_01</span><br><span class="line">.in fixture after testcase......</span><br><span class="line"></span><br><span class="line">in fixture before testcase......</span><br><span class="line">in outer class test_02</span><br><span class="line">.in fixture after testcase......</span><br><span class="line"></span><br><span class="line">in outer class test_03</span><br><span class="line">.</span><br><span class="line">in fixture before testcase......</span><br><span class="line">in inner class test_01</span><br><span class="line">.in inner class test_02</span><br><span class="line">.</span><br><span class="line">in inner class test_03</span><br><span class="line">.in fixture after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.07s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="5-fixture-作用范围之module"><a href="#5-fixture-作用范围之module" class="headerlink" title="5 fixture 作用范围之module"></a>5 fixture 作用范围之module</h4><p>在python中module即文件，所有fixture定义为module时，顾名思义，此fixture将在当前文件中去起作用</p><p>这里需要特别说明的是，当fixture的scope定义为module时，只要当前文件中有一个测试用例使用了fixture，不管这个用例是在类外，还是在类中，都会在当前文件（模块）的所有测试用例执行之前去执行fixture定义的行为以及当前文件的所有用例结束之后同样去执行fixture定义的对应操作</p><p>test_example.py文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;module&quot;)</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;\nin fixture before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中的termin中切换至test_example.py目录下，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in fixture before testcase......</span><br><span class="line">in outer class test_01</span><br><span class="line">.in outer class test_02</span><br><span class="line">.</span><br><span class="line">in outer class test_03</span><br><span class="line">.in inner class test_01</span><br><span class="line">.in inner class test_02</span><br><span class="line">.</span><br><span class="line">in inner class test_03</span><br><span class="line">.in fixture after testcase......</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.07s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="6-fixture-作用范围之session"><a href="#6-fixture-作用范围之session" class="headerlink" title="6 fixture 作用范围之session"></a>6 fixture 作用范围之session</h4><p>当fixture的scope定义为session时，是指在当前目录下的所有用例之前和之后执行fixture对应的操作</p><p>使用方式是在指定目录下创建conftest.py文件，然后在conftest.py文件中定义fixture方法，病将scope指定为session，此时在当前目录下只要有一个用例使用了此fixture，则就会在当前目录下所有用例之前和之后会执行fixture定义的对应的操作</p><p>创建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_demo</span><br><span class="line">   |----conftest.py</span><br><span class="line">   |----test_example.py</span><br><span class="line">   |----test_example2.py</span><br></pre></td></tr></table></figure><p>其中在conftest.py中定义fixture，并且指定scope为session，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;session&quot;)</span><br><span class="line">def func():</span><br><span class="line">    print(&quot;\nin session fixuture before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in session fixture after testcase......&quot;)</span><br></pre></td></tr></table></figure><p>在test_example.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>在test_example2.py编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def test_01(func):</span><br><span class="line">    print(&quot;in outer class test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func):</span><br><span class="line">    print(&quot;in outer class test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;\nin outer class test_03&quot;)</span><br><span class="line"></span><br><span class="line">class TestExample:</span><br><span class="line"></span><br><span class="line">    def test_01(self,func):</span><br><span class="line">        print(&quot;in inner class test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self,func):</span><br><span class="line">        print(&quot;in inner class test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;\nin inner class test_03&quot;)</span><br></pre></td></tr></table></figure><p>载pycharm中的terminal中切换至test_demo目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示，与上述分析结果一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 12 items                                                                                                                                                      </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in session fixuture before testcase......</span><br><span class="line">in outer class test_01</span><br><span class="line">.in outer class test_02</span><br><span class="line">.</span><br><span class="line">in outer class test_03</span><br><span class="line">.in inner class test_01</span><br><span class="line">.in inner class test_02</span><br><span class="line">.</span><br><span class="line">in inner class test_03</span><br><span class="line">.</span><br><span class="line">test_example2.py in outer class test_01</span><br><span class="line">.in outer class test_02</span><br><span class="line">.</span><br><span class="line">in outer class test_03</span><br><span class="line">.in inner class test_01</span><br><span class="line">.in inner class test_02</span><br><span class="line">.</span><br><span class="line">in inner class test_03</span><br><span class="line">.in session fixture after testcase......</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 12 passed in 0.10s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="7-fixture-调用方式之参数传入"><a href="#7-fixture-调用方式之参数传入" class="headerlink" title="7 fixture 调用方式之参数传入"></a>7 fixture 调用方式之参数传入</h4><p>fixture的第一种调用方式就是作为参数传入，在测试用例中按照参数位置的先后顺序执行</p><p>在test_example.py找那个编写如下代码：test_01中通过参数传入的方式调用一个fixture，而test_02则通过参数传递的方式调用两个fixture，这两个fixture的调用顺序跟参数的位置一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;in fixture func1 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func1 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func2():</span><br><span class="line">    print(&quot;in fixture func2 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func2 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_01(func1):</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02(func1,func2):</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中进入到test_example.py的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 2 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py in fixture func1 before testcase......</span><br><span class="line">in test_01</span><br><span class="line">.in fixture func1 after testcase......</span><br><span class="line">in fixture func1 before testcase......</span><br><span class="line">in fixture func2 before testcase......</span><br><span class="line">in test_02</span><br><span class="line">.in fixture func2 after testcase......</span><br><span class="line">in fixture func1 after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="8-fixture-调用方式之pytest-mark-usefixtures"><a href="#8-fixture-调用方式之pytest-mark-usefixtures" class="headerlink" title="8 fixture 调用方式之pytest.mark.usefixtures"></a>8 fixture 调用方式之pytest.mark.usefixtures</h4><p>fixture的第二种调用方式就是使用@pytest.mark.usefixtures的方式，如果有叠加调用，则先执行的需要放到下面</p><p>在test_example.py文件中编写如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func1():</span><br><span class="line">    print(&quot;in fixture func1 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func1 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;)</span><br><span class="line">def func2():</span><br><span class="line">    print(&quot;in fixture func2 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func2 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.mark.usefixtures(&quot;func1&quot;)</span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.usefixtures(&quot;func2&quot;)</span><br><span class="line">@pytest.mark.usefixtures(&quot;func1&quot;)</span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的termin中切入到test_example.py的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示，与上述分析结果一致：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 2 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py in fixture func1 before testcase......</span><br><span class="line">in test_01</span><br><span class="line">.in fixture func1 after testcase......</span><br><span class="line">in fixture func1 before testcase......</span><br><span class="line">in fixture func2 before testcase......</span><br><span class="line">in test_02</span><br><span class="line">.in fixture func2 after testcase......</span><br><span class="line">in fixture func1 after testcase......</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 2 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="9-fixture-调用方式之autouse-true"><a href="#9-fixture-调用方式之autouse-true" class="headerlink" title="9 fixture 调用方式之autouse-true"></a>9 fixture 调用方式之autouse-true</h4><p>如果所有的用例都需要执行的fixture，就没有必要再所有用例中通过传参的方式或者标记的方式，pytest的fixture提供了一种更为简洁的用例，即在定义fixture的时候，将参数autouse设置为True时，则在执行用例的时候自动去加载，无需显示调用</p><p>在文件test_example.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@pytest.fixture(scope&#x3D;&quot;function&quot;,autouse&#x3D;True)</span><br><span class="line">def func3():</span><br><span class="line">    print(&quot;in fixture func3 before testcase......&quot;)</span><br><span class="line">    yield</span><br><span class="line">    print(&quot;in fixture func3 after testcase......&quot;)</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的termin中切换至test_example.py的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下，可以发现在三个测试用例中并未显示调用fixture，但是仍然执行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py in fixture func3 before testcase......</span><br><span class="line">in test_01</span><br><span class="line">.in fixture func3 after testcase......</span><br><span class="line">in fixture func3 before testcase......</span><br><span class="line">in test_02</span><br><span class="line">.in fixture func3 after testcase......</span><br><span class="line">in fixture func3 before testcase......</span><br><span class="line">in test_03</span><br><span class="line">.in fixture func3 after testcase......</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(4)--setup与teardown</title>
      <link href="/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(4)--setup%E4%B8%8Eteardown/"/>
      <url>/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(4)--setup%E4%B8%8Eteardown/</url>
      
        <content type="html"><![CDATA[<h4 id="1-测试类中的setup与teardown"><a href="#1-测试类中的setup与teardown" class="headerlink" title="1 测试类中的setup与teardown"></a>1 测试类中的setup与teardown</h4><p>测试类中的setup与teardown共有三类：</p><ul><li>setup_class 和 teardown_class 在类的所有用例之前和之后执行</li><li>setup_method 和 teardown_method 在类中每个用例之前和之后执行</li><li>setup 和 teardown 也是在类中的每个用例之前和之后执行，但是setup在setup_method之后执行，teardown在teardown_methond之前执行</li></ul><p>在test_example.py中编写如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class TestExample():</span><br><span class="line"></span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;\nin setup_class&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line"></span><br><span class="line">    def setup_method(self):</span><br><span class="line">        print(&quot;in setup_method&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_method(self):</span><br><span class="line">        print(&quot;in teardown_method&quot;)</span><br><span class="line"></span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in setup&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;teardown&quot;)</span><br><span class="line"></span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;in test_03&quot;)</span><br></pre></td></tr></table></figure><p>使用pytest -s 执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in setup_class</span><br><span class="line">in setup_method</span><br><span class="line">in setup</span><br><span class="line">in test_01</span><br><span class="line">.teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in setup</span><br><span class="line">in test_02</span><br><span class="line">.teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in setup</span><br><span class="line">in test_03</span><br><span class="line">.teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in teardown_class</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="2-测试类之外的setup和teardown"><a href="#2-测试类之外的setup和teardown" class="headerlink" title="2 测试类之外的setup和teardown"></a>2 测试类之外的setup和teardown</h4><p>测试类外的setup和teardown有两类：</p><ul><li>setup_function 和 teardown_function 在类外的每个用例之前和之后执行</li><li>setup 和 teardown 在类外的每个测试用例之前和之后执行，其中setup在setup_function之后执行，teardown在teardown_function之前执行</li></ul><p>test_example.py文件中编写如下测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def setup_function():</span><br><span class="line">    print(&quot;\nin setup_function&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown_function():</span><br><span class="line">    print(&quot;in teardown_function&quot;)</span><br><span class="line">    </span><br><span class="line">def setup():</span><br><span class="line">    print(&quot;in setup&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown():</span><br><span class="line">    print(&quot;in teardown&quot;)</span><br><span class="line">    </span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line">    </span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line">    </span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br></pre></td></tr></table></figure><p>使用 pytest -s 执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in setup_function</span><br><span class="line">in setup</span><br><span class="line">in test_01</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_function</span><br><span class="line"></span><br><span class="line">in setup_function</span><br><span class="line">in setup</span><br><span class="line">in test_02</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_function</span><br><span class="line"></span><br><span class="line">in setup_function</span><br><span class="line">in setup</span><br><span class="line">in test_03</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_function</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="3-测试模块中的setup和teardown"><a href="#3-测试模块中的setup和teardown" class="headerlink" title="3 测试模块中的setup和teardown"></a>3 测试模块中的setup和teardown</h4><p>测试模块的setup和teardown只有一种，即：setup_module和teardown_module，在模块即文件中的所有测试用例包括测试类中和测试类外的之前和之后运行一次</p><p>在test_example.py文件中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">def setup_module():</span><br><span class="line">    print(&quot;\nin setup_module&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown_module():</span><br><span class="line">    print(&quot;in teardown_module&quot;)</span><br><span class="line">    </span><br><span class="line">def setup_function():</span><br><span class="line">    print(&quot;in setup_function&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown_function():</span><br><span class="line">    print(&quot;in teardown_function&quot;)</span><br><span class="line">    </span><br><span class="line">def setup():</span><br><span class="line">    print(&quot;in class outer setup&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown():</span><br><span class="line">    print(&quot;in class outer teardown&quot;)</span><br><span class="line">    </span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in class outer test_01&quot;)</span><br><span class="line">    </span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in class outer test_02&quot;)</span><br><span class="line">    </span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in class outer test_03&quot;)</span><br><span class="line">    </span><br><span class="line">class TestExample():</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;in setup_class&quot;)</span><br><span class="line">        </span><br><span class="line">    def testdown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line">        </span><br><span class="line">    def setup_method(self):</span><br><span class="line">        print(&quot;in setup_method&quot;)</span><br><span class="line">        </span><br><span class="line">    def teardown_method(self):</span><br><span class="line">        print(&quot;in teardown_method&quot;)</span><br><span class="line">        </span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in class inner setup&quot;)</span><br><span class="line">        </span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;in class inner teardown&quot;)</span><br><span class="line">    </span><br><span class="line">    def test_01(self):</span><br><span class="line">        print(&quot;in class inner test_01&quot;)</span><br><span class="line">        </span><br><span class="line">    def test_02(self):</span><br><span class="line">        print(&quot;in class inner test_02&quot;)</span><br><span class="line">    </span><br><span class="line">    def test_03(self):</span><br><span class="line">        print(&quot;in class inner test_03&quot;)</span><br></pre></td></tr></table></figure><p>使用pytest -s 执行的结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 7 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in setup_module</span><br><span class="line">in setup_function</span><br><span class="line">in class outer setup</span><br><span class="line">in class outer test_01</span><br><span class="line">.in class outer teardown</span><br><span class="line">in teardown_function</span><br><span class="line">in setup_function</span><br><span class="line">in class outer setup</span><br><span class="line">in class outer test_02</span><br><span class="line">.in class outer teardown</span><br><span class="line">in teardown_function</span><br><span class="line">in setup_function</span><br><span class="line">in class outer setup</span><br><span class="line">in class outer test_03</span><br><span class="line">.in class outer teardown</span><br><span class="line">in teardown_function</span><br><span class="line">in setup_class</span><br><span class="line">in setup_method</span><br><span class="line">in class inner setup</span><br><span class="line">in teardown_class</span><br><span class="line">.in class inner teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in class inner setup</span><br><span class="line">in class inner test_01</span><br><span class="line">.in class inner teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in class inner setup</span><br><span class="line">in class inner test_02</span><br><span class="line">.in class inner teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in setup_method</span><br><span class="line">in class inner setup</span><br><span class="line">in class inner test_03</span><br><span class="line">.in class inner teardown</span><br><span class="line">in teardown_method</span><br><span class="line">in teardown_module</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 7 passed in 0.05s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(3)--断言的使用</title>
      <link href="/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(3)--%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(3)--%E6%96%AD%E8%A8%80%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-pytest-断言使用的python的标准的assert，断言条件其实就是python基础语法中判断一个值或者表达式的结果是否为真的情况，在断言之后还可以加上断言的内容描述"><a href="#1-pytest-断言使用的python的标准的assert，断言条件其实就是python基础语法中判断一个值或者表达式的结果是否为真的情况，在断言之后还可以加上断言的内容描述" class="headerlink" title="1 pytest 断言使用的python的标准的assert，断言条件其实就是python基础语法中判断一个值或者表达式的结果是否为真的情况，在断言之后还可以加上断言的内容描述"></a>1 pytest 断言使用的python的标准的assert，断言条件其实就是python基础语法中判断一个值或者表达式的结果是否为真的情况，在断言之后还可以加上断言的内容描述</h4><p>在test_example.py文件中编写如下测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def test_assert_01():</span><br><span class="line">    assert 1 &#x3D;&#x3D; 1, &quot;1应该等于1&quot;</span><br><span class="line"></span><br><span class="line">def test_assert_02():</span><br><span class="line">    assert isinstance(10,int), &quot;10应该是整形&quot;</span><br><span class="line"></span><br><span class="line">def test_assert_03():</span><br><span class="line">    assert &quot;&quot; ,&quot;空字符串应该是true&quot;</span><br></pre></td></tr></table></figure><p>在pycharm中的terminal首先切入到test_example.py的目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示：test_assert_03明显断言是错误的，所以这个用例会失败，另外两个则是成功的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ..F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_assert_03 ____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_assert_03():</span><br><span class="line">&gt;       assert &quot;&quot; ,&quot;空字符串应该是true&quot;</span><br><span class="line">E       AssertionError: 空字符串应该是true</span><br><span class="line">E       assert &#39;&#39;</span><br><span class="line"></span><br><span class="line">test_example.py:8: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_assert_03 - AssertionError: 空字符串应该是true</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 2 passed in 0.17s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="2-raises-可以帮助断言指定代码抛出指定的异常，如果和断言一致，则用例通过，否则则失败"><a href="#2-raises-可以帮助断言指定代码抛出指定的异常，如果和断言一致，则用例通过，否则则失败" class="headerlink" title="2 raises 可以帮助断言指定代码抛出指定的异常，如果和断言一致，则用例通过，否则则失败"></a>2 raises 可以帮助断言指定代码抛出指定的异常，如果和断言一致，则用例通过，否则则失败</h4><p>断言异常的方式是使用with pytest.raises(Exception类型)的格式</p><p>建立文件结构如下：<br>在test_example.py文件中编写如下代码，首先编写一个被测函数function，函数功能是返回两个数的除法的商，然后写了两个测试用例，每个都传入两个数，其中除数是0，一个用例判断会抛出ZeroDivisionError异常，另一个断言会抛出ValueError异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def function(a,b):</span><br><span class="line">    return a&#x2F;b</span><br><span class="line"></span><br><span class="line">def test_function():</span><br><span class="line">    with pytest.raises(ZeroDivisionError):</span><br><span class="line">        function(100,0)</span><br><span class="line"></span><br><span class="line">def test_function2():</span><br><span class="line">    with pytest.raises(ValueError):</span><br><span class="line">        function(100,0)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal窗口中进入到test_example.py的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下：和预期结果一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 2 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .F</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">____________________________________________________________________________ test_function2 ____________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_function2():</span><br><span class="line">        with pytest.raises(ValueError):</span><br><span class="line">&gt;           function(100,0)</span><br><span class="line"></span><br><span class="line">test_example.py:12:</span><br><span class="line">_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _</span><br><span class="line"></span><br><span class="line">a &#x3D; 100, b &#x3D; 0</span><br><span class="line"></span><br><span class="line">    def function(a,b):</span><br><span class="line">&gt;       return a&#x2F;b</span><br><span class="line">E       ZeroDivisionError: division by zero</span><br><span class="line"></span><br><span class="line">test_example.py:4: ZeroDivisionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_function2 - ZeroDivisionError: division by zero</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 1 passed in 0.16s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(2)--测试用例的组织及运行</title>
      <link href="/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(2)--%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%BB%84%E7%BB%87%E5%8F%8A%E8%BF%90%E8%A1%8C/"/>
      <url>/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(2)--%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E7%9A%84%E7%BB%84%E7%BB%87%E5%8F%8A%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h4 id="1-pytest-测试用例自动发现原则"><a href="#1-pytest-测试用例自动发现原则" class="headerlink" title="1 pytest 测试用例自动发现原则"></a>1 pytest 测试用例自动发现原则</h4><ul><li>(1) 如果pytest 命令指定了目录参数，则从指定目录查找</li><li>(2) 如果pytest 命令没有通过参数形式指定目录，则从当前目录下查找是否有pytest.ini文件，如果有则从文件中查找 testpaths的值作为查找目录</li><li>(3) 如果在当前目录下没有找到pytest.ini文件，或者pytest.ini文件中没有配置testpaths值，则从当前目录递归查找</li><li>(4) 查找文件要求是test_*.py 或者 *_test.py </li><li>(5) 在文件中类的外面查找test开头的函数</li><li>(6) 在没有定义<strong>init</strong>方法的并且以Test开头的类中查找test开头的函数</li></ul><p>新建如下文件结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ex_003</span><br><span class="line">   |----ex_03_test.py</span><br><span class="line">   |----ex_04test.py</span><br><span class="line">   |----test_ex_01.py</span><br><span class="line">   |----testex_02.py</span><br></pre></td></tr></table></figure><p>每个文件中都编写如下相同的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 符合条件，文件中类外，test开头的函数</span><br><span class="line">def test_function1():</span><br><span class="line">    print(&quot;in test_function1&quot;)</span><br><span class="line">    </span><br><span class="line"># 符合条件，文件中类外，test开头的函数</span><br><span class="line">def testfunction2():</span><br><span class="line">    print(&quot;in testfunction2&quot;)</span><br><span class="line">    </span><br><span class="line"># 不符合条件，文件中类外，非test开头的函数</span><br><span class="line">def function3_test():</span><br><span class="line">    print(&quot;in function3_test&quot;)</span><br><span class="line">    </span><br><span class="line"># 不符合条件，文件中类外，非test开头的函数</span><br><span class="line">def function4test():</span><br><span class="line">    print(&quot;in function4test&quot;)</span><br><span class="line">    </span><br><span class="line"># 符合条件的类，类命名以Test开头，并且没有__init__.py文件</span><br><span class="line">class TestClass1():</span><br><span class="line">    </span><br><span class="line">    # 符合条件，类中以test开头的函数</span><br><span class="line">    def test_function1(self):</span><br><span class="line">        print(&quot;in TestClass1.test_function1&quot;)</span><br><span class="line"></span><br><span class="line">    # 符合条件，类中以test开头的函数</span><br><span class="line">    def testfunction2(self):</span><br><span class="line">        print(&quot;in TestClass1.testfunction2&quot;)</span><br><span class="line"></span><br><span class="line">    # 不符合条件，类中非以test开头的函数</span><br><span class="line">    def function3_test(self):</span><br><span class="line">        print(&quot;in TestClass1.function3_test&quot;)</span><br><span class="line"></span><br><span class="line">    # 不符合条件，类中非以test开头的函数</span><br><span class="line">    def function4test(self):</span><br><span class="line">        print(&quot;in TestClass1.function4test&quot;)</span><br><span class="line">       </span><br><span class="line"># 不符合条件的类，类命名虽然以Test开头，但是有__init__.py文件，此类中所有函数不会被pytest发现</span><br><span class="line">class TestClass2():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">    def test_function1(self):</span><br><span class="line">        print(&quot;in TestClass2.test_function1&quot;)</span><br><span class="line"></span><br><span class="line">    def testfunction2(self):</span><br><span class="line">        print(&quot;in TestClass2.testfunction2&quot;)</span><br><span class="line"></span><br><span class="line">    def function3_test(self):</span><br><span class="line">        print(&quot;in TestClass2.function3_test&quot;)</span><br><span class="line"></span><br><span class="line">    def function4test(self):</span><br><span class="line">        print(&quot;in TestClass2.function4test&quot;)</span><br><span class="line">        </span><br><span class="line"># 不符合条件的类，类命名非以Test开头，此类中所有测试函数不会被pytest发现</span><br><span class="line">class Class3Test():</span><br><span class="line"></span><br><span class="line">    def test_function1(self):</span><br><span class="line">        print(&quot;in Class3Test.test_function1&quot;)</span><br><span class="line"></span><br><span class="line">    def testfunction2(self):</span><br><span class="line">        print(&quot;in Class3Test.testfunction2&quot;)</span><br><span class="line"></span><br><span class="line">    def function3_test(self):</span><br><span class="line">        print(&quot;in Class3Test.function3_test&quot;)</span><br><span class="line"></span><br><span class="line">    def function4test(self):</span><br><span class="line">        print(&quot;in Class3Test.function4test&quot;)</span><br></pre></td></tr></table></figure><p>首先上述文件中通过与标准测试发现规则对比可以很容易的分析出只有 ex_03_test.py和test_ex_01.py符合文件命名规则要求，其他两个文件中的测试函数或者测试类不会被pytest发现</p><p>每个文件中的代码分析见代码中的每个函数或者类上面的分析</p><p>下面在pycharm的terminal中首先进入到ex_003的目录，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_003&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\ex_003</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 8 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">ex_03_test.py in test_function1</span><br><span class="line">.in testfunction2</span><br><span class="line">.in TestClass1.test_function1</span><br><span class="line">.in TestClass1.testfunction2</span><br><span class="line">.</span><br><span class="line">test_ex_01.py in test_function1</span><br><span class="line">.in testfunction2</span><br><span class="line">.in TestClass1.test_function1</span><br><span class="line">.in TestClass1.testfunction2</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; warnings summary &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">ex_03_test.py:38</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\ex_003\ex_03_test.py:38: PytestCollectionWarning: cannot collect test class &#39;TestClass2&#39; because it has a __init__</span><br><span class="line"> constructor (from: ex_03_test.py)</span><br><span class="line">    class TestClass2():</span><br><span class="line"></span><br><span class="line">test_ex_01.py:44</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\ex_003\test_ex_01.py:44: PytestCollectionWarning: cannot collect test class &#39;TestClass2&#39; because it has a __init__</span><br><span class="line"> constructor (from: test_ex_01.py)</span><br><span class="line">    class TestClass2():</span><br><span class="line"></span><br><span class="line">-- Docs: https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;warnings.html</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 8 passed, 2 warnings in 0.16s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\ex_003&gt;</span><br></pre></td></tr></table></figure><h4 id="2-pytest-在python文件中的用例组织形式"><a href="#2-pytest-在python文件中的用例组织形式" class="headerlink" title="2 pytest 在python文件中的用例组织形式"></a>2 pytest 在python文件中的用例组织形式</h4><p>主要组成部分有setup，teardown 和各个用例，每个用例的方法名必须以test开头，在每个用例执行之前会去执行setup初始化配置，每个用例执行完成之后都会去执行teardown清理配置</p><p>在test_example.py文件中编写如下测试代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def setup():</span><br><span class="line">    print(&quot;in setup&quot;)</span><br><span class="line">    </span><br><span class="line">def teardown():</span><br><span class="line">    print(&quot;in teardown&quot;)</span><br><span class="line">    </span><br><span class="line">def test_func1():</span><br><span class="line">    print(&quot;in test_func1&quot;)</span><br><span class="line">    </span><br><span class="line">def test_func2():</span><br><span class="line">    print(&quot;in test_func2&quot;)</span><br><span class="line">    </span><br><span class="line">def test_func3():</span><br><span class="line">    print(&quot;in test_func3&quot;)</span><br></pre></td></tr></table></figure><p>然后在pycharm的terminal中首先切换到test_example.py的目录中，然后执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下所示，即每个测试用例在执行之前首先执行setup操作，每个用例执行完成之后都执行了teardown操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py in setup</span><br><span class="line">in test_func1</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func2</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func3</span><br><span class="line">.in teardown</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.08s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="3-使用类组织测试用例"><a href="#3-使用类组织测试用例" class="headerlink" title="3 使用类组织测试用例"></a>3 使用类组织测试用例</h4><p>使用文件组织用例的时候，如果想在所有用例之前只执行一次初始化操作，而当所有用例执行完成之后再进行公共的清理配置操作，在文件组织用例的形式下是做不到的，这个时候就需要使用测试类来组织用例</p><p>在使用类组织用例的时候，类名必须是Test开头，类不能有初始化函数<strong>init</strong>，类中的测试用例名称同样必须test开头，此外，类中可以有setup和teardown，setup是在类中每个用例执行之前执行，teardown是在每个用例执行结束之后执行</p><p>除此以外，类中还有setup_class和teardown_class，setup_class是在类的所有用例执行前执行一次，待所有用例执行结束之后，再执行testdown_class方法</p><p>在test_example.py文件中编写如下测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class TestFunction(object):</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;\nin setup_class&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line"></span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in setup&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;in teardown&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func1(self):</span><br><span class="line">        print(&quot;in test_func1&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func3(self):</span><br><span class="line">        print(&quot;in test_func3&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm的terminal中切换至ex_006的目录中，然后执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in setup_class</span><br><span class="line">in setup</span><br><span class="line">in test_func1</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func2</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func3</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_class</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><h4 id="4-pytest用例的执行方式"><a href="#4-pytest用例的执行方式" class="headerlink" title="4 pytest用例的执行方式"></a>4 pytest用例的执行方式</h4><ul><li>（1） 在一个目录下执行pytest，会递归查找当前目录下的所有符合用例发现规则的所有用例，然后全部执行</li></ul><p>如当前目录下有两个py文件分别为：test_example.py，test_example2.py，两个文件中的代码均为如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class TestFunction(object):</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;\nin setup_class&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line"></span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in setup&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;in teardown&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func1(self):</span><br><span class="line">        print(&quot;in test_func1&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func3(self):</span><br><span class="line">        print(&quot;in test_func3&quot;)</span><br></pre></td></tr></table></figure><p>在当前目录下执行 pytest，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 6 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ...                                                                                                                                               [ 50%]</span><br><span class="line">test_example2.py ...                                                                                                                                              [100%]</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 6 passed in 0.06s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><ul><li><p>（2） 可以指定文件，比如 pytest test_example.py 即执行test_example.py文件中的所有符合用例发现规则的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest test_example.py</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ...                                                                                                                                               [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.03s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li><p>（3） 可以指定文件中的某个具体测试类，如：pytest test_example.py::TestFunction<br>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest test_example.py::TestFunction</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py ...                                                                                                                                               [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.02s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li><p>(4) 还可以指定具体文件中的具体类中的具体某一个测试用例，如：pytest test_example.py::TestFunction::test_func1<br>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest test_example.py::TestFunction::test_func1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 1 item                                                                                                                                                        </span><br><span class="line"></span><br><span class="line">test_example.py .                                                                                                                                                 [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 passed in 0.02s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li><p>(5) pytest -s 详细打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest test_example.py::TestFunction::test_func1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 1 item                                                                                                                                                        </span><br><span class="line"></span><br><span class="line">test_example.py .                                                                                                                                                 [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 passed in 0.02s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s test_example.py</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in setup_class</span><br><span class="line">in setup</span><br><span class="line">in test_func1</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func2</span><br><span class="line">.in teardown</span><br><span class="line">in setup</span><br><span class="line">in test_func3</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_class</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 3 passed in 0.02s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li><li><p>(6) pytest -m xxx 可以指定了打了xxx标记的用例执行</p></li></ul><p>在test_example.py中编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line">class TestFunction(object):</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;\nin setup_class&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line"></span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in setup&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;in teardown&quot;)</span><br><span class="line">    @pytest.mark.test</span><br><span class="line">    def test_func1(self):</span><br><span class="line">        print(&quot;in test_func1&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func3(self):</span><br><span class="line">        print(&quot;in test_func3&quot;)</span><br></pre></td></tr></table></figure><p>使用下面命令执行发现只执行了一个用例，因为此用例打了test的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s -m test</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items &#x2F; 2 deselected &#x2F; 1 selected                                                                                                                           </span><br><span class="line"></span><br><span class="line">test_example.py</span><br><span class="line">in setup_class</span><br><span class="line">in setup</span><br><span class="line">in test_func1</span><br><span class="line">.in teardown</span><br><span class="line">in teardown_class</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; warnings summary &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">test_example.py:14</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\test_demo\test_example.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.test - is this a typo?  You can regist</span><br><span class="line">er custom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.test</span><br><span class="line"></span><br><span class="line">-- Docs: https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;warnings.html</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 passed, 2 deselected, 1 warning in 0.07s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>这里再看一个例子，顺带把pytest.mark的功能讲了</p><p>pytest的mark功能主要用于给测试用例打不通的标签，在后续执行脚本的时候可以通过标签来指定运行哪些用例</p><p>在test_example.py文件中编写如下代码，给一部分测试用例加上smoke的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line"></span><br><span class="line">def test_01():</span><br><span class="line">    print(&quot;in test_01&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.smoke</span><br><span class="line">def test_02():</span><br><span class="line">    print(&quot;in test_02&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.smoke</span><br><span class="line">def test_03():</span><br><span class="line">    print(&quot;in test_03&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_04():</span><br><span class="line">    print(&quot;in test_04&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.smoke</span><br><span class="line">def test_05():</span><br><span class="line">    print(&quot;in test_05&quot;)</span><br><span class="line"></span><br><span class="line">def test_06():</span><br><span class="line">    print(&quot;in test_06&quot;)</span><br><span class="line"></span><br><span class="line">@pytest.mark.smoke</span><br><span class="line">def test_07():</span><br><span class="line">    print(&quot;in test_07&quot;)</span><br></pre></td></tr></table></figure><p>在pycharm中的terminal中切换到test_example.py的目录下，执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest -s -m smoke</span><br></pre></td></tr></table></figure><p>运行结果如下，将打了smoke标签的几个用例执行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -s -m smoke</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 7 items &#x2F; 3 deselected &#x2F; 4 selected                                                                                                                           </span><br><span class="line"></span><br><span class="line">test_example.py in test_02</span><br><span class="line">.in test_03</span><br><span class="line">.in test_05</span><br><span class="line">.in test_07</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; warnings summary &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">test_example.py:6</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\test_demo\test_example.py:6: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can regist</span><br><span class="line">er custom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.smoke</span><br><span class="line"></span><br><span class="line">test_example.py:10</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\test_demo\test_example.py:10: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can regis</span><br><span class="line">ter custom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.smoke</span><br><span class="line"></span><br><span class="line">test_example.py:18</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\test_demo\test_example.py:18: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can regis</span><br><span class="line">ter custom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.smoke</span><br><span class="line"></span><br><span class="line">test_example.py:25</span><br><span class="line">  G:\lamb_source\pytest_example_for_full_documentation\test_demo\test_example.py:25: PytestUnknownMarkWarning: Unknown pytest.mark.smoke - is this a typo?  You can regis</span><br><span class="line">ter custom marks to avoid this warning - for details, see https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;mark.html</span><br><span class="line">    @pytest.mark.smoke</span><br><span class="line"></span><br><span class="line">-- Docs: https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;latest&#x2F;warnings.html</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 4 passed, 3 deselected, 4 warnings in 0.03s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><ul><li>(7) pytest -x 遇到错误等及不再继续执行</li></ul><p>在test_example.py中编写如下代码：有三个用例，其中第二个会出现断言错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import pytest</span><br><span class="line">class TestFunction(object):</span><br><span class="line">    def setup_class(self):</span><br><span class="line">        print(&quot;\nin setup_class&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown_class(self):</span><br><span class="line">        print(&quot;in teardown_class&quot;)</span><br><span class="line"></span><br><span class="line">    def setup(self):</span><br><span class="line">        print(&quot;in setup&quot;)</span><br><span class="line"></span><br><span class="line">    def teardown(self):</span><br><span class="line">        print(&quot;in teardown&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func1(self):</span><br><span class="line">        print(&quot;in test_func1&quot;)</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line">        assert 1&#x3D;&#x3D;2</span><br><span class="line"></span><br><span class="line">    def test_func3(self):</span><br><span class="line">        print(&quot;in test_func3&quot;)</span><br></pre></td></tr></table></figure><p>分别用pytest 和pytest -x 执行，结果如下：当使用-x参数时结果为一个通过一个失败，只执行了两个，而使用pytest时，三个用例都执行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .F.                                                                                                                                               [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_______________________________________________________________________ TestFunction.test_func2 ________________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestFunction object at 0x0000019FBFD5B400&gt;</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:20: AssertionError</span><br><span class="line">------------------------------------------------------------------------ Captured stdout setup -------------------------------------------------------------------------</span><br><span class="line">in setup</span><br><span class="line">------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------</span><br><span class="line">in test_func2</span><br><span class="line">----------------------------------------------------------------------- Captured stdout teardown -----------------------------------------------------------------------</span><br><span class="line">in teardown</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::TestFunction::test_func2 - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 2 passed in 0.14s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest -x</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .Fin teardown_class</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_______________________________________________________________________ TestFunction.test_func2 ________________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestFunction object at 0x0000019D9C83B460&gt;</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:20: AssertionError</span><br><span class="line">------------------------------------------------------------------------ Captured stdout setup -------------------------------------------------------------------------</span><br><span class="line">in setup</span><br><span class="line">------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------</span><br><span class="line">in test_func2</span><br><span class="line">----------------------------------------------------------------------- Captured stdout teardown -----------------------------------------------------------------------</span><br><span class="line">in teardown</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::TestFunction::test_func2 - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 1 passed in 0.14s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><ul><li>(8) pytest –maxfail=num 可以控制在num个用例失败后停止执行</li></ul><p>下面使用（7）中的测试代码，执行下面命令，只执行了两个用例，因为达到了最大失败用例1个，即停止执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest --maxfail&#x3D;1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 3 items                                                                                                                                                       </span><br><span class="line"></span><br><span class="line">test_example.py .Fin teardown_class</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_______________________________________________________________________ TestFunction.test_func2 ________________________________________________________________________</span><br><span class="line"></span><br><span class="line">self &#x3D; &lt;test_example.TestFunction object at 0x00000228B960B580&gt;</span><br><span class="line"></span><br><span class="line">    def test_func2(self):</span><br><span class="line">        print(&quot;in test_func2&quot;)</span><br><span class="line">&gt;       assert 1&#x3D;&#x3D;2</span><br><span class="line">E       assert 1 &#x3D;&#x3D; 2</span><br><span class="line"></span><br><span class="line">test_example.py:20: AssertionError</span><br><span class="line">------------------------------------------------------------------------ Captured stdout setup -------------------------------------------------------------------------</span><br><span class="line">in setup</span><br><span class="line">------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------</span><br><span class="line">in test_func2</span><br><span class="line">----------------------------------------------------------------------- Captured stdout teardown -----------------------------------------------------------------------</span><br><span class="line">in teardown</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::TestFunction::test_func2 - assert 1 &#x3D;&#x3D; 2</span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed, 1 passed in 0.14s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest系列(1)--安装以及快速入门</title>
      <link href="/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(1)--%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/blog/2020/08/09/pytest%E7%B3%BB%E5%88%97(1)--%E5%AE%89%E8%A3%85%E4%BB%A5%E5%8F%8A%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-pytest-的特点"><a href="#1-pytest-的特点" class="headerlink" title="1 pytest 的特点"></a>1 pytest 的特点</h4><ul><li>（1） 非常容易上手，入门简单，文档丰富，文档中有很多实例可以参考</li><li>（2） 能够支持简单的单元测试和复杂的功能测试</li><li>（3） 支持参数化</li><li>（4） 执行测试过程中可以将某些测试跳过（skip），或者对某些预期失败的case标记成失败</li><li>（5） 支持重复执行(rerun)失败的 case</li><li>（6） 支持运行由 nose, unittest 编写的测试 case</li><li>（7） 可生成 html 报告</li><li>（8） 方便的和持续集成工具 jenkins 集成</li><li>（9） 可支持执行部分用例</li><li>（10） 具有很多第三方插件，并且可以自定义扩展<h4 id="2-pytest-安装"><a href="#2-pytest-安装" class="headerlink" title="2 pytest 安装"></a>2 pytest 安装</h4></li></ul><p>注：默认环境已经安装了miniconda，若未安装，请参考<a href="https://redrose2100.github.io/blog/2020/07/10/miniconda%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">Miniconda安装</a></p><ul><li><p>(1) 安装python3.8.3的虚拟环境<br>打开cmd窗口，执行如下命令安装名为PytestEnv的基于python3.8.3的虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n PytestEnv python&#x3D;3.8.3</span><br></pre></td></tr></table></figure></li><li><p>(2) 激活名为PytestEnv的虚拟环境<br>执行如下命令激活名为PytestEnv的虚拟环境</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate PytestEnv</span><br></pre></td></tr></table></figure><ul><li><p>(3) 安装pytest<br>执行如下命令安装pytest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest</span><br></pre></td></tr></table></figure></li><li><p>(4) 安装pytest-html<br>执行如下命令，安装pytest-html，用于生成测试用例的html报告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pytest-html</span><br></pre></td></tr></table></figure></li><li><p>(5) 查看安装的pytest版本<br>执行如下命令查看pytest版本信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest --version</span><br></pre></td></tr></table></figure><p>显示信息如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation&gt;pytest --version</span><br><span class="line">This is pytest version 5.4.3, imported from d:\miniconda\envs\pytestenv\lib\site-packages\pytest\__init__.py</span><br><span class="line">setuptools registered plugins:</span><br><span class="line">  pytest-html-2.1.1 at d:\miniconda\envs\pytestenv\lib\site-packages\pytest_html\plugin.py</span><br><span class="line">  pytest-metadata-1.10.0 at d:\miniconda\envs\pytestenv\lib\site-packages\pytest_metadata\plugin.py</span><br></pre></td></tr></table></figure><h4 id="3-创建第一个测试用例"><a href="#3-创建第一个测试用例" class="headerlink" title="3 创建第一个测试用例"></a>3 创建第一个测试用例</h4></li><li><p>(1) 新建一个测试文件，比如 test_example.py</p></li><li><p>(2) 在test_example.py文件中编写如下代码,即编写一个被测函数add，此函数返回两个数之和，然后对这个函数编写测试用例，assert为断言，这里判断函数传入10和20，返回结果等于50，很明显从逻辑上分析这个断言是错误的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def add(a,b):</span><br><span class="line">    return a+b</span><br><span class="line"></span><br><span class="line">def test_add():</span><br><span class="line">    assert(add(10,20)&#x3D;&#x3D;50)</span><br></pre></td></tr></table></figure></li><li><p>(3) 在pycharm中打开terminal窗口，在terminal窗口通过cd命令进入到test_example.py所在的目录，然后执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytest</span><br></pre></td></tr></table></figure></li><li><p>(4) 运行之后得到如下结果，提示用例失败，断言30==50，与上面分析结论一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;pytest</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; test session starts &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">platform win32 -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1</span><br><span class="line">rootdir: G:\lamb_source\pytest_example_for_full_documentation\test_demo</span><br><span class="line">plugins: html-2.1.1, metadata-1.10.0</span><br><span class="line">collected 1 item                                                                                                                                                        </span><br><span class="line"></span><br><span class="line">test_example.py F                                                                                                                                                 [100%]</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; FAILURES &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">_______________________________________________________________________________ test_add _______________________________________________________________________________</span><br><span class="line"></span><br><span class="line">    def test_add():</span><br><span class="line">&gt;       assert(add(10,20)&#x3D;&#x3D;50)</span><br><span class="line">E       assert 30 &#x3D;&#x3D; 50</span><br><span class="line">E        +  where 30 &#x3D; add(10, 20)</span><br><span class="line"></span><br><span class="line">test_example.py:5: AssertionError</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; short test summary info &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FAILED test_example.py::test_add - assert 30 &#x3D;&#x3D; 50</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 1 failed in 0.20s &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">(PytestEnv) G:\lamb_source\pytest_example_for_full_documentation\test_demo&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> pytest系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python专题系列(4)--setuptools详解</title>
      <link href="/blog/2020/08/07/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(4)--setuptools%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/07/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(4)--setuptools%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-setuptools-安装，执行如下命令即可："><a href="#1-setuptools-安装，执行如下命令即可：" class="headerlink" title="1 setuptools 安装，执行如下命令即可："></a>1 setuptools 安装，执行如下命令即可：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install setuptools</span><br></pre></td></tr></table></figure><p>如下表示已经安装ok</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(PythonBaseEnv) G:\study\pkg_01&gt;pip install --upgrade setuptools</span><br><span class="line">Collecting setuptools</span><br><span class="line">  Downloading setuptools-49.2.1-py3-none-any.whl (789 kB)</span><br><span class="line">     |████████████████████████████████| 789 kB 273 kB&#x2F;s</span><br><span class="line">Installing collected packages: setuptools</span><br><span class="line">  Attempting uninstall: setuptools</span><br><span class="line">    Found existing installation: setuptools 49.2.0.post20200714</span><br><span class="line">    Uninstalling setuptools-49.2.0.post20200714:</span><br><span class="line">      Successfully uninstalled setuptools-49.2.0.post20200714</span><br><span class="line">Successfully installed setuptools-49.2.1</span><br></pre></td></tr></table></figure><h4 id="2-将最简单的pkg-01-的包打包为-tar-gz的源码包"><a href="#2-将最简单的pkg-01-的包打包为-tar-gz的源码包" class="headerlink" title="2 将最简单的pkg_01 的包打包为.tar.gz的源码包"></a>2 将最简单的pkg_01 的包打包为.tar.gz的源码包</h4><ul><li>（1） 创建如下文件目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pkg_01</span><br><span class="line">   |----pkg_01</span><br><span class="line">   |       |----__init__.py</span><br><span class="line">   |       |----math</span><br><span class="line">   |              |----__init__.py</span><br><span class="line">   |              |----common.py</span><br><span class="line">   |----setup.py</span><br></pre></td></tr></table></figure></li><li>(2) 在setup.py文件中编写如下代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from setuptools import setup, find_packages</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name&#x3D;&quot;pkg_01&quot;,</span><br><span class="line">    version&#x3D;&quot;0.0.1&quot;,</span><br><span class="line">    package&#x3D;find_packages(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>(3) 在 pkg_01.math.common.py中写一个加法的函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def add(a,b):</span><br><span class="line">    return (a+b)</span><br></pre></td></tr></table></figure></li><li>(4) 在cmd或者pycharm的终端中切换到pkg_01的根目录中，然后执行如下命令即可打包一个最简单的.tar.gz包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py sdist --format&#x3D;gztar</span><br></pre></td></tr></table></figure></li><li>(5) 在cmd或者pycharm的终端中继续执行如下命令对我们上面打的包进行安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install dist&#x2F;pkg_01-0.0.1.tar.gz</span><br></pre></td></tr></table></figure></li><li>(6) 进入python交互式环境中，对上面的安装的pkg_01的包进行测试,如下，表示pkg_01已经安装ok，并且add方法功能也正常<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(PythonBaseEnv) G:\study\pkg_01&gt;python</span><br><span class="line">Python 3.8.3 (default, Jul  2 2020, 17:30:36) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; from pkg_01.math.common import add</span><br><span class="line">&gt;&gt;&gt; a&#x3D;add(100,200)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">300</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">* (7)源码包一般常用的就是.tar.gz和.zip包</span><br></pre></td></tr></table></figure><h4 id="3-将上述最简单的pkg-01打包为windows标砖软件msi格式"><a href="#3-将上述最简单的pkg-01打包为windows标砖软件msi格式" class="headerlink" title="3 将上述最简单的pkg_01打包为windows标砖软件msi格式"></a>3 将上述最简单的pkg_01打包为windows标砖软件msi格式</h4></li><li>（1） 在cmd或者pycharm的终端中执行如下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup bdist --format&#x3D;msi</span><br></pre></td></tr></table></figure>执行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(PythonBaseEnv) G:\study\pkg_01&gt;python setup.py  bdist --format&#x3D;msi</span><br><span class="line">D:\Miniconda\envs\PythonBaseEnv\lib\distutils\dist.py:274: UserWarning: Unknown distribution option: &#39;package&#39;</span><br><span class="line">  warnings.warn(msg)</span><br><span class="line">running bdist</span><br><span class="line">running bdist_msi</span><br><span class="line">running build</span><br><span class="line">installing to build\bdist.win-amd64\msi</span><br><span class="line">running install_egg_info</span><br><span class="line">running egg_info</span><br><span class="line">writing pkg_01.egg-info\PKG-INFO</span><br><span class="line">writing dependency_links to pkg_01.egg-info\dependency_links.txt</span><br><span class="line">writing top-level names to pkg_01.egg-info\top_level.txt</span><br><span class="line">reading manifest file &#39;pkg_01.egg-info\SOURCES.txt&#39;</span><br><span class="line">writing manifest file &#39;pkg_01.egg-info\SOURCES.txt&#39;</span><br><span class="line">Copying pkg_01.egg-info to build\bdist.win-amd64\msi\Lib\site-packages\pkg_01-0.0.1-py3.8.egg-info</span><br><span class="line">running install_scripts</span><br><span class="line">removing &#39;build\bdist.win-amd64\msi&#39; (and everything under it)</span><br></pre></td></tr></table></figure></li><li>（2）执行如下命令将已经安装的pkg_01的包卸载掉<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall pkg_01</span><br></pre></td></tr></table></figure></li><li>(3) 找打dist目录下生成的pkg_01-0.0.1.win-amd64.msi软件，双击执行</li><li>(4) 然后选择“install for all users”选项，点击“next”</li><li>(5) 继续选择“next”，然后点击“finish”，完成安装</li><li>(6) 在cmd中，使用系统中的pip执行 pip list 发现pkg_01包已经安装上去了</li></ul><h4 id="4-将pkg-01包打包为rpm包"><a href="#4-将pkg-01包打包为rpm包" class="headerlink" title="4 将pkg_01包打包为rpm包"></a>4 将pkg_01包打包为rpm包</h4><ul><li>(1) 首先将pkg_01的源码上传至linux，在windows上是无法打包rpm包的</li><li>(2) 在linux上首先执行pip list，确保当前pkg_01在linux上是没有安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 pkg_01]# pwd</span><br><span class="line">&#x2F;opt&#x2F;pkg_01</span><br><span class="line">(base) [root@redrose2100 pkg_01]# pip list</span><br><span class="line">Package                Version</span><br><span class="line">---------------------- -------------------</span><br><span class="line">certifi                2020.4.5.1</span><br><span class="line">cffi                   1.14.0</span><br><span class="line">chardet                3.0.4</span><br><span class="line">conda                  4.8.3</span><br><span class="line">conda-package-handling 1.7.0</span><br><span class="line">cryptography           2.9.2</span><br><span class="line">idna                   2.9</span><br><span class="line">pip                    20.0.2</span><br><span class="line">pycosat                0.6.3</span><br><span class="line">pycparser              2.20</span><br><span class="line">pyOpenSSL              19.1.0</span><br><span class="line">PySocks                1.7.1</span><br><span class="line">requests               2.23.0</span><br><span class="line">ruamel-yaml            0.15.87</span><br><span class="line">setuptools             46.4.0.post20200518</span><br><span class="line">six                    1.14.0</span><br><span class="line">tqdm                   4.46.0</span><br><span class="line">urllib3                1.25.8</span><br><span class="line">wheel                  0.34.2</span><br><span class="line">(base) [root@redrose2100 pkg_01]#</span><br></pre></td></tr></table></figure></li><li>(3) 进入到pkg_01目录下，执行如下命令将pkg_01打包为rpm包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python setup.py bdist --format&#x3D;rpm</span><br></pre></td></tr></table></figure>则会在dist目录下生成如下三个文件，两个rpm和一个tar.gz<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 pkg_01]# ls dist&#x2F;</span><br><span class="line">pkg_01-0.0.1-1.noarch.rpm  pkg_01-0.0.1-1.src.rpm  pkg_01-0.0.1.tar.gz</span><br></pre></td></tr></table></figure></li><li>(4) 然后可以安装pkg_01-0.0.1-1.noarch.rpm包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh dist&#x2F;pkg_01-0.0.1-1.noarch.rpm(base) [root@redrose2100 pkg_01]# rpm -ivh dist&#x2F;pkg_01-0.0.1-1.noarch.rpm</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating &#x2F; installing...</span><br><span class="line">   1:pkg_01-0.0.1-1                   ################################# [100%]</span><br></pre></td></tr></table></figure></li><li>(5) 再次执行pip list，发现此时pkg-01已经安装ok了<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(base) [root@redrose2100 pkg_01]# pip list</span><br><span class="line">Package                Version</span><br><span class="line">---------------------- -------------------</span><br><span class="line">certifi                2020.4.5.1</span><br><span class="line">cffi                   1.14.0</span><br><span class="line">chardet                3.0.4</span><br><span class="line">conda                  4.8.3</span><br><span class="line">conda-package-handling 1.7.0</span><br><span class="line">cryptography           2.9.2</span><br><span class="line">idna                   2.9</span><br><span class="line">pip                    20.0.2</span><br><span class="line">pkg-01                 0.0.1</span><br><span class="line">pycosat                0.6.3</span><br><span class="line">pycparser              2.20</span><br><span class="line">pyOpenSSL              19.1.0</span><br><span class="line">PySocks                1.7.1</span><br><span class="line">requests               2.23.0</span><br><span class="line">ruamel-yaml            0.15.87</span><br><span class="line">setuptools             46.4.0.post20200518</span><br><span class="line">six                    1.14.0</span><br><span class="line">tqdm                   4.46.0</span><br><span class="line">urllib3                1.25.8</span><br><span class="line">wheel                  0.34.2</span><br><span class="line">(base) [root@redrose2100 pkg_01]#</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-打包方式常用的基本就上面集中，下面重点就是详细配置setup-py文件了"><a href="#5-打包方式常用的基本就上面集中，下面重点就是详细配置setup-py文件了" class="headerlink" title="5 打包方式常用的基本就上面集中，下面重点就是详细配置setup.py文件了"></a>5 打包方式常用的基本就上面集中，下面重点就是详细配置setup.py文件了</h4><table><thead><tr><th>名称</th><th align="left">含义</th></tr></thead><tbody><tr><td>name</td><td align="left">包的名称</td></tr><tr><td>version</td><td align="left">软件包的版本号</td></tr><tr><td>description</td><td align="left">软件包的描述</td></tr><tr><td>long_description</td><td align="left">软件包的详细描述</td></tr><tr><td>long_description_context_type</td><td align="left">软件包详细描述的类型，比如text/markdown</td></tr><tr><td>author</td><td align="left">软件包的作者</td></tr><tr><td>author_email</td><td align="left">软件包的作者的邮件地址</td></tr><tr><td>maintainer</td><td align="left">当前维护者</td></tr><tr><td>maintainer_email</td><td align="left">当前维护者的电子邮箱</td></tr><tr><td>url</td><td align="left">指定软件包主页的url</td></tr><tr><td>download_url</td><td align="left">指定要下载软件包的url</td></tr><tr><td>package</td><td align="left">指定setuptools将操作的软件包</td></tr><tr><td>py_modules</td><td align="left">指定setuptools将操作的模块</td></tr><tr><td>scripts</td><td align="left">用于呀构建和安装的独立脚本文件</td></tr><tr><td>ext_package</td><td align="left">软件包提供的扩展的基本软件包</td></tr><tr><td>ext_module</td><td align="left">指定要构建的python扩展列表的实例列表</td></tr><tr><td>classifiers</td><td align="left">描述程序包类别的字符串列表</td></tr><tr><td>distclass</td><td align="left">要使用的子类</td></tr><tr><td>script_name</td><td align="left">用于是定setup.py脚本的名称，默认为 sys.argv[0]</td></tr><tr><td>script_args</td><td align="left">用于指定setup.py脚本的参数列表</td></tr><tr><td>options</td><td align="left">用于给setup.py脚本提供的默认的options</td></tr><tr><td>license</td><td align="left">指定软件包的约束协议</td></tr><tr><td>keywords</td><td align="left">用于描述元数据的字符串列表或者逗号隔开的字符串</td></tr><tr><td>platform</td><td align="left">字符串列表或者逗号隔开的字符串，表示软件支持的平台</td></tr><tr><td>cmdclass</td><td align="left">字典提供命令名到Command子类的映射</td></tr><tr><td>data_files</td><td align="left">指定要分发的文件列表</td></tr><tr><td>package_dir</td><td align="left">提供程序包到目录名称的映射</td></tr><tr><td>install_requires</td><td align="left">安装依赖</td></tr><tr><td>include_package_data</td><td align="left">如果设置为True，setuptools则表示将在MANIFEST.in文件指定的包目录中自动包含找到的所有数据文件</td></tr><tr><td>exclude_package_data</td><td align="left">字典将包名称映射到应从包目录中排除的全局模式列表。您可以使用它来修剪包含的所有多余文件include_package_data</td></tr><tr><td>package_data</td><td align="left">包数据文件</td></tr><tr><td>entry_points</td><td align="left">字典将入口点组名称映射到定义入口点的字符串或字符串列表。入口点用于支持动态发现项目提供的服务或插件</td></tr><tr><td>python_requires</td><td align="left">与Python版本的版本说明符（在PEP 440中定义）相对应的字符串</td></tr><tr><td>namespace_packages</td><td align="left">命名项目的“命名空间包”的字符串列表。名称空间包是可以拆分为多个项目发行版的包</td></tr><tr><td>#### 6 将pkg_01包继续丰富，最后上传至github以及pypi上</td><td align="left"></td></tr><tr><td>* （1） 在工程根目录新建一个README.rst文件，文件内容比如如下：采用markdown语法</td><td align="left"></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 功能：用于演示一个简单打包流程以及上传pypi流程的包</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>* (2) 将代码包上传至github：<a href="https://github.com/redrose2100/pkg_01">https://github.com/redrose2100/pkg_01</a></td><td align="left"></td></tr><tr><td>* (3) 将setup.py文件丰富为如下内容：</td><td align="left"></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from setuptools import setup, find_packages</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name&#x3D;&quot;pkg_01&quot;,</span><br><span class="line">    version&#x3D;&quot;0.0.1&quot;,</span><br><span class="line">    descriptions&#x3D;(&quot;used to demo distribute python package&quot;),</span><br><span class="line">    package&#x3D;find_packages(),</span><br><span class="line">    author&#x3D;&quot;redrose2100&quot;,</span><br><span class="line">    author_email&#x3D;&quot;hitredrose@163.com&quot;,</span><br><span class="line">    license&#x3D;&quot;GPLv3&quot;,</span><br><span class="line">    url&#x3D;&quot;https:&#x2F;&#x2F;github.com&#x2F;redrose2100&#x2F;pkg_01&quot;,</span><br><span class="line">    install_requires&#x3D;[]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>* （4） 在pypi上注册账号，并邮件激活</td><td align="left"></td></tr><tr><td>* （5） windows在C:\Users\Administrator 目录下创建 .pypirc文件，内容为：</td><td align="left"></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[distutils]</span><br><span class="line">index-servers &#x3D;pypi</span><br><span class="line"></span><br><span class="line">[pypi]</span><br><span class="line">username: 用户名</span><br><span class="line">password: 密码</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>* （6) 使用如下命令安装twine</td><td align="left"></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install twine</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>* (7) 执行如下命令将打的包上传</td><td align="left"></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">twine upload dist&#x2F;*</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>执行结果如下：</td><td align="left"></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(PythonBaseEnv) G:\study\pkg_01&gt;twine upload dist&#x2F;*</span><br><span class="line">Uploading distributions to https:&#x2F;&#x2F;upload.pypi.org&#x2F;legacy&#x2F;</span><br><span class="line">Uploading pkg_01-0.0.1.tar.gz</span><br><span class="line">100%|██████████████████████████████████████████████████████████████████████████████████</span><br><span class="line">100%|██████████████████████████████████████████████████████████████████████████████████</span><br><span class="line">██████████████████████████████████████████████| 3.62k&#x2F;3.62k [00:04&lt;00:00, 826B&#x2F;s]</span><br><span class="line"></span><br><span class="line">View at:</span><br><span class="line">https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;pkg-01&#x2F;0.0.1&#x2F;</span><br><span class="line"></span><br><span class="line">(PythonBaseEnv) G:\study\pkg_01&gt;</span><br></pre></td></tr></table></figure></td><td align="left"></td></tr><tr><td>打开浏览器 输入 <a href="https://pypi.org/project/pkg-01/0.0.1/" target="_blank" rel="noopener">https://pypi.org/project/pkg-01/0.0.1/</a> 既可以看到发布的包了</td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python专题系列(3)--configparser详解</title>
      <link href="/blog/2020/08/06/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(3)--configparser%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/06/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(3)--configparser%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-configparser-使用get方式读取-ini配置文件的配置内容"><a href="#1-configparser-使用get方式读取-ini配置文件的配置内容" class="headerlink" title="1 configparser 使用get方式读取.ini配置文件的配置内容"></a>1 configparser 使用get方式读取.ini配置文件的配置内容</h4><ul><li>（1）首先编写如下所示的env.ini配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">ip&#x3D;192.168.1.200</span><br><span class="line">port&#x3D;22</span><br><span class="line">username&#x3D;root</span><br><span class="line">password&#x3D;root</span><br><span class="line"></span><br><span class="line">[personal]</span><br><span class="line">name&#x3D;redrose2100</span><br><span class="line">city&#x3D;nanjing</span><br><span class="line">github&#x3D;redrose2100.github.io</span><br></pre></td></tr></table></figure></li><li>（2） 编写解析.ini配置文件的python代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(config.get(&quot;server&quot;,&quot;ip&quot;))</span><br><span class="line">print(config.get(&quot;personal&quot;,&quot;name&quot;))</span><br></pre></td></tr></table></figure>运行结果为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.200</span><br><span class="line">redrose2100</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-使用数组下标的方式读取-ini配置文件的内容"><a href="#2-使用数组下标的方式读取-ini配置文件的内容" class="headerlink" title="2 使用数组下标的方式读取.ini配置文件的内容"></a>2 使用数组下标的方式读取.ini配置文件的内容</h4><p>env.ini的内容同上述1中的内容</p><p>通过数组下标的方式读取配置文件内容的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(config[&quot;server&quot;][&quot;ip&quot;])</span><br><span class="line">print(config[&quot;personal&quot;][&quot;name&quot;])</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.200</span><br><span class="line">redrose2100</span><br></pre></td></tr></table></figure><h4 id="3-使用configparser写配置文件"><a href="#3-使用configparser写配置文件" class="headerlink" title="3 使用configparser写配置文件"></a>3 使用configparser写配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line"></span><br><span class="line">config[&quot;server&quot;]&#x3D;&#123;</span><br><span class="line">    &quot;ip&quot;:&quot;192.138.1.200&quot;,</span><br><span class="line">    &quot;port&quot;:22,</span><br><span class="line">    &quot;username&quot;:&quot;root&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;root&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config[&quot;personal&quot;]&#x3D;&#123;</span><br><span class="line">    &quot;name&quot;:&quot;redrose2100&quot;,</span><br><span class="line">    &quot;city&quot;:&quot;nanjing&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">with open(&quot;test.ini&quot;,&quot;w&quot;) as f:</span><br><span class="line">    config.write(f)</span><br></pre></td></tr></table></figure><p>执行之后，在当前目录下会生成一个test.ini文件，其内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">ip &#x3D; 192.138.1.200</span><br><span class="line">port &#x3D; 22</span><br><span class="line">username &#x3D; root</span><br><span class="line">password &#x3D; root</span><br><span class="line"></span><br><span class="line">[personal]</span><br><span class="line">name &#x3D; redrose2100</span><br><span class="line">city &#x3D; nanjing</span><br></pre></td></tr></table></figure><h4 id="4-configparser-对section常用的操作："><a href="#4-configparser-对section常用的操作：" class="headerlink" title="4 configparser 对section常用的操作："></a>4 configparser 对section常用的操作：</h4><ul><li>（1）has_section(section) 判断读取的config对象是否还有指定的section</li><li>（2）sections() 获取读取到的config对象的所有sections列表</li><li>（3）add_section(section) 给读取到的config对象增加一个section，注意此时增加的section只是在config对象中，并没有写入到ini配置文件中</li><li>（4）remove_section(section) 给读取到的config对象删除一个section<br>实例代码如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line">print(config.has_section(&quot;server&quot;))</span><br><span class="line">print(config.sections())</span><br><span class="line">config.add_section(&quot;kafka&quot;)</span><br><span class="line">print(config.sections())</span><br><span class="line">config.remove_section(&quot;kafka&quot;)</span><br><span class="line">print(config.sections())</span><br></pre></td></tr></table></figure>运行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line">print(config.has_section(&quot;server&quot;))</span><br><span class="line">print(config.sections())</span><br><span class="line">config.add_section(&quot;kafka&quot;)</span><br><span class="line">print(config.sections())</span><br><span class="line">config.remove_section(&quot;kafka&quot;)</span><br><span class="line">print(config.sections())</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-configparser对option常用的操作，如下代码演示："><a href="#5-configparser对option常用的操作，如下代码演示：" class="headerlink" title="5 configparser对option常用的操作，如下代码演示："></a>5 configparser对option常用的操作，如下代码演示：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line">print(config.has_option(&quot;server&quot;,&quot;ip&quot;))</span><br><span class="line">print(config.options(&quot;server&quot;))</span><br><span class="line">config.set(&quot;server&quot;,&quot;test&quot;,&quot;test&quot;)</span><br><span class="line">print(config.options(&quot;server&quot;))</span><br><span class="line">config.remove_option(&quot;server&quot;,&quot;test&quot;)</span><br><span class="line">print(config.options(&quot;server&quot;))</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">True</span><br><span class="line">[&#39;ip&#39;, &#39;port&#39;, &#39;username&#39;, &#39;password&#39;]</span><br><span class="line">[&#39;ip&#39;, &#39;port&#39;, &#39;username&#39;, &#39;password&#39;, &#39;test&#39;]</span><br><span class="line">[&#39;ip&#39;, &#39;port&#39;, &#39;username&#39;, &#39;password&#39;]</span><br></pre></td></tr></table></figure><h4 id="6-configparser的对象可以类似字典一样使用，但是类型不是字典，代码演示如下："><a href="#6-configparser的对象可以类似字典一样使用，但是类型不是字典，代码演示如下：" class="headerlink" title="6 configparser的对象可以类似字典一样使用，但是类型不是字典，代码演示如下："></a>6 configparser的对象可以类似字典一样使用，但是类型不是字典，代码演示如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line">for key in config[&quot;server&quot;].keys():</span><br><span class="line">    print(key)</span><br><span class="line"></span><br><span class="line">for key,value in config[&quot;server&quot;].items():</span><br><span class="line">    print(key,value)</span><br><span class="line"></span><br><span class="line">for value in config[&quot;server&quot;].values():</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line">item&#x3D;config[&quot;server&quot;].popitem()</span><br><span class="line">print(type(item))</span><br><span class="line">print(item)</span><br><span class="line"></span><br><span class="line">port&#x3D;config[&quot;server&quot;].pop(&quot;port&quot;)</span><br><span class="line">print(port)</span><br><span class="line"></span><br><span class="line">for key,value in config[&quot;server&quot;].items():</span><br><span class="line">    print(key,value)</span><br><span class="line"></span><br><span class="line">username&#x3D;config[&quot;server&quot;].get(&quot;username&quot;,&quot;no found&quot;)</span><br><span class="line">print(username)</span><br><span class="line"></span><br><span class="line">print(type(config[&quot;server&quot;]))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ip</span><br><span class="line">port</span><br><span class="line">username</span><br><span class="line">password</span><br><span class="line">ip 192.168.1.200</span><br><span class="line">port 22</span><br><span class="line">username root</span><br><span class="line">password root</span><br><span class="line">192.168.1.200</span><br><span class="line">22</span><br><span class="line">root</span><br><span class="line">root</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br><span class="line">(&#39;ip&#39;, &#39;192.168.1.200&#39;)</span><br><span class="line">22</span><br><span class="line">username root</span><br><span class="line">password root</span><br><span class="line">root</span><br><span class="line">&lt;class &#39;configparser.SectionProxy&#39;&gt;</span><br></pre></td></tr></table></figure><h4 id="7-可以将获取的类型直接转换为期望的数据类型，可用的方法有："><a href="#7-可以将获取的类型直接转换为期望的数据类型，可用的方法有：" class="headerlink" title="7 可以将获取的类型直接转换为期望的数据类型，可用的方法有："></a>7 可以将获取的类型直接转换为期望的数据类型，可用的方法有：</h4><ul><li>getint</li><li>getboolean</li><li>getfloat</li><li>get<br>下面将配置文件更新如下内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">ip&#x3D;192.168.1.200</span><br><span class="line">port&#x3D;22</span><br><span class="line">username&#x3D;root</span><br><span class="line">password&#x3D;root</span><br><span class="line">is_linux&#x3D;True</span><br><span class="line">price&#x3D;100.24</span><br><span class="line"></span><br><span class="line">[personal]</span><br><span class="line">name&#x3D;redrose2100</span><br><span class="line">city&#x3D;nanjing</span><br><span class="line">github&#x3D;redrose2100.github.io</span><br></pre></td></tr></table></figure>实例代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.ini&quot;,&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line">ip&#x3D;config[&quot;server&quot;].get(&quot;ip&quot;)</span><br><span class="line">port&#x3D;config[&quot;server&quot;].getint(&quot;port&quot;)</span><br><span class="line">is_linux&#x3D;config[&quot;server&quot;].getboolean(&quot;is_linux&quot;)</span><br><span class="line">price&#x3D;config[&quot;server&quot;].getfloat(&quot;price&quot;)</span><br><span class="line">print(ip,type(ip))</span><br><span class="line">print(port,type(port))</span><br><span class="line">print(is_linux,type(is_linux))</span><br><span class="line">print(price,type(price))</span><br></pre></td></tr></table></figure>运行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.200 &lt;class &#39;str&#39;&gt;</span><br><span class="line">22 &lt;class &#39;int&#39;&gt;</span><br><span class="line">True &lt;class &#39;bool&#39;&gt;</span><br><span class="line">100.24 &lt;class &#39;float&#39;&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="8-configparser标准库对解析-conf文件与解析-ini文件的使用方法是完全一样的，下面只演示一部分："><a href="#8-configparser标准库对解析-conf文件与解析-ini文件的使用方法是完全一样的，下面只演示一部分：" class="headerlink" title="8 configparser标准库对解析.conf文件与解析.ini文件的使用方法是完全一样的，下面只演示一部分："></a>8 configparser标准库对解析.conf文件与解析.ini文件的使用方法是完全一样的，下面只演示一部分：</h4><p>创建一个env.conf文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">ip&#x3D;192.168.1.200</span><br><span class="line">port&#x3D;22</span><br><span class="line">username&#x3D;root</span><br><span class="line">password&#x3D;root</span><br><span class="line">is_linux&#x3D;True</span><br><span class="line">price&#x3D;100.24</span><br><span class="line"></span><br><span class="line">[personal]</span><br><span class="line">name&#x3D;redrose2100</span><br><span class="line">city&#x3D;nanjing</span><br><span class="line">github&#x3D;redrose2100.github.io</span><br></pre></td></tr></table></figure><p>编写如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import configparser</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config&#x3D;configparser.ConfigParser()</span><br><span class="line">config.read(&quot;env.conf&quot;,&quot;utf-8&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(config.get(&quot;server&quot;,&quot;ip&quot;))</span><br><span class="line">print(config.get(&quot;personal&quot;,&quot;name&quot;))</span><br><span class="line"></span><br><span class="line">print(config[&quot;server&quot;][&quot;ip&quot;])</span><br><span class="line">print(config[&quot;personal&quot;][&quot;name&quot;])</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.200</span><br><span class="line">redrose2100</span><br><span class="line">192.168.1.200</span><br><span class="line">redrose2100</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python专题系列(2)--paramiko详解</title>
      <link href="/blog/2020/08/05/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(2)--paramiko%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/05/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(2)--paramiko%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-第三方库需要安装，使用如下命令安装"><a href="#1-第三方库需要安装，使用如下命令安装" class="headerlink" title="1 第三方库需要安装，使用如下命令安装"></a>1 第三方库需要安装，使用如下命令安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install paramiko</span><br></pre></td></tr></table></figure><h4 id="2-如下代码使用paramiko进行ssh连接，仅有三行代码即可实现对一个虚拟机的ssh连接（注：192-168-1-200-是我自己搭建的一个linux虚拟机）"><a href="#2-如下代码使用paramiko进行ssh连接，仅有三行代码即可实现对一个虚拟机的ssh连接（注：192-168-1-200-是我自己搭建的一个linux虚拟机）" class="headerlink" title="2 如下代码使用paramiko进行ssh连接，仅有三行代码即可实现对一个虚拟机的ssh连接（注：192.168.1.200 是我自己搭建的一个linux虚拟机）"></a>2 如下代码使用paramiko进行ssh连接，仅有三行代码即可实现对一个虚拟机的ssh连接（注：192.168.1.200 是我自己搭建的一个linux虚拟机）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import paramiko</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    ssh&#x3D;paramiko.SSHClient()</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    ssh.connect(hostname&#x3D;&quot;192.168.1.200&quot;,port&#x3D;22,username&#x3D;&quot;root&quot;,password&#x3D;&quot;root&quot;)</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>执行结果为空，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-使用exec-command在虚拟机上执行linux命令"><a href="#3-使用exec-command在虚拟机上执行linux命令" class="headerlink" title="3 使用exec_command在虚拟机上执行linux命令"></a>3 使用exec_command在虚拟机上执行linux命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import paramiko</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    ssh&#x3D;paramiko.SSHClient()</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    ssh.connect(hostname&#x3D;&quot;192.168.1.200&quot;,port&#x3D;22,username&#x3D;&quot;root&quot;,password&#x3D;&quot;root&quot;)</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    exec_command() 返回三个参数，分别是：</span><br><span class="line">    1 、标准输入    用于实现交互式命令</span><br><span class="line">    2 、标准输出    保存命令的正常执行结果</span><br><span class="line">    3 、标准错误    保存命令的错误信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    stdin,stdout,stderr&#x3D;ssh.exec_command(&quot;ls -l &#x2F;root&quot;)</span><br><span class="line">    output&#x3D;stdout.read()</span><br><span class="line">    output&#x3D;output.decode(&quot;utf-8&quot;)</span><br><span class="line">    print(output)</span><br><span class="line">    ssh.close()</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">total 36</span><br><span class="line">-rw-------. 1 root root  2078 Jun 21 16:21 anaconda-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Desktop</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Documents</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Downloads</span><br><span class="line">-rw-r--r--. 1 root root  2126 Jun 21 16:24 initial-setup-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Music</span><br><span class="line">-rw-r--r--. 1 root root 25548 Apr  7  2017 mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Pictures</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Public</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Templates</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Videos</span><br></pre></td></tr></table></figure><h4 id="4-connect-函数设置超时为1秒，并且在连接的前后打印当前系统时间，粗略的观察建立连接需要的时间"><a href="#4-connect-函数设置超时为1秒，并且在连接的前后打印当前系统时间，粗略的观察建立连接需要的时间" class="headerlink" title="4 connect()函数设置超时为1秒，并且在连接的前后打印当前系统时间，粗略的观察建立连接需要的时间"></a>4 connect()函数设置超时为1秒，并且在连接的前后打印当前系统时间，粗略的观察建立连接需要的时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line">import paramiko</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    ssh&#x3D;paramiko.SSHClient()</span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    print(datetime.datetime.now())</span><br><span class="line">    ssh.connect(hostname&#x3D;&quot;192.168.1.200&quot;,port&#x3D;22,username&#x3D;&quot;root&quot;,password&#x3D;&quot;root&quot;,timeout&#x3D;1.0)</span><br><span class="line">    print(datetime.datetime.now())</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    exec_command() 返回三个参数，分别是：</span><br><span class="line">    1 、标准输入    用于实现交互式命令</span><br><span class="line">    2 、标准输出    保存命令的正常执行结果</span><br><span class="line">    3 、标准错误    保存命令的错误信息</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    stdin,stdout,stderr&#x3D;ssh.exec_command(&quot;ls -l &#x2F;root&quot;)</span><br><span class="line">    output&#x3D;stdout.read()</span><br><span class="line">    output&#x3D;output.decode(&quot;utf-8&quot;)</span><br><span class="line">    print(output)</span><br><span class="line">    ssh.close()</span><br><span class="line"></span><br><span class="line">if __name__&#x3D;&#x3D;&quot;__main__&quot;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure><p>执行结果如下：执行成功，有兴趣把timeout设置为0.0001试试，会发现会报连接超时错误，这里不再演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2020-08-05 23:57:28.793856</span><br><span class="line">2020-08-05 23:57:28.968389</span><br><span class="line">total 36</span><br><span class="line">-rw-------. 1 root root  2078 Jun 21 16:21 anaconda-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Desktop</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Documents</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Downloads</span><br><span class="line">-rw-r--r--. 1 root root  2126 Jun 21 16:24 initial-setup-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Music</span><br><span class="line">-rw-r--r--. 1 root root 25548 Apr  7  2017 mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Pictures</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Public</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Templates</span><br><span class="line">drwxr-xr-x. 2 root root     6 Jun 29 07:37 Videos</span><br></pre></td></tr></table></figure><h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4>]]></content>
      
      
      <categories>
          
          <category> python专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python专题系列(1)--logging详解</title>
      <link href="/blog/2020/08/02/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(1)--logging%E8%AF%A6%E8%A7%A3/"/>
      <url>/blog/2020/08/02/python%E4%B8%93%E9%A2%98%E7%B3%BB%E5%88%97(1)--logging%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="1-logging-日志级别"><a href="#1-logging-日志级别" class="headerlink" title="1 logging 日志级别"></a>1 logging 日志级别</h4><table><thead><tr><th align="left">级别</th><th align="left">级别数量</th><th align="left">使用场合</th></tr></thead><tbody><tr><td align="left">DEBUG</td><td align="left">10</td><td align="left">详细信息，常用语调试</td></tr><tr><td align="left">INFO</td><td align="left">20</td><td align="left">程序正常运行过程中产生的一些信息</td></tr><tr><td align="left">WARNING</td><td align="left">20</td><td align="left">警告用户，虽然程序还在正常工作，但有可能发生错误</td></tr><tr><td align="left">ERROR</td><td align="left">40</td><td align="left">由于更严重的问题，程序已不能执行一些功能了</td></tr><tr><td align="left">CRITICAL</td><td align="left">50</td><td align="left">严重错误，程序已不能继续运行了</td></tr></tbody></table><h4 id="2-logging-默认的是warning级别"><a href="#2-logging-默认的是warning级别" class="headerlink" title="2 logging 默认的是warning级别"></a>2 logging 默认的是warning级别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.debug(&quot;this is debug log&quot;)</span><br><span class="line">logging.info(&quot;this is info log&quot;)</span><br><span class="line">logging.warning(&quot;this is warning log&quot;)</span><br><span class="line">logging.error(&quot;this is error log&quot;)</span><br><span class="line">logging.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br></pre></td></tr></table></figure><h4 id="3-可以通过logging-basicConfig-level-logging-DEBUG-来设置日志级别"><a href="#3-可以通过logging-basicConfig-level-logging-DEBUG-来设置日志级别" class="headerlink" title="3 可以通过logging.basicConfig(level=logging.DEBUG) 来设置日志级别"></a>3 可以通过logging.basicConfig(level=logging.DEBUG) 来设置日志级别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level&#x3D;logging.DEBUG)</span><br><span class="line">logging.debug(&quot;this is debug log&quot;)</span><br><span class="line">logging.info(&quot;this is info log&quot;)</span><br><span class="line">logging.warning(&quot;this is warning log&quot;)</span><br><span class="line">logging.error(&quot;this is error log&quot;)</span><br><span class="line">logging.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is debug log</span><br><span class="line">INFO:root:this is info log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br></pre></td></tr></table></figure><h4 id="4-logging日志是一部写入的，logging打印的内容和print打印的内筒先后顺序是不一致的"><a href="#4-logging日志是一部写入的，logging打印的内容和print打印的内筒先后顺序是不一致的" class="headerlink" title="4 logging日志是一部写入的，logging打印的内容和print打印的内筒先后顺序是不一致的"></a>4 logging日志是一部写入的，logging打印的内容和print打印的内筒先后顺序是不一致的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">print(&quot;this is print log&quot;)</span><br><span class="line">logging.basicConfig(level&#x3D;logging.DEBUG)</span><br><span class="line">logging.debug(&quot;this is debug log&quot;)</span><br><span class="line">logging.info(&quot;this is info log&quot;)</span><br><span class="line">logging.warning(&quot;this is warning log&quot;)</span><br><span class="line">logging.error(&quot;this is error log&quot;)</span><br><span class="line">logging.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行结果有可能是下面这种输出顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is debug log</span><br><span class="line">INFO:root:this is info log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br><span class="line">this is print log</span><br></pre></td></tr></table></figure><h4 id="5-logging-basicConfig-filename-”demo-log”-可以指定日志文件名，默认在当前目录下生成文件，此时不再往屏幕打印日志，而是将日志信息输出到指定的日志文件中去"><a href="#5-logging-basicConfig-filename-”demo-log”-可以指定日志文件名，默认在当前目录下生成文件，此时不再往屏幕打印日志，而是将日志信息输出到指定的日志文件中去" class="headerlink" title="5 logging.basicConfig(filename=”demo.log”)可以指定日志文件名，默认在当前目录下生成文件，此时不再往屏幕打印日志，而是将日志信息输出到指定的日志文件中去"></a>5 logging.basicConfig(filename=”demo.log”)可以指定日志文件名，默认在当前目录下生成文件，此时不再往屏幕打印日志，而是将日志信息输出到指定的日志文件中去</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">print(&quot;this is print log&quot;)</span><br><span class="line">logging.basicConfig(filename&#x3D;&quot;demo.log&quot;,level&#x3D;logging.DEBUG)</span><br><span class="line">logging.debug(&quot;this is debug log&quot;)</span><br><span class="line">logging.info(&quot;this is info log&quot;)</span><br><span class="line">logging.warning(&quot;this is warning log&quot;)</span><br><span class="line">logging.error(&quot;this is error log&quot;)</span><br><span class="line">logging.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行后屏幕上输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this is print log</span><br></pre></td></tr></table></figure><p>而在当前文件下生成了一个demo.log的日志文件，此日志文件的内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is debug log</span><br><span class="line">INFO:root:this is info log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br></pre></td></tr></table></figure><h4 id="6-logging-basicConfig-filemode-’w’-可以指定日志文件的模式，w表示每次清空日志文件，重新写入，a表示在日志文件后面追加，默认的模式为a"><a href="#6-logging-basicConfig-filemode-’w’-可以指定日志文件的模式，w表示每次清空日志文件，重新写入，a表示在日志文件后面追加，默认的模式为a" class="headerlink" title="6 logging.basicConfig(filemode=’w’) 可以指定日志文件的模式，w表示每次清空日志文件，重新写入，a表示在日志文件后面追加，默认的模式为a"></a>6 logging.basicConfig(filemode=’w’) 可以指定日志文件的模式，w表示每次清空日志文件，重新写入，a表示在日志文件后面追加，默认的模式为a</h4><p>将上述 5 中的实例代码再执行一次，demo.log中内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is debug log</span><br><span class="line">INFO:root:this is info log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br><span class="line">DEBUG:root:this is debug log</span><br><span class="line">INFO:root:this is info log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br></pre></td></tr></table></figure><p>若代码修改为如下，再执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">print(&quot;this is print log&quot;)</span><br><span class="line">logging.basicConfig(filename&#x3D;&quot;demo.log&quot;,filemode&#x3D;&#39;w&#39;,level&#x3D;logging.DEBUG)</span><br><span class="line">logging.debug(&quot;this is debug log&quot;)</span><br><span class="line">logging.info(&quot;this is info log&quot;)</span><br><span class="line">logging.warning(&quot;this is warning log&quot;)</span><br><span class="line">logging.error(&quot;this is error log&quot;)</span><br><span class="line">logging.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行后，demo.log中的内容又恢复到如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is debug log</span><br><span class="line">INFO:root:this is info log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br></pre></td></tr></table></figure><h4 id="7-logging-向日志中写入变量的方式"><a href="#7-logging-向日志中写入变量的方式" class="headerlink" title="7 logging 向日志中写入变量的方式"></a>7 logging 向日志中写入变量的方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level&#x3D;logging.DEBUG)</span><br><span class="line">name&#x3D;&quot;zhangsan&quot;</span><br><span class="line">age&#x3D;20</span><br><span class="line">logging.debug(&quot;name: %s age: %d&quot;,name,age)</span><br><span class="line">logging.info(&quot;name: %s age: %d&quot; %(name,age))</span><br><span class="line">logging.warning(&quot;name: &#123;&#125; age: &#123;&#125;&quot;.format(name,age))</span><br><span class="line">logging.error(&quot;name: &#123;name&#125; age: &#123;age&#125;&quot;.format(name&#x3D;name,age&#x3D;age))</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:name: zhangsan age: 20</span><br><span class="line">INFO:root:name: zhangsan age: 20</span><br><span class="line">WARNING:root:name: zhangsan age: 20</span><br><span class="line">ERROR:root:name: zhangsan age: 20</span><br></pre></td></tr></table></figure><h4 id="8-日志内容格式增加一些公共的内容"><a href="#8-日志内容格式增加一些公共的内容" class="headerlink" title="8 日志内容格式增加一些公共的内容"></a>8 日志内容格式增加一些公共的内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(format&#x3D;(&quot;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s&quot;),</span><br><span class="line">                    datefmt&#x3D;&quot;%Y-%m-%d_%H:%M:%S&quot;,</span><br><span class="line">                    level&#x3D;logging.DEBUG)</span><br><span class="line">name&#x3D;&quot;zhangsan&quot;</span><br><span class="line">age&#x3D;20</span><br><span class="line">logging.debug(&quot;name: %s age: %d&quot;,name,age)</span><br><span class="line">logging.info(&quot;name: %s age: %d&quot; %(name,age))</span><br><span class="line">logging.warning(&quot;name: &#123;&#125; age: &#123;&#125;&quot;.format(name,age))</span><br><span class="line">logging.error(&quot;name: &#123;name&#125; age: &#123;age&#125;&quot;.format(name&#x3D;name,age&#x3D;age))</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-08-03_07:20:42 | DEBUG | test1.py:9 | name: zhangsan age: 20</span><br><span class="line">2020-08-03_07:20:42 | INFO | test1.py:10 | name: zhangsan age: 20</span><br><span class="line">2020-08-03_07:20:42 | WARNING | test1.py:11 | name: zhangsan age: 20</span><br><span class="line">2020-08-03_07:20:42 | ERROR | test1.py:12 | name: zhangsan age: 20</span><br></pre></td></tr></table></figure><h4 id="9-logging的高级应用"><a href="#9-logging的高级应用" class="headerlink" title="9 logging的高级应用"></a>9 logging的高级应用</h4><p>logging模块采用了模块化设计，主要包含四种组件</p><ul><li>Loggers：记录器，提供应用程序代码能直接使用的接口</li><li>Handlers：处理器，将记录器产生的日志发送到目的地</li><li>Filters：过滤器，提供更好的粒度控制，决定哪些日志会被输出</li><li>格式化器：设置内置内容的组成结构和消息字段</li></ul><h4 id="10-logging的高级应用流程"><a href="#10-logging的高级应用流程" class="headerlink" title="10 logging的高级应用流程"></a>10 logging的高级应用流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">                             |---创建屏幕StreamHandler--设置日志等级---|</span><br><span class="line">创建一个logger并设置默认等级---|                                       |----创建formatter----用formatter渲染所有的hansdler----将所有的handler加入logger内----程序调用logger</span><br><span class="line">                             |---创建文件FileHandler--设置日志等级-----|</span><br></pre></td></tr></table></figure><h4 id="11-loggers记录器"><a href="#11-loggers记录器" class="headerlink" title="11 loggers记录器"></a>11 loggers记录器</h4><ul><li><p>提供应用程序的调用接口</p><p> logger=logging。getLogger(<strong>name</strong>)<br> logger是单例的</p></li><li><p>决定日志记录的级别</p><p> logger.setLevel()</p></li><li><p>将日志内容传递到相关联的handlers中</p><p> logger.addHandler()</p><p> logger。removeHandler()</p></li></ul><h4 id="12-handler处理器"><a href="#12-handler处理器" class="headerlink" title="12 handler处理器"></a>12 handler处理器</h4><ul><li><p>StreamHandler</p><p> 标准输出stdout（如显示器）分发器</p><p> 创建方法： sh=logging.StreamHandler(stream=None)</p></li><li><p>FileHandler</p><p> 将日志保存到磁盘文件的处理器</p><p> 创建方法：fh=logging.FileHandler(filename,mode=”a”,enconding=None,delay=False)</p></li><li><p>setFormatter(): 设置当前handler对象使用的消息格斯</p></li></ul><h4 id="13-常用的Handlers处理器"><a href="#13-常用的Handlers处理器" class="headerlink" title="13 常用的Handlers处理器"></a>13 常用的Handlers处理器</h4><ul><li>StreamHandler</li><li>FileHandler</li><li>BaseRotatingHandler</li><li>RotatingHandler</li><li>TimedRotatingFileHandler</li><li>SocketHandler</li><li>DatagramHandler</li><li>SMTPHandler</li><li>SysLogHandler</li><li>NTEventLogHandler</li><li>HTTPHandler</li><li>WatchedFileHandler</li><li>QueueHandler</li><li>NullHandler</li></ul><h4 id="14-常见的formatter格式"><a href="#14-常见的formatter格式" class="headerlink" title="14 常见的formatter格式"></a>14 常见的formatter格式</h4><table><thead><tr><th>属性</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>asctime</td><td>%(asctime)s</td><td>日志产生的时间，默认格式为2020-08-03 12.12.12,265</td></tr><tr><td>created</td><td>%(created)f</td><td>time.time()生成的日志创建时间戳</td></tr><tr><td>filename</td><td>%(filename)s</td><td>生成日志的程序名</td></tr><tr><td>funcName</td><td>%(funcName)s</td><td>调用日志的函数名</td></tr><tr><td>levelname</td><td>%(levelname)s</td><td>日志级别（DEBUG,INFO,WARNING,ERROR,CRITICAL)</td></tr><tr><td>levelno</td><td>%(levelno)s</td><td>日志级别对应的数值</td></tr><tr><td>lineno</td><td>%(lineno)s)</td><td>日志所针对的代码行号（如果可用的话）</td></tr><tr><td>module</td><td>%(module)s</td><td>生成日志的模块名</td></tr><tr><td>mesecs</td><td>%(mesecs)d</td><td>日志生成的时间的毫秒部分</td></tr><tr><td>message</td><td>%(message)s</td><td>具体的日志信息</td></tr><tr><td>name</td><td>%(name)s</td><td>日志调用者</td></tr><tr><td>pathname</td><td>%(pathname)s</td><td>生成日志的文件的完整路径</td></tr><tr><td>process</td><td>%(process)d</td><td>生成日志的进程id（如果可用）</td></tr><tr><td>processName</td><td>%(processName)s</td><td>进程名（如果可用）</td></tr><tr><td>thread</td><td>%(thread)d</td><td>生成日志的线程id（如果可用）</td></tr><tr><td>threadName</td><td>%(threadName)s</td><td>线程名（如果可用）</td></tr></tbody></table><h4 id="15-下面两段代码的功能是完全一样的，使用logging直接调info、debug等日志与实例化一个默认的root-logger是一样的，换言之，使用logging直接调日志方法的方式就是通过获取root日志来实现的"><a href="#15-下面两段代码的功能是完全一样的，使用logging直接调info、debug等日志与实例化一个默认的root-logger是一样的，换言之，使用logging直接调日志方法的方式就是通过获取root日志来实现的" class="headerlink" title="15 下面两段代码的功能是完全一样的，使用logging直接调info、debug等日志与实例化一个默认的root logger是一样的，换言之，使用logging直接调日志方法的方式就是通过获取root日志来实现的"></a>15 下面两段代码的功能是完全一样的，使用logging直接调info、debug等日志与实例化一个默认的root logger是一样的，换言之，使用logging直接调日志方法的方式就是通过获取root日志来实现的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.debug(&quot;this is debug log&quot;)</span><br><span class="line">logging.info(&quot;this is info log&quot;)</span><br><span class="line">logging.warning(&quot;this is warning log&quot;)</span><br><span class="line">logging.error(&quot;this is error log&quot;)</span><br><span class="line">logging.critical(&quot;this is critical log&quot;)</span><br><span class="line"></span><br><span class="line">logger&#x3D;logging.getLogger()</span><br><span class="line">logger.debug(&quot;this is debug log&quot;)</span><br><span class="line">logger.info(&quot;this is info log&quot;)</span><br><span class="line">logger.warning(&quot;this is warning log&quot;)</span><br><span class="line">logger.error(&quot;this is error log&quot;)</span><br><span class="line">logger.critical(&quot;this is critical log&quot;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br><span class="line">WARNING:root:this is warning log</span><br><span class="line">ERROR:root:this is error log</span><br><span class="line">CRITICAL:root:this is critical log</span><br></pre></td></tr></table></figure><h4 id="16-下面一段代码使用getLogger时指定一个名称，即实例化一个logger，然后设置两种处理器，分别往控制台和文件中写日志，还可以设置日志内容的格式，具体如下所示"><a href="#16-下面一段代码使用getLogger时指定一个名称，即实例化一个logger，然后设置两种处理器，分别往控制台和文件中写日志，还可以设置日志内容的格式，具体如下所示" class="headerlink" title="16 下面一段代码使用getLogger时指定一个名称，即实例化一个logger，然后设置两种处理器，分别往控制台和文件中写日志，还可以设置日志内容的格式，具体如下所示"></a>16 下面一段代码使用getLogger时指定一个名称，即实例化一个logger，然后设置两种处理器，分别往控制台和文件中写日志，还可以设置日志内容的格式，具体如下所示</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger&#x3D;logging.getLogger(&quot;test&quot;)</span><br><span class="line"></span><br><span class="line">console_handler&#x3D;logging.StreamHandler()</span><br><span class="line">console_handler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">file_handler&#x3D;logging.FileHandler(filename&#x3D;&quot;demo.log&quot;)</span><br><span class="line">file_handler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">formatter&#x3D;logging.Formatter(fmt&#x3D;&quot;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s&quot;)</span><br><span class="line"></span><br><span class="line">console_handler.setFormatter(formatter)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">log&#x3D;logger</span><br><span class="line"></span><br><span class="line">log.debug(&quot;this is debug log&quot;)</span><br><span class="line">log.info(&quot;this is info log&quot;)</span><br><span class="line">log.warning(&quot;this is warning log&quot;)</span><br><span class="line">log.error(&quot;this is error log&quot;)</span><br><span class="line">log.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-08-04 23:08:56,625 | WARNING | test1.py:25 | this is warning log</span><br><span class="line">2020-08-04 23:08:56,625 | ERROR | test1.py:26 | this is error log</span><br><span class="line">2020-08-04 23:08:56,625 | CRITICAL | test1.py:27 | this is critical log</span><br></pre></td></tr></table></figure><p>并且在demo.log日志文件中写入了如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-08-04 23:08:56,625 | WARNING | test1.py:25 | this is warning log</span><br><span class="line">2020-08-04 23:08:56,625 | ERROR | test1.py:26 | this is error log</span><br><span class="line">2020-08-04 23:08:56,625 | CRITICAL | test1.py:27 | this is critical log</span><br></pre></td></tr></table></figure><h4 id="17-上述-16-的日志打印明显与本来的期望是不一致的，本来期望控制台和文件都是设置了DEBUG级别，但实际上控制台和文件中都打印了Warning的级别的日志"><a href="#17-上述-16-的日志打印明显与本来的期望是不一致的，本来期望控制台和文件都是设置了DEBUG级别，但实际上控制台和文件中都打印了Warning的级别的日志" class="headerlink" title="17 上述 16 的日志打印明显与本来的期望是不一致的，本来期望控制台和文件都是设置了DEBUG级别，但实际上控制台和文件中都打印了Warning的级别的日志"></a>17 上述 16 的日志打印明显与本来的期望是不一致的，本来期望控制台和文件都是设置了DEBUG级别，但实际上控制台和文件中都打印了Warning的级别的日志</h4><p>这里需要注意的是，logger默认的日志级别是warning，而日志的最终级别将取决于logger和handler级别的最高级别，所以上述16中虽然控制台和文件handler的日志级别都设置了debug，但是因为logger默认级别是warning，所以最终打印的都是warning级别，下面一段代码将logger设置为debug级别，然后将控制台设置为info，将文件handler设置为warning，然后再看一下效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger&#x3D;logging.getLogger(&quot;test&quot;)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">console_handler&#x3D;logging.StreamHandler()</span><br><span class="line">console_handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">file_handler&#x3D;logging.FileHandler(filename&#x3D;&quot;demo.log&quot;)</span><br><span class="line">file_handler.setLevel(logging.WARNING)</span><br><span class="line"></span><br><span class="line">formatter&#x3D;logging.Formatter(fmt&#x3D;&quot;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s&quot;)</span><br><span class="line"></span><br><span class="line">console_handler.setFormatter(formatter)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">log&#x3D;logger</span><br><span class="line"></span><br><span class="line">log.debug(&quot;this is debug log&quot;)</span><br><span class="line">log.info(&quot;this is info log&quot;)</span><br><span class="line">log.warning(&quot;this is warning log&quot;)</span><br><span class="line">log.error(&quot;this is error log&quot;)</span><br><span class="line">log.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-08-04 23:21:37,888 | INFO | test1.py:25 | this is info log</span><br><span class="line">2020-08-04 23:21:37,888 | WARNING | test1.py:26 | this is warning log</span><br><span class="line">2020-08-04 23:21:37,888 | ERROR | test1.py:27 | this is error log</span><br><span class="line">2020-08-04 23:21:37,888 | CRITICAL | test1.py:28 | this is critical log</span><br></pre></td></tr></table></figure><p>而在demo.log日志文件中写入了如下内容，此时与上述分析一致了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-08-04 23:21:37,888 | WARNING | test1.py:26 | this is warning log</span><br><span class="line">2020-08-04 23:21:37,888 | ERROR | test1.py:27 | this is error log</span><br><span class="line">2020-08-04 23:21:37,888 | CRITICAL | test1.py:28 | this is critical log</span><br></pre></td></tr></table></figure><h4 id="18-定义filter并给控制台的handler加一个filter，过滤的name与日志名称不一致，如下代码，此时则不会往控制台写日志，但日志文件的日志还是正常写的"><a href="#18-定义filter并给控制台的handler加一个filter，过滤的name与日志名称不一致，如下代码，此时则不会往控制台写日志，但日志文件的日志还是正常写的" class="headerlink" title="18 定义filter并给控制台的handler加一个filter，过滤的name与日志名称不一致，如下代码，此时则不会往控制台写日志，但日志文件的日志还是正常写的"></a>18 定义filter并给控制台的handler加一个filter，过滤的name与日志名称不一致，如下代码，此时则不会往控制台写日志，但日志文件的日志还是正常写的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger&#x3D;logging.getLogger(&quot;test&quot;)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line">console_handler&#x3D;logging.StreamHandler()</span><br><span class="line">console_handler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line">file_handler&#x3D;logging.FileHandler(filename&#x3D;&quot;demo.log&quot;)</span><br><span class="line">file_handler.setLevel(logging.WARNING)</span><br><span class="line"></span><br><span class="line">formatter&#x3D;logging.Formatter(fmt&#x3D;&quot;%(asctime)s | %(levelname)s | %(filename)s:%(lineno)s | %(message)s&quot;)</span><br><span class="line"></span><br><span class="line">console_handler.setFormatter(formatter)</span><br><span class="line">file_handler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line"></span><br><span class="line">filter&#x3D;logging.Filter(&quot;test1&quot;)</span><br><span class="line">console_handler.addFilter(filter)</span><br><span class="line"></span><br><span class="line">log&#x3D;logger</span><br><span class="line"></span><br><span class="line">log.debug(&quot;this is debug log&quot;)</span><br><span class="line">log.info(&quot;this is info log&quot;)</span><br><span class="line">log.warning(&quot;this is warning log&quot;)</span><br><span class="line">log.error(&quot;this is error log&quot;)</span><br><span class="line">log.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>此时运行后控制台结果为空，日志文件如下日志打印正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-08-04 23:31:00,459 | WARNING | test1.py:29 | this is warning log</span><br><span class="line">2020-08-04 23:31:00,459 | ERROR | test1.py:30 | this is error log</span><br><span class="line">2020-08-04 23:31:00,459 | CRITICAL | test1.py:31 | this is critical log</span><br></pre></td></tr></table></figure><h4 id="19-配置文件的方式"><a href="#19-配置文件的方式" class="headerlink" title="19 配置文件的方式"></a>19 配置文件的方式</h4><ul><li>(1) 首先编写类似如下的log配置文件：logging.conf， 这里面定义了root和test两个logger<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[loggers]</span><br><span class="line">keys&#x3D;root,test</span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line">keys&#x3D;fileHandler,consoleHandler</span><br><span class="line"></span><br><span class="line">[formatters];</span><br><span class="line">keys&#x3D;simpleFormatter</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level&#x3D;DEBUG</span><br><span class="line">handlers&#x3D;consoleHandler</span><br><span class="line"></span><br><span class="line">[logger_test]</span><br><span class="line">level&#x3D;DEBUG</span><br><span class="line">handlers&#x3D;fileHandler,consoleHandler</span><br><span class="line">qualname&#x3D;test</span><br><span class="line">propagate&#x3D;0</span><br><span class="line"></span><br><span class="line">[handler_consoleHandler]</span><br><span class="line">class&#x3D;StreamHandler</span><br><span class="line">args&#x3D;(sys.stdout,)</span><br><span class="line">level&#x3D;DEBUG</span><br><span class="line">formatter&#x3D;simpleFormatter</span><br><span class="line"></span><br><span class="line">[handler_fileHandler]</span><br><span class="line">class&#x3D;handlers.TimedRotatingFileHandler</span><br><span class="line">args&#x3D;(&quot;test.log&quot;,&quot;midnight&quot;,1,0)</span><br><span class="line">level&#x3D;DEBUG</span><br><span class="line">formatter&#x3D;simpleFormatter</span><br><span class="line"></span><br><span class="line">[formatter_simpleFormatter]</span><br><span class="line">format&#x3D;%(asctime)s|%(levelname)s|%(filename)s[line:%(lineno)d]|%(message)s</span><br><span class="line">datafmt&#x3D;%Y-%m-%d_%H:%M:%S</span><br></pre></td></tr></table></figure></li><li>（2）然后在py文件中编写如下代码，这里演示了root的logger和test的logger两种的使用方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import logging.config</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(&quot;logging.conf&quot;)</span><br><span class="line">logger&#x3D;logging.getLogger(&quot;test&quot;)</span><br><span class="line"></span><br><span class="line">log&#x3D;logger</span><br><span class="line">log.debug(&quot;this is debug log&quot;)</span><br><span class="line">log.info(&quot;this is info log&quot;)</span><br><span class="line">log.warning(&quot;this is warning log&quot;)</span><br><span class="line">log.error(&quot;this is error log&quot;)</span><br><span class="line">log.critical(&quot;this is critical log&quot;)</span><br><span class="line"></span><br><span class="line">rlog&#x3D;logging.getLogger(&quot;root&quot;)</span><br><span class="line">rlog.debug(&quot;this is debug log&quot;)</span><br><span class="line">rlog.info(&quot;this is info log&quot;)</span><br><span class="line">rlog.warning(&quot;this is warning log&quot;)</span><br><span class="line">rlog.error(&quot;this is error log&quot;)</span><br><span class="line">rlog.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure>运行结果如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2020-08-05 00:25:02,673|DEBUG|test1.py[line:8]|this is debug log</span><br><span class="line">2020-08-05 00:25:02,674|INFO|test1.py[line:9]|this is info log</span><br><span class="line">2020-08-05 00:25:02,674|WARNING|test1.py[line:10]|this is warning log</span><br><span class="line">2020-08-05 00:25:02,674|ERROR|test1.py[line:11]|this is error log</span><br><span class="line">2020-08-05 00:25:02,674|CRITICAL|test1.py[line:12]|this is critical log</span><br><span class="line">2020-08-05 00:25:02,674|DEBUG|test1.py[line:15]|this is debug log</span><br><span class="line">2020-08-05 00:25:02,674|INFO|test1.py[line:16]|this is info log</span><br><span class="line">2020-08-05 00:25:02,674|WARNING|test1.py[line:17]|this is warning log</span><br><span class="line">2020-08-05 00:25:02,674|ERROR|test1.py[line:18]|this is error log</span><br><span class="line">2020-08-05 00:25:02,674|CRITICAL|test1.py[line:19]|this is critical log</span><br></pre></td></tr></table></figure>同时在test.log日志文件中生成如下日志：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-08-05 00:25:02,673|DEBUG|test1.py[line:8]|this is debug log</span><br><span class="line">2020-08-05 00:25:02,674|INFO|test1.py[line:9]|this is info log</span><br><span class="line">2020-08-05 00:25:02,674|WARNING|test1.py[line:10]|this is warning log</span><br><span class="line">2020-08-05 00:25:02,674|ERROR|test1.py[line:11]|this is error log</span><br><span class="line">2020-08-05 00:25:02,674|CRITICAL|test1.py[line:12]|this is critical log</span><br></pre></td></tr></table></figure></li></ul><h4 id="20-在上述19的基础上，加入在其他文件中想使用建好的log系统进行日志的打印，有如下两种使用方法："><a href="#20-在上述19的基础上，加入在其他文件中想使用建好的log系统进行日志的打印，有如下两种使用方法：" class="headerlink" title="20 在上述19的基础上，加入在其他文件中想使用建好的log系统进行日志的打印，有如下两种使用方法："></a>20 在上述19的基础上，加入在其他文件中想使用建好的log系统进行日志的打印，有如下两种使用方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import test1</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log&#x3D;logging.getLogger(&quot;test&quot;)</span><br><span class="line"></span><br><span class="line">log.debug(&quot;this is debug log&quot;)</span><br><span class="line">log.info(&quot;this is info log&quot;)</span><br><span class="line">log.warning(&quot;this is warning log&quot;)</span><br><span class="line">log.error(&quot;this is error log&quot;)</span><br><span class="line">log.critical(&quot;this is critical log&quot;)</span><br><span class="line"></span><br><span class="line">log&#x3D;test1.logger</span><br><span class="line"></span><br><span class="line">log.debug(&quot;this is debug log&quot;)</span><br><span class="line">log.info(&quot;this is info log&quot;)</span><br><span class="line">log.warning(&quot;this is warning log&quot;)</span><br><span class="line">log.error(&quot;this is error log&quot;)</span><br><span class="line">log.critical(&quot;this is critical log&quot;)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2020-08-05_00:31:35|DEBUG|test2.py[line:8]|this is debug log</span><br><span class="line">2020-08-05_00:31:35|INFO|test2.py[line:9]|this is info log</span><br><span class="line">2020-08-05_00:31:35|WARNING|test2.py[line:10]|this is warning log</span><br><span class="line">2020-08-05_00:31:35|ERROR|test2.py[line:11]|this is error log</span><br><span class="line">2020-08-05_00:31:35|CRITICAL|test2.py[line:12]|this is critical log</span><br><span class="line">2020-08-05_00:31:35|DEBUG|test2.py[line:16]|this is debug log</span><br><span class="line">2020-08-05_00:31:35|INFO|test2.py[line:17]|this is info log</span><br><span class="line">2020-08-05_00:31:35|WARNING|test2.py[line:18]|this is warning log</span><br><span class="line">2020-08-05_00:31:35|ERROR|test2.py[line:19]|this is error log</span><br><span class="line">2020-08-05_00:31:35|CRITICAL|test2.py[line:20]|this is critical log</span><br></pre></td></tr></table></figure><p>日志文件中也生成了对应的日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2020-08-05_00:31:35|DEBUG|test2.py[line:8]|this is debug log</span><br><span class="line">2020-08-05_00:31:35|INFO|test2.py[line:9]|this is info log</span><br><span class="line">2020-08-05_00:31:35|WARNING|test2.py[line:10]|this is warning log</span><br><span class="line">2020-08-05_00:31:35|ERROR|test2.py[line:11]|this is error log</span><br><span class="line">2020-08-05_00:31:35|CRITICAL|test2.py[line:12]|this is critical log</span><br><span class="line">2020-08-05_00:31:35|DEBUG|test2.py[line:16]|this is debug log</span><br><span class="line">2020-08-05_00:31:35|INFO|test2.py[line:17]|this is info log</span><br><span class="line">2020-08-05_00:31:35|WARNING|test2.py[line:18]|this is warning log</span><br><span class="line">2020-08-05_00:31:35|ERROR|test2.py[line:19]|this is error log</span><br><span class="line">2020-08-05_00:31:35|CRITICAL|test2.py[line:20]|this is critical log</span><br></pre></td></tr></table></figure><h4 id="21-在try-except语句块中，打印异常日志可以使用log-exception-e-，这个函数可以将程序错误调用栈打印出来"><a href="#21-在try-except语句块中，打印异常日志可以使用log-exception-e-，这个函数可以将程序错误调用栈打印出来" class="headerlink" title="21 在try - except语句块中，打印异常日志可以使用log.exception(e)，这个函数可以将程序错误调用栈打印出来"></a>21 在try - except语句块中，打印异常日志可以使用log.exception(e)，这个函数可以将程序错误调用栈打印出来</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import logging.config</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(&quot;logging.conf&quot;)</span><br><span class="line">logger&#x3D;logging.getLogger(&quot;test&quot;)</span><br><span class="line"></span><br><span class="line">log&#x3D;logger</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    a&#x3D;1&#x2F;0</span><br><span class="line">except Exception as e:</span><br><span class="line">    log.exception(e)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-08-05_00:35:14|ERROR|test1.py[line:12]|division by zero</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;G:&#x2F;lamb_source&#x2F;test&#x2F;log&#x2F;test1.py&quot;, line 10, in &lt;module&gt;</span><br><span class="line">    a&#x3D;1&#x2F;0</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python专题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python专题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(9)--变量与运算符</title>
      <link href="/blog/2020/07/30/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(9)--%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/blog/2020/07/30/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(9)--%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="1-python-合法标识符"><a href="#1-python-合法标识符" class="headerlink" title="1 python 合法标识符"></a>1 python 合法标识符</h4><ul><li>(1) 变量定义，python中变量不需要声明类型，可以直接对变量进行赋值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; age&#x3D;10</span><br><span class="line">&gt;&gt;&gt; names&#x3D;[&quot;a&quot;,&quot;b&quot;]</span><br></pre></td></tr></table></figure></li><li>（2） python中合法标识符有字母，数字和下划线，其中标识符的开头不能是数字<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;1</span><br><span class="line">&gt;&gt;&gt; a1&#x3D;1</span><br><span class="line">&gt;&gt;&gt; a1b&#x3D;1</span><br><span class="line">&gt;&gt;&gt; a_&#x3D;1</span><br><span class="line">&gt;&gt;&gt; _a&#x3D;1</span><br><span class="line">&gt;&gt;&gt; _1&#x3D;2</span><br><span class="line">&gt;&gt;&gt; _a1&#x3D;1</span><br><span class="line">&gt;&gt;&gt; 1a&#x3D;1</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    1a&#x3D;1</span><br><span class="line">     ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(8)--python的基本类型-字典</title>
      <link href="/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(8)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E5%85%B8/"/>
      <url>/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(8)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-字典的dict的定义与特点"><a href="#1-字典的dict的定义与特点" class="headerlink" title="1 字典的dict的定义与特点"></a>1 字典的dict的定义与特点</h4><ul><li>（1）字典也是用花括号括起来的，与集合不同的是字典中的元素都是key-value对<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;dict&#39;&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-dict-常用的运算"><a href="#2-dict-常用的运算" class="headerlink" title="2 dict 常用的运算"></a>2 dict 常用的运算</h4><ul><li><p>（1）字典取元素时通过key来取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">&gt;&gt;&gt; a[&quot;a&quot;]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[&quot;b&quot;]</span><br><span class="line">2</span><br></pre></td></tr></table></figure></li><li><p>（2）len() 函数计算字典中key-value对的数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>（3）max() 函数计算字典中key的最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">&#39;d&#39;</span><br></pre></td></tr></table></figure></li><li><p>（4）min() 函数计算字典中key的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">&#39;a&#39;</span><br></pre></td></tr></table></figure></li><li><p>（5） in, not in 针对字典的key判断字典中是否有给定的key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#39;a&#39;: 10, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 5&#125;</span><br><span class="line">&gt;&gt;&gt; &quot;a&quot; in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 10 in a</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;b&quot; in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 10 not in a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-字典中常用函数"><a href="#3-字典中常用函数" class="headerlink" title="3 字典中常用函数"></a>3 字典中常用函数</h4><ul><li><p>（1）clear() ，将字典清空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">&gt;&gt;&gt; a.clear()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>（2）copy() 返回字典的一个浅拷贝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:[1,2,3]&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.copy()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: [1, 2, 3]&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: [1, 2, 3]&#125;</span><br><span class="line">&gt;&gt;&gt; a[&quot;b&quot;].append(4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: [1, 2, 3, 4]&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: [1, 2, 3, 4]&#125;</span><br><span class="line">&gt;&gt;&gt; a[&quot;a&quot;]&#x3D;100</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 100, &#39;b&#39;: [1, 2, 3, 4]&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: [1, 2, 3, 4]&#125;</span><br></pre></td></tr></table></figure></li><li><p>（3）fromkeys(iterable,value=None), 从iterable中的值作为键创建新的字典，每个键对应的值为value，不指定时默认为None</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;dict.fromkeys(a)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;1: None, 2: None, 3: None, 4: None, 5: None&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;dict.fromkeys(a,100)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&#123;1: 100, 2: 100, 3: 100, 4: 100, 5: 100&#125;</span><br></pre></td></tr></table></figure></li><li><p>（4）get(key,default=None)，从字典中取给定key对应的值，如果字典中没有此key，则可以通过default给定默认值，如果默认值不给定，则默认为None</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:5&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.get(&quot;a&quot;)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.get(&quot;a&quot;,10)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.get(&quot;f&quot;)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.get(&quot;f&quot;,100)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">100</span><br></pre></td></tr></table></figure></li><li><p>（5）pop(key,default=None) 从字典中弹出给定key对应的值，若key在字典中找不到，则返回default指定的值，如果key在字典中找不到，default也未指定，则报KeyError异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop(&quot;a&quot;)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop(&quot;f&quot;,100)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">100</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, &#39;e&#39;: 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop(&quot;f&quot;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: &#39;f&#39;</span><br></pre></td></tr></table></figure></li><li><p>（6）update(list or dict), 将一个二元组的列表或者字典更新至现有的字典中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;&quot;c&quot;:3,&quot;d&quot;:4&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;&#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; a.update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;&#39;c&#39;: 3, &#39;d&#39;: 4&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;[(1,2),(3,4)]</span><br><span class="line">&gt;&gt;&gt; a.update(c)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#39;a&#39;: 1, &#39;b&#39;: 2, &#39;c&#39;: 3, &#39;d&#39;: 4, 1: 2, 3: 4&#125;</span><br></pre></td></tr></table></figure></li><li><p>（7）popitem() 从字典中弹出一个（key，value）二元组，若字典为空字典，则报KeyError异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1:2,3:4,5:6&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1: 2, 3: 4, 5: 6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.popitem()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">(5, 6)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1: 2, 3: 4&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;a.popitem()</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">(3, 4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1: 2&#125;</span><br><span class="line">&gt;&gt;&gt; d&#x3D;a.popitem()</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">(1, 2)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;&#125;</span><br><span class="line">&gt;&gt;&gt; e&#x3D;a.popitem()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: &#39;popitem(): dictionary is empty&#39;</span><br></pre></td></tr></table></figure></li><li><p>（8）setdefault(key,default=None) 如果字典中不存在key，则将此key default加入字典中，如果字典中存在此key，则将key对应的value返回，否则返回设置的默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1:2,3:4&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.setdefault(2)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1: 2, 3: 4, 2: None&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.setdefault(4,5)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1: 2, 3: 4, 2: None, 4: 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.setdefault(1,100)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1: 2, 3: 4, 2: None, 4: 5&#125;</span><br></pre></td></tr></table></figure></li><li><p>（9）keys() 返回字典key列表的一个对象，可通过list方法转换为key的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.keys()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">dict_keys([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])</span><br><span class="line">&gt;&gt;&gt; type(b)</span><br><span class="line">&lt;class &#39;dict_keys&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; list(b)</span><br><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（10）values() 返回字典value列表的一个对象，可通过list方法转换为value的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.values()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">dict_values([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; type(b)</span><br><span class="line">&lt;class &#39;dict_values&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; list(b)</span><br><span class="line">[1, 2, 3]</span><br></pre></td></tr></table></figure></li><li><p>（11）items() 返回字典value-value对二元组的一个对象，可通过list方法转换为key-value的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.items()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">dict_items([(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3)])</span><br><span class="line">&gt;&gt;&gt; type(b)</span><br><span class="line">&lt;class &#39;dict_items&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; list(b)</span><br><span class="line">[(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3)]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(7)--python的基本类型-集合</title>
      <link href="/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(7)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E9%9B%86%E5%90%88/"/>
      <url>/blog/2020/07/23/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(7)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h4 id="1-集合的定义和特点"><a href="#1-集合的定义和特点" class="headerlink" title="1 集合的定义和特点"></a>1 集合的定义和特点</h4><ul><li>（1） 集合是用花括号括起来的，集合的特点是元素没有顺序，元素具有唯一性，不能重复<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;set&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-集合的常用运算"><a href="#2-集合的常用运算" class="headerlink" title="2 集合的常用运算"></a>2 集合的常用运算</h4><ul><li><p>（1）集合元素没有顺序，所以不能像列表和元组那样用下标取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#39;set&#39; object is not subscriptable</span><br></pre></td></tr></table></figure></li><li><p>（2）集合也不支持加法运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [1,2,3]*3</span><br><span class="line">[1, 2, 3, 1, 2, 3, 1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; &#123;1,2,3&#125;+&#123;4,5,6&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unsupported operand type(s) for +: &#39;set&#39; and &#39;set&#39;</span><br></pre></td></tr></table></figure></li><li><p>（3）len() 函数返回集合的长度，即集合中元素的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">5</span><br></pre></td></tr></table></figure></li><li><p>（4）max() 函数返回集合中元素的最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">5</span><br></pre></td></tr></table></figure></li><li><p>（5）min() 函数返回集合中元素的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>（6）”-“表示两个集合差集，A-B，即在A中不在B中的元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a-b</span><br><span class="line">&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure></li><li><p>（7） “|”表示两个集合的并集，A | B， 表示A，B中所有元素的集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; a | b</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br></pre></td></tr></table></figure></li><li><p>（8） “&amp;”表示两个集合的交集，A &amp; B，表示既在A中又在B中的集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a &amp; b</span><br><span class="line">&#123;4, 5, 6&#125;</span><br></pre></td></tr></table></figure></li><li><p>（9） in，not in 判断集合中是否有某一元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; 0 in a</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 0 not in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 3 in a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（10） sum() 返回集合中所有元素之和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; sum(a)</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-集合常用的函数"><a href="#3-集合常用的函数" class="headerlink" title="3 集合常用的函数"></a>3 集合常用的函数</h4><ul><li><p>（1） add(elem) 向集合中增加一个元素，如果此元素已经存在于集合中，则不作任何处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; a.add(4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br><span class="line">&gt;&gt;&gt; a.add(1)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure></li><li><p>（2） clear() 清除集合中的所有元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&gt;&gt;&gt; a.clear()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">set()</span><br></pre></td></tr></table></figure></li><li><p>（3）copy() 返回集合的一个浅拷贝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.copy()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure></li><li><p>（4）pop() 从集合中弹出一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;2, 3, 4, 5&#125;</span><br></pre></td></tr></table></figure></li><li><p>（5）remove(elem) 从集合中去除某元素,若集合中没有此元素则会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; a.remove(3)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 4, 5&#125;</span><br><span class="line">&gt;&gt;&gt; a.remove(7)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: 7</span><br></pre></td></tr></table></figure></li><li><p>（6）union(set) 计算两个集合的合集,并返回一个新的集合，原来的两个集合没有变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;3,4,5,6,7,8&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;a.union(b)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;3, 4, 5, 6, 7, 8&#125;</span><br></pre></td></tr></table></figure></li><li><p>（7）update(set) 将set集合与原集合计算并集，并更新至原集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;3,4,5,6,7,8&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&gt;&gt;&gt; a.update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;3, 4, 5, 6, 7, 8&#125;</span><br></pre></td></tr></table></figure></li><li><p>（8）difference(set) 计算集合的差集，和“-”运算符一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a.difference(b)</span><br><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（9）difference_update(set) 计算差集，将结果更新至原集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.difference_update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（10）discard(elem) 与remove(elem)功能一致，只不过discard移除的元素若不存在，不会报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; a.discard(4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; a.discard(10)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 5, 6&#125;</span><br></pre></td></tr></table></figure></li><li><p>（11）intersection(set) 计算两个集合的交集，结果生成新的集合，原有的集合不变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.intersection(b)</span><br><span class="line">&#123;4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（12）intersection_update(set) 计算两个交集，结果更新至原有集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.intersection_update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（13）isdisjoint(set) 判断两个是否有公共元素，若没有返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;&#123;7,8,9,0&#125;</span><br><span class="line">&gt;&gt;&gt; a.isdisjoint(b)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; a.isdisjoint(c)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（14）issubset(set) 判断是否为子集，若是set的子集，返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;1,2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; a.issubset(b)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; c&#x3D;&#123;2,3,4,5&#125;</span><br><span class="line">&gt;&gt;&gt; a.issubset(c)</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（15）issuperset(set) 判断是否为超集，若是返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;1,2,3,4&#125;</span><br><span class="line">&gt;&gt;&gt; c&#x3D;&#123;1,2,3,4,5,6,7,8&#125;</span><br><span class="line">&gt;&gt;&gt; a.issuperset(b)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.issuperset(c)</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（17）symmetric_difference(set) 返回两个集合的不重复的元素，原有的集合不变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.symmetric_difference(b)</span><br><span class="line">&#123;1, 2, 3, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li><li><p>（17）symmetric_difference_update(set) 返回两个集合的不重复的元素，并将结果更新至原有集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&#123;1,2,3,4,5,6&#125;</span><br><span class="line">&gt;&gt;&gt; b&#x3D;&#123;4,5,6,7,8,9&#125;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; a.symmetric_difference_update(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#123;1, 2, 3, 7, 8, 9&#125;</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&#123;4, 5, 6, 7, 8, 9&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(6)--python的基本类型-元组</title>
      <link href="/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(6)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%85%83%E7%BB%84/"/>
      <url>/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(6)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%85%83%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h4 id="1-元组的定义及特点"><a href="#1-元组的定义及特点" class="headerlink" title="1 元组的定义及特点"></a>1 元组的定义及特点</h4><ul><li><p>（1）元组的定义，使用小括号括起来(),也可以直接赋给多个值，如果一个值在后面加一个逗号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4)</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;1,2,3</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">(1, 2, 3)</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;1,</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">(1,)</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;tuple&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（2）元组是不可变的，不能对元组的元素进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[1]&#x3D;100</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#39;tuple&#39; object does not support item assignment</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-元组的常用运算"><a href="#2-元组的常用运算" class="headerlink" title="2 元组的常用运算"></a>2 元组的常用运算</h4><ul><li><p>（1）元组中元素可以通过位置下标来方位，第一个元素的下标为0，下标不可超过元素的长度范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[5]</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; a[7]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: tuple index out of range</span><br></pre></td></tr></table></figure></li><li><p>（2）元组中元素的下标可以是负数，负数表示从右边开始标记，-1表示最后一个元素，-2表示倒数第二个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[-1]</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; a[-2]</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a[-6]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[-7]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: tuple index out of range</span><br></pre></td></tr></table></figure></li><li><p>（3）元组中的元素可以通过切片操作获取元组的一部分，切片操作坚持左闭右开原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[0:4]</span><br><span class="line">(1, 2, 3, 4)</span><br><span class="line">&gt;&gt;&gt; a[4:5]</span><br><span class="line">(5,)</span><br></pre></td></tr></table></figure></li><li><p>（4）元组的切片操作第二个参数可以超过元组的长度，超出元组的长度时默认取到最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[2:6]</span><br><span class="line">(3, 4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; a[2:10]</span><br><span class="line">(3, 4, 5, 6)</span><br></pre></td></tr></table></figure></li><li><p>（5）元组的切片操作第一个和第二个参数都可以省略，第一个参数省略时表示左侧从第一个元素开始取，第二个参数<br>省略时表示右侧取到最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[:4]</span><br><span class="line">(1, 2, 3, 4)</span><br><span class="line">&gt;&gt;&gt; a[3:]</span><br><span class="line">(4, 5, 6)</span><br><span class="line">&gt;&gt;&gt; a[:]</span><br><span class="line">(1, 2, 3, 4, 5, 6)</span><br></pre></td></tr></table></figure></li><li><p>（6）元组的切片操作第一个参数表示的位置可以在第二个参数表示的位置的右侧，此时返回为一个空元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; a[5:1]</span><br><span class="line">()</span><br><span class="line">&gt;&gt;&gt; a[-1:-3]</span><br><span class="line">()</span><br></pre></td></tr></table></figure></li><li><p>（7）元素的切片操作还可以有第三个参数，表示步长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6,7,8,9,0)</span><br><span class="line">&gt;&gt;&gt; a[1:9:3]</span><br><span class="line">(2, 5, 8)</span><br><span class="line">&gt;&gt;&gt; a[::-1]</span><br><span class="line">(0, 9, 8, 7, 6, 5, 4, 3, 2, 1)</span><br></pre></td></tr></table></figure></li><li><p>（8）len()函数返回元组长度，即元素的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li><li><p>（9）max()函数返回元组中元素的最大值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li><li><p>（10）min()函数返回元组中的元素的最小值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">1</span><br></pre></td></tr></table></figure></li><li><p>（11）sum()函数返回元祖中的所有元素之和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5)</span><br><span class="line">&gt;&gt;&gt; sum(a)</span><br><span class="line">15</span><br></pre></td></tr></table></figure></li><li><p>（12）in, not in 判断元组中是否包含某元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,5,6)</span><br><span class="line">&gt;&gt;&gt; 0 in a</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 0 not in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 4 in a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（13）两个元组可以用加号，加起来，形成一个新的元组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; (1,2,3)+(1,2,3)</span><br><span class="line">(1, 2, 3, 1, 2, 3)</span><br></pre></td></tr></table></figure></li><li><p>（14）元组也可以乘以一个数字将现有元组的元素复制多倍构造新的元组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; (1,2,3)*3</span><br><span class="line">(1, 2, 3, 1, 2, 3, 1, 2, 3)</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-元组中常用的函数"><a href="#3-元组中常用的函数" class="headerlink" title="3 元组中常用的函数"></a>3 元组中常用的函数</h4><p>因为元组是不可变的，元组中的元素不可修改，所以元组的可用函数就很少了，只有count和index两个</p><ul><li>（1）count(value) 返回元组中元素的个数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,2,1,2,3,2,1)</span><br><span class="line">&gt;&gt;&gt; a.count(1)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; a.count(4)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li>（2）index(value, start=0, stop=9223372036854775807) 返回查询到的第一个元素的位置索引值，可以指定查询的起始和结束位置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;(1,2,3,4,3,2,1,2,3,4)</span><br><span class="line">&gt;&gt;&gt; a.index(3)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a.index(3,3)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a.index(3,5,8)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: tuple.index(x): x not in tuple</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(5)--python的基本类型-列表</title>
      <link href="/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%88%97%E8%A1%A8/"/>
      <url>/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(5)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-列表定义及特点"><a href="#1-列表定义及特点" class="headerlink" title="1 列表定义及特点"></a>1 列表定义及特点</h4><ul><li><p>（1）列表是用[]括起来的元素列表，类似于其他编程语言种的数组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;haha&quot;]</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（2）python中列表中的元素时可以不同类型的（其他编程语言种数组中的所有元素必须为同一类型）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,&quot;hello&quot;,&quot;world&quot;]</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;list&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,&quot;hello&quot;,&quot;world&quot;,[4,5,6]]</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#39;list&#39;&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-列表中的基本运算"><a href="#2-列表中的基本运算" class="headerlink" title="2 列表中的基本运算"></a>2 列表中的基本运算</h4><ul><li><p>（1）列表可以通过下标索引取列表中的元素，索引从0开始，不能超出列表的长度范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a[0]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[4]</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a[5]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure></li><li><p>（2）取列表元素的索引值可以是负数，负数时表示从右边开始计数，比如-1表示最后面一个，-2表示倒数第二个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a[-1]</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a[-2]</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a[-5]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a[-6]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure></li><li><p>（3）列表可以通过切片取出列表中的一部分元素，切片坚持左闭右开原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6,7,8,9]</span><br><span class="line">&gt;&gt;&gt; a[0:3]</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; a[5:8]</span><br><span class="line">[6, 7, 8]</span><br><span class="line">&gt;&gt;&gt; a[0:8]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure></li><li><p>（4）列表的切片操作中第一个参数或者第二个参数是可以省略的，第一个参数省略时表示从第一个开始，第二个参数省略时表示右侧取到最后一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6,7,8,9]</span><br><span class="line">&gt;&gt;&gt; a[:4]</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; a[5:]</span><br><span class="line">[6, 7, 8, 9]</span><br><span class="line">&gt;&gt;&gt; a[:]</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure></li><li><p>（5）列表的切片操作中第二参数的可以超出列表的长度，超出后默认取到最后一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a[3:10]</span><br><span class="line">[4, 5]</span><br></pre></td></tr></table></figure></li><li><p>（6）列表的切片操作第一个参数表示的位置可以在第二个参数表示的位置的右侧，此时返回值为空列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a[4:1]</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; a[-1:4]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li><li><p>（7）列表的切片操作可以有三个参数，第二个参数表示步长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6,7,8,9]</span><br><span class="line">&gt;&gt;&gt; a[0:5:2]</span><br><span class="line">[1, 3, 5]</span><br><span class="line">&gt;&gt;&gt; a[2:8:4]</span><br><span class="line">[3, 7]</span><br></pre></td></tr></table></figure></li><li><p>（8）len()函数可以计算列表的元素个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[]</span><br><span class="line">&gt;&gt;&gt; len(a)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li><p>（9）max()函数返回列表中最大元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;ok&quot;]</span><br><span class="line">&gt;&gt;&gt; max(a)</span><br><span class="line">&#39;world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（10）min()函数返回列表中最小元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;ok&quot;]</span><br><span class="line">&gt;&gt;&gt; min(a)</span><br><span class="line">&#39;hello&#39;</span><br></pre></td></tr></table></figure></li><li><p>（11）sum()函数返回列表中所有元素之和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; sum(a)</span><br><span class="line">15</span><br></pre></td></tr></table></figure></li><li><p>（12）in ，not in 判断列表中是否有某元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; 0 in a</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; 0 not in a</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 1 in a</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（13）两个列表可以用加号连接起来构造一下新的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [1,2,3]+[4,5,6]</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure></li><li><p>（14）列表可以乘以一个整数来对现有列表进行元素数数倍复制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; [1,2,3]*3</span><br><span class="line">[1, 2, 3, 1, 2, 3, 1, 2, 3]</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-列表中的常用函数"><a href="#3-列表中的常用函数" class="headerlink" title="3 列表中的常用函数"></a>3 列表中的常用函数</h4><ul><li><p>（1）append(obj) 向列表中增加一个元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3]</span><br><span class="line">&gt;&gt;&gt; a.append(4)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; a.append(&quot;hello&quot;)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, &#39;hello&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（2）clear() 清空列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3]</span><br><span class="line">&gt;&gt;&gt; a.clear()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li><li><p>（3）copy() 返回列表的一个浅拷贝，浅拷贝需要注意的是如果列表中的元素时可变元素，则返回的copy的元素会跟着原来的列表变化而变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,[5,6,7]]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.copy()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, [5, 6, 7]]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[1, 2, 3, [5, 6, 7]]</span><br><span class="line">&gt;&gt;&gt; a[3].append(8)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, [5, 6, 7, 8]]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[1, 2, 3, [5, 6, 7, 8]]</span><br><span class="line">&gt;&gt;&gt; a[1]&#x3D;100</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 100, 3, [5, 6, 7, 8]]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[1, 2, 3, [5, 6, 7, 8]]</span><br></pre></td></tr></table></figure></li><li><p>（4）count(value) 返回列表中给定的参数值的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,3,2,3,4,3,2,1,3,4,2]</span><br><span class="line">&gt;&gt;&gt; a.count(2)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a.count(3)</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; a.count(0)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li><p>（5）index(value,start=0,stop=9223372036854775807) 返回列表中某个值的位置索引，如果不存在则报ValueError</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6,7,8,9,0]</span><br><span class="line">&gt;&gt;&gt; a.index(1)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; a.index(1,3,5)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: 1 is not in list</span><br><span class="line">&gt;&gt;&gt; a.index(5,3,5)</span><br><span class="line">4</span><br></pre></td></tr></table></figure></li><li><p>（6）insert(index,obj) 向列表中的指定位置插入数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a.insert(0,100)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[100, 1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; a.insert(3,300)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[100, 1, 2, 300, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; a.insert(7,700)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[100, 1, 2, 300, 3, 4, 5, 700]</span><br></pre></td></tr></table></figure></li><li><p>（7）pop(index=-1) 弹出列表中指定位置的元素，如不指定默认弹出最后一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5,6]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop()</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, 5]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;a.pop(3)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 5]</span><br></pre></td></tr></table></figure></li><li><p>（8）remove(value) 删除列表中的第一个与给定值一致的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,3,2,1,2,3]</span><br><span class="line">&gt;&gt;&gt; a.remove(2)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 3, 4, 3, 2, 1, 2, 3]</span><br></pre></td></tr></table></figure></li><li><p>（9）reverse() 将列表中的元素反转</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4,5]</span><br><span class="line">&gt;&gt;&gt; a.reverse()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[5, 4, 3, 2, 1]</span><br><span class="line">&gt;&gt;&gt; a.reverse()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4, 5]</span><br></pre></td></tr></table></figure></li><li><p>（10）sort(key=None,reverse=False) 对列表元素进行排序，如果reverse不指定则默认升序，若设置为True<br>则为降序,key 可以自定义排序规则,其中，可以为一个函数，作用于列表的每个元素，按照返回值的的大小对原数据进行排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3,4]</span><br><span class="line">&gt;&gt;&gt; a.sort()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, 4]</span><br><span class="line">&gt;&gt;&gt; a.sort(reverse&#x3D;True)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[4, 3, 2, 1]</span><br><span class="line">&gt;&gt;&gt; def func(a):</span><br><span class="line">...     return len(a)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; def func2(a):</span><br><span class="line">...     return a[0]</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;ha&quot;,&quot;hehehehe&quot;,&quot;ok&quot;]</span><br><span class="line">&gt;&gt;&gt; a.sort(key&#x3D;func)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[&#39;ha&#39;, &#39;ok&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;hehehehe&#39;]</span><br><span class="line">&gt;&gt;&gt; a.sort(key&#x3D;func2)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[&#39;hello&#39;, &#39;ha&#39;, &#39;hehehehe&#39;, &#39;ok&#39;, &#39;world&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（11） extend(iterable) 将一个列表合并到当前列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[1,2,3]</span><br><span class="line">&gt;&gt;&gt; b&#x3D;[&quot;hello&quot;,&quot;world&quot;]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.extend(b)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; b.extend(a)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, 1, 2, 3, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[1, 2, 3, &#39;hello&#39;, &#39;world&#39;]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(4)--python的基本类型-字符串</title>
      <link href="/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(4)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="1-字符串的表示方法"><a href="#1-字符串的表示方法" class="headerlink" title="1 字符串的表示方法"></a>1 字符串的表示方法</h4><ul><li><p>（1）字符串可以使用单引号，双引号，三个单引号，单个双引号表示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;hello world&#39;</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;&quot;hello world</span><br><span class="line">... hello world</span><br><span class="line">... hello world</span><br><span class="line">... &quot;&quot;&quot;</span><br><span class="line">&#39;hello world\nhello world\nhello world\n&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#39;&#39;hello world</span><br><span class="line">... hello world</span><br><span class="line">... hello world</span><br><span class="line">... &#39;&#39;&#39;</span><br><span class="line">&#39;hello world\nhello world\nhello world\n&#39;</span><br></pre></td></tr></table></figure></li><li><p>（2）字符串中若有双引号，可以采用单引号嵌套双引号的方式，也可以采用后面要讲的转义的部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;he said:&quot;hello world&quot;&#39;</span><br><span class="line">&#39;he said:&quot;hello world&quot;&#39;</span><br></pre></td></tr></table></figure><h4 id="2-转义字符"><a href="#2-转义字符" class="headerlink" title="2 转义字符"></a>2 转义字符</h4></li><li><p>（1）常用的转义字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\n   换行</span><br><span class="line">\\   \</span><br><span class="line">\t   制表符</span><br><span class="line">\&quot;   &quot;</span><br><span class="line">\&#39;   &#39;</span><br></pre></td></tr></table></figure></li><li><p>（2）字符串中使用转义举例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;hello \\n world&quot;)</span><br><span class="line">hello \n world</span><br><span class="line">&gt;&gt;&gt; print(&quot;hello \&quot;Tom\&quot;&quot;)</span><br><span class="line">hello &quot;Tom&quot;</span><br><span class="line">&gt;&gt;&gt; print(&quot;hello\tworld&quot;)</span><br><span class="line">hello   world</span><br><span class="line">&gt;&gt;&gt; print(&quot;hello\nworld&quot;)</span><br><span class="line">hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure></li><li><p>（3）在Windows操作系统上使用文件路径时要特别小心，注意使用转义符对\进行转义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;C:\north\nrothwest&quot;)</span><br><span class="line">C:</span><br><span class="line">orth</span><br><span class="line">rothwest</span><br><span class="line">&gt;&gt;&gt; print(&quot;C:\\north\\northwest&quot;)</span><br><span class="line">C:\north\northwest</span><br><span class="line">&gt;&gt;&gt; print(r&quot;C:\north\northwest&quot;)</span><br><span class="line">C:\north\northwest</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="2-字符串的常用运算"><a href="#2-字符串的常用运算" class="headerlink" title="2 字符串的常用运算"></a>2 字符串的常用运算</h4></li><li><p>（1）字符串可以用加号来拼接字符串，使用*号来重复字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello&quot;+&quot;world&quot;</span><br><span class="line">&#39;helloworld&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello&quot;*3</span><br><span class="line">&#39;hellohellohello&#39;</span><br></pre></td></tr></table></figure></li><li><p>（2）字符串可以通过下标获取具体的字符，下标从0开始，下标不允许超过边界</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; print(a[0])</span><br><span class="line">h</span><br><span class="line">&gt;&gt;&gt; print(a[2])</span><br><span class="line">l</span><br><span class="line">&gt;&gt;&gt; print(a[-1])</span><br><span class="line">d</span><br><span class="line">&gt;&gt;&gt; print(a[-3])</span><br><span class="line">r</span><br><span class="line">&gt;&gt;&gt; print(a[11])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">IndexError: string index out of range</span><br></pre></td></tr></table></figure></li><li><p>（3）字符串可以通过切片获取字符串的片段，坚持前闭后开的原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; print(a[0:4])</span><br><span class="line">hell</span><br><span class="line">&gt;&gt;&gt; print(a[1:3])</span><br><span class="line">el</span><br><span class="line">&gt;&gt;&gt; print(a[0:-1])</span><br><span class="line">hello worl</span><br><span class="line">&gt;&gt;&gt; print(a[0:10])</span><br><span class="line">hello worl</span><br></pre></td></tr></table></figure></li><li><p>（4）字符串中切片操作，右边界值允许炒作最大值，超过后表示取到最右边的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a[0:11])</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></li><li><p>（5）字符串切片操作可以使用三个参数，第三个参数表示步长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a[1:9:3])</span><br><span class="line">eoo</span><br></pre></td></tr></table></figure></li><li><p>（6）字符串切片操作的参数可以省略，省略第一个参数表示左侧从头开始取，省略第二参数，表示右侧到字符串末尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a[:3])</span><br><span class="line">hel</span><br><span class="line">&gt;&gt;&gt; print(a[3:])</span><br><span class="line">lo world</span><br><span class="line">&gt;&gt;&gt; print(a[::3])</span><br><span class="line">hlwl</span><br></pre></td></tr></table></figure></li><li><p>（7）字符串切片操作的参数中若第一个参数大于等于第二个参数，且第二个参数不为负数时，表示取出来的子串为空串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(a[5:1])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(a[10:0])</span><br></pre></td></tr></table></figure></li><li><p>（8）字符串可以通过in或者not in判断字符或者字符串是否在字符串中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;h&#39; in &quot;hello world&quot;</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &#39;z&#39; in &quot;hello world&quot;</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &#39;z&#39; not in &quot;hello world&quot;</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（9）通过len函数计算字符串的长度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; len(&quot;hello world&quot;)</span><br><span class="line">11</span><br></pre></td></tr></table></figure></li><li><p>（10）通过max和min计算字符串中的最小和最大的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; max(&quot;hello world&quot;)</span><br><span class="line">&#39;w&#39;</span><br><span class="line">&gt;&gt;&gt; min(&quot;hello world&quot;)</span><br><span class="line">&#39; &#39;</span><br></pre></td></tr></table></figure></li><li><p>（11）ord可以将字符转换为整数，chr可以将整数转换为字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; ord(&#39;a&#39;)</span><br><span class="line">97</span><br><span class="line">&gt;&gt;&gt; chr(90)</span><br><span class="line">&#39;Z&#39;</span><br></pre></td></tr></table></figure><h4 id="3-字符串常用的函数"><a href="#3-字符串常用的函数" class="headerlink" title="3 字符串常用的函数"></a>3 字符串常用的函数</h4></li><li><p>（1）capitalize() 将字符串首字母大写,其他字母变成小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello Word HeLLO WORd&quot;</span><br><span class="line">&gt;&gt;&gt; a.capitalize()</span><br><span class="line">&#39;Hello word hello word&#39;</span><br></pre></td></tr></table></figure></li><li><p>（2）lower() 将大写字母转换为小写字母(仅限ASCII编码范围内的语言)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;HEllo WorLD HelLO WoRLD&quot;</span><br><span class="line">&gt;&gt;&gt; a.lower()</span><br><span class="line">&#39;hello world hello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（3）casefold() 将大写字母转换为小写字母（ASCII编码范围外的语言也支持）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;HEllo WorLD HelLO WoRLD&quot;</span><br><span class="line">&gt;&gt;&gt; a.casefold()</span><br><span class="line">&#39;hello world hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;ß&quot;   # 德语</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#39;ß&#39;</span><br><span class="line">&gt;&gt;&gt; a.casefold()</span><br><span class="line">&#39;ss&#39;</span><br><span class="line">&gt;&gt;&gt; a.lower()</span><br><span class="line">&#39;ß&#39;</span><br></pre></td></tr></table></figure></li><li><p>（4）upper() 将小写字母转换为大写字母(仅限ASCII编码范围内的语言)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello Word HeLLO WORd&quot;</span><br><span class="line">&gt;&gt;&gt; a.upper()</span><br><span class="line">&#39;HELLO WORD HELLO WORD&#39;</span><br></pre></td></tr></table></figure></li><li><p>（5）swapcase() 将小写字母转换为大写字母,将原来大写的变为小写字母</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;HEllo WorLD HelLO WoRLD&quot;</span><br><span class="line">&gt;&gt;&gt; a.swapcase()</span><br><span class="line">&#39;heLLO wORld hELlo wOrld&#39;</span><br></pre></td></tr></table></figure></li><li><p>（6）title() 将字符串中每个单词的首字母大写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;HEllo WorLD HelLO WoRLD&quot;</span><br><span class="line">&gt;&gt;&gt; a.title()</span><br><span class="line">&#39;Hello World Hello World&#39;</span><br></pre></td></tr></table></figure></li><li><p>（7）strip(chars=None) 如果chars不填，则去除字符串两端的空格，如果chars指定了字符，则去除字符串两端的chars指定的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;   hello world    &quot;</span><br><span class="line">&gt;&gt;&gt; a.strip()</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hahahahello world hello world hahahaha&quot;</span><br><span class="line">&gt;&gt;&gt; a.strip(&quot;ha&quot;)</span><br><span class="line">&#39;ello world hello world &#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hahahahaahello world hahahaha&quot;</span><br><span class="line">&gt;&gt;&gt; a.strip(&quot;ha&quot;)</span><br><span class="line">&#39;ello world &#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world gogole world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.strip(&quot;olhe&quot;)</span><br><span class="line">&#39; world gogole world &#39;</span><br></pre></td></tr></table></figure></li><li><p>（8）lstrip(chars=None)，和strip功能类似，只不过lstrip只去除字符串左边空格或者chars指定的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;  hello world   &quot;</span><br><span class="line">&gt;&gt;&gt; a.lstrip()</span><br><span class="line">&#39;hello world   &#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.lstrip(&quot;elho&quot;)</span><br><span class="line">&#39; world hello&#39;</span><br></pre></td></tr></table></figure></li><li><p>（9）rstrip(chars=None)，和strip功能类似，只不过rstrip只去除字符串右边空格或者chars指定的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot; hello world &quot;</span><br><span class="line">&gt;&gt;&gt; a.rstrip()</span><br><span class="line">&#39; hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.rstrip(&quot;elho&quot;)</span><br><span class="line">&#39;hello world &#39;</span><br></pre></td></tr></table></figure></li><li><p>（10）rjust(width,fillchar=’ ‘),返回一个原字符串右对齐，并使用fillchar指定的字符填充至width长度的字符串，fillchar不指定时默认为空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rjust(20)</span><br><span class="line">&#39;         hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a.rjust(20,&#39;x&#39;)</span><br><span class="line">&#39;xxxxxxxxxhello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（11）ljust(width,fillchar=’ ‘)，返回一个原字符串左对齐，并使用fillchar指定的字符填充至width长度的字符串，fillchar不指定时默认为空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.ljust(20)</span><br><span class="line">&#39;hello world         &#39;</span><br><span class="line">&gt;&gt;&gt; a.ljust(20,&#39;x&#39;)</span><br><span class="line">&#39;hello worldxxxxxxxxx&#39;</span><br></pre></td></tr></table></figure></li><li><p>（12）center(width,fillchar=’ ‘)，返回一个原字符串居中对齐，并使用fillchar指定的字符填充到width长度的字符串，fillchar不指定时默认为空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.center(20)</span><br><span class="line">&#39;    hello world     &#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.center(20,&#39;x&#39;)</span><br><span class="line">&#39;xxxxhello worldxxxxx&#39;</span><br></pre></td></tr></table></figure></li><li><p>（13）count(sub,start=0,end=len(string))，返回字符串包含子串的数量，可以指定查询的起始位置和结束位置，不指定则默认为整个字符串中计数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.count(&#39;l&#39;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; a.count(&#39;l&#39;,1,5)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.count(&quot;hello&quot;)</span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>（14）index(sub,start=0,end=len(string))，返回字符串中查找到的第一个子串的起始位置索引值，可以指定查找起始和结束范围，若查找不到则报ValueError的异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.index(&#39;h&#39;)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; a.index(&#39;x&#39;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ValueError: substring not found</span><br><span class="line">&gt;&gt;&gt; a.index(&#39;l&#39;,5,20)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.index(&quot;world&quot;)</span><br></pre></td></tr></table></figure></li><li><p>（15）rindex(sub,start=0,end=len(string)) 返回字符串中查找到的最后一个子串的起始位置的索引值，可以指定查找起始和结束范围，若查找不到则报ValueError的异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rindex(&quot;l&quot;)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; a.rindex(&quot;l&quot;,0,5)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello&quot;</span><br><span class="line">&gt;&gt;&gt; a.rindex(&quot;world&quot;)</span><br><span class="line">18</span><br></pre></td></tr></table></figure></li><li><p>（16）find(sub,start=0,end=len(string)) 返回字符串中查找到的第一个子串的起始位置索引值，可以指定查找起始和结束范围，若查找不到则返回-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.find(&#39;l&#39;)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; a.find(&#39;x&#39;)</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; a.find(&#39;l&#39;,6,10)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.find(&quot;world&quot;)</span><br><span class="line">6</span><br></pre></td></tr></table></figure></li><li><p>（17）rfind(sub,start=0,end=len(string)) 返回字符串中查找到最后一个子串的起始位置索引，可以指定查找起始和结束范围，若查找不到则返回-1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rfind(&#39;l&#39;)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; a.rfind(&#39;x&#39;)</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; a.rfind(&#39;l&#39;,1,6)</span><br><span class="line">3</span><br></pre></td></tr></table></figure></li><li><p>（18）split(rep=None,maxsplit=-1) 将字符串根据sep分割，如果sep不填则默认使用空格分割，如果maxsplt不指定则默认将根据字符串中所有的sep分割，否则分割指定的数目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.split()</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.split(&quot; &quot;,2)</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;hello world hello world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.split(&quot;world&quot;)</span><br><span class="line">[&#39;hello &#39;, &#39; hello &#39;, &#39; hello &#39;, &#39;&#39;]</span><br><span class="line">&gt;&gt;&gt; a.split(&#39;x&#39;)</span><br><span class="line">[&#39;hello world hello world hello world&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（19）split(rep=None,maxsplit=-1) 将字符串从右侧开始根据sep分割，如果sep不填则默认使用空格分割，如果maxsplt不指定则默认将根据字符串中所有的sep分割，否则分割指定的数目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rsplit()</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.rsplit(&quot; &quot;)</span><br><span class="line">[&#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.rsplit(&quot; &quot;,2)</span><br><span class="line">[&#39;hello world hello world&#39;, &#39;hello&#39;, &#39;world&#39;]</span><br><span class="line">&gt;&gt;&gt; a.rsplit(&quot;world&quot;)</span><br><span class="line">[&#39;hello &#39;, &#39; hello &#39;, &#39; hello &#39;, &#39;&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（20）splitlines(keepends=False) 按照换行符（\r,\r\n,\n)分割，如果keepends不填默认为False，则返回的每一行没有回车符，如果keepends设置为True则每一行带有换行符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world 01\n hello world 02\r hello world 03 \r\n hello world 04&quot;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&#39;hello world 01\n hello world 02\r hello world 03 \r\n hello world 04&#39;</span><br><span class="line">&gt;&gt;&gt; a.splitlines()</span><br><span class="line">[&#39;hello world 01&#39;, &#39; hello world 02&#39;, &#39; hello world 03 &#39;, &#39; hello world 04&#39;]</span><br><span class="line">&gt;&gt;&gt; a.splitlines(True)</span><br><span class="line">[&#39;hello world 01\n&#39;, &#39; hello world 02\r&#39;, &#39; hello world 03 \r\n&#39;, &#39; hello world 04&#39;]</span><br></pre></td></tr></table></figure></li><li><p>（21）partition(sep) 根据指定的sep将字符串分割，返回一个三元组，第一个元素为分割符左边的部门，第二个元素为分隔符本身，第三个元素为分隔符有点的部分，若字符串中没有找到分隔符sep，则返回一个三元组,第一个元素为字符串本身，第二个第三个为空字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.partition(&quot; &quot;)</span><br><span class="line">(&#39;hello&#39;, &#39; &#39;, &#39;world hello world&#39;)</span><br><span class="line">&gt;&gt;&gt; a.partition(&#39;x&#39;)</span><br><span class="line">(&#39;hello world hello world&#39;, &#39;&#39;, &#39;&#39;)</span><br></pre></td></tr></table></figure></li><li><p>（22）rpartition(sep) 根据指定的sep将字符串从右侧开始查找并分割，返回一个三元组，第一个元素为分割符左边的部门，第二个元素为分隔符本身，第三个元素为分隔符有点的部分，若字符串中没有找到分隔符sep，则返回一个三元组,第一个元素为字符串本身，第二个第三个为空字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a&#x3D;&quot;hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.rpartition(&quot; &quot;)</span><br><span class="line">(&#39;hello world hello&#39;, &#39; &#39;, &#39;world&#39;)</span><br></pre></td></tr></table></figure></li><li><p>（23）replace(old,new,count=-1) 将字符串中的old替换为new，如果不指定count则全部替换，否则按照count指定的数目替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world hello world hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.replace(&quot;hello&quot;,&quot;Hello&quot;)</span><br><span class="line">&#39;Hello world Hello world Hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a.replace(&quot;hello&quot;,&quot;Hello&quot;,1)</span><br><span class="line">&#39;Hello world hello world hello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（24）zfill(width) 将字符串用0填充至width指定的长度，若指定的长度比字符串长度还小，则不作任何操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.zfill(20)</span><br><span class="line">&#39;000000000hello world&#39;</span><br><span class="line">&gt;&gt;&gt; a.zfill(4)</span><br><span class="line">&#39;hello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（25）join(iterable) 将列表中的元素以指定的字符连接为新的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;[&quot;hello&quot;,&quot;world&quot;,&quot;hello&quot;,&quot;world&quot;,&quot;hello&quot;,&quot;world&quot;]</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.join(a)</span><br><span class="line">&#39;hello world hello world hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;x&#39;.join(a)</span><br><span class="line">&#39;helloxworldxhelloxworldxhelloxworld&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;\n&#39;.join(a)</span><br><span class="line">&#39;hello\nworld\nhello\nworld\nhello\nworld&#39;</span><br></pre></td></tr></table></figure></li><li><p>（26）format() 字符串格式化</p><ul><li>1） format使用位置对字符串进行字符串进行变量替换<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;&#123;&#125; &#123;&#125;&quot;.format(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;0&#125; &#123;1&#125;&quot;.format(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;.format(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&#39;world hello world&#39;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>2）使用参数指定对字符串进行变量替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;&#123;v1&#125; &#123;v2&#125;&quot;.format(v1&#x3D;&quot;hello&quot;,v2&#x3D;&quot;world&quot;)</span><br><span class="line">&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;v1&#125; this is a string &#123;v2&#125;&quot;.format(v2&#x3D;&quot;world&quot;,v1&#x3D;&quot;hello&quot;)</span><br><span class="line">&#39;hello this is a string world&#39;</span><br></pre></td></tr></table></figure></li><li><p>3）数字格式化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;3.141592653</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:.2f&#125;&quot;.format(a)</span><br><span class="line">&#39;3.14&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:+.2f&#125;&quot;.format(a)</span><br><span class="line">&#39;+3.14&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:.0f&#125;&quot;.format(a)</span><br><span class="line">&#39;3&#39;</span><br><span class="line">&gt;&gt;&gt; a&#x3D;1000000000</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:0&gt;12d&#125;&quot;.format(a)</span><br><span class="line">&#39;001000000000&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:x&lt;12d&#125;&quot;.format(a)</span><br><span class="line">&#39;1000000000xx&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:,&#125;&quot;.format(a)</span><br><span class="line">&#39;1,000,000,000&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:.2e&#125;&quot;.format(a)</span><br><span class="line">&#39;1.00e+09&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:&gt;15d&#125;&quot;.format(a)</span><br><span class="line">&#39;     1000000000&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:&lt;15d&#125;&quot;.format(a)</span><br><span class="line">&#39;1000000000     &#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:^15d&#125;&quot;.format(a)</span><br><span class="line">&#39;  1000000000   &#39;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;:.2%&#125;&quot;.format(0.25)</span><br><span class="line">&#39;25.00%&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:b&#125;&#39;.format(11)</span><br><span class="line">&#39;1011&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:d&#125;&#39;.format(11)</span><br><span class="line">&#39;11&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:o&#125;&#39;.format(11)</span><br><span class="line">&#39;13&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:x&#125;&#39;.format(11)</span><br><span class="line">&#39;b&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:#x&#125;&#39;.format(11)</span><br><span class="line">&#39;0xb&#39;</span><br><span class="line">&gt;&gt;&gt; &#39;&#123;:#X&#125;&#39;.format(11)</span><br><span class="line">&#39;0XB&#39;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>（27）format_map() 使用字典格式的数据对字符串进行变量替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; info&#x3D;&#123;&quot;v1&quot;:&quot;hello&quot;,&quot;v2&quot;:&quot;world&quot;&#125;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;v1&#125; &#123;v2&#125;&quot;.format_map(info)</span><br><span class="line">&#39;hello world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（28）encode(encoding=”utf-8”,errors=’strict’) 以指定的编码格式编码字符串，默认的是utf-8，errors指定不同的错误处理方案</p><p> strict意为编码错误引起一个UnicodeError，其他可选的值有： ‘ignore’, ‘replace’, ‘xmlcharrefreplace’, ‘backslashreplace’ 以及通过 codecs.register_error() 注册的任何值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.encode(&quot;utf-8&quot;)</span><br><span class="line">b&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.encode(&quot;gbk&quot;)</span><br><span class="line">b&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.encode(&quot;ascii&quot;)</span><br><span class="line">b&#39;hello world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;你好，世界！&quot;.encode(&quot;utf-8&quot;)</span><br><span class="line">b&#39;\xe4\xbd\xa0\xe5\xa5\xbd\xef\xbc\x8c\xe4\xb8\x96\xe7\x95\x8c\xef\xbc\x81&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;你好，世界！&quot;.encode(&quot;gbk&quot;)</span><br><span class="line">b&#39;\xc4\xe3\xba\xc3\xa3\xac\xca\xc0\xbd\xe7\xa3\xa1&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;你好，世界！&quot;.encode(&quot;ascii&quot;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode characters in position 0-5: ordinal not in range(128)</span><br><span class="line">&gt;&gt;&gt; &quot;你好，世界！&quot;.encode(&quot;ascii&quot;,&quot;ignore&quot;)</span><br><span class="line">b&#39;&#39;</span><br></pre></td></tr></table></figure></li><li><p>（29）maketrans() 创建字符映射的转换表，可以是一个参数，一个参数是时必须为字典dict，返回的类型为dict，key和value均用Unicode编码表示，也可以接受两个参数，如果是两个参数，则两个参数的类型为字符串str类型，并且两个参数的额字符串长度相同，以此来建立对应位置的映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; str.maketrans(&#123;&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3&#125;)</span><br><span class="line">&#123;97: 1, 98: 2, 99: 3&#125;</span><br><span class="line">&gt;&gt;&gt; str.maketrans(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&#123;104: 119, 101: 111, 108: 108, 111: 100&#125;</span><br></pre></td></tr></table></figure></li><li><p>（30）translate(table) 根据maketrans生成的映射表对字符串进行字符替换，如果转换表中字符对应的value值为None的，则在此字符串中删除此字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; table&#x3D;str.maketrans(&quot;hello&quot;,&quot;world&quot;)</span><br><span class="line">&gt;&gt;&gt; &quot;hello world hello world&quot;.translate(table)</span><br><span class="line">&#39;wolld wdrld wolld wdrld&#39;</span><br><span class="line">&gt;&gt;&gt; table&#x3D;str.maketrans(&#123;&quot;h&quot;:&quot;w&quot;,&quot;e&quot;:None,&quot;l&quot;:&quot;o&quot;,&quot;o&quot;:None&#125;)</span><br><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.translate(table)</span><br><span class="line">&#39;woo wrod&#39;</span><br></pre></td></tr></table></figure></li><li><p>（31）expandtabs(tabsize=8) 吧字符串中的tab字符\t转换为指定数量的空格，默认为8个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello\tworld&quot;.expandtabs(tabsize&#x3D;8)</span><br><span class="line">&#39;hello   world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello\tworld&quot;.expandtabs(tabsize&#x3D;4)</span><br><span class="line">&#39;hello   world&#39;</span><br><span class="line">&gt;&gt;&gt; &quot;hello\tworld&quot;.expandtabs(tabsize&#x3D;16)</span><br><span class="line">&#39;hello           world&#39;</span><br></pre></td></tr></table></figure></li><li><p>（32）startswith(prefix,start=0,end=len(string)) 判断字符串是否已给定的prefix为起始，如果是返回True，否则返回False，同时可以指定判断起始的位置。start和end默认为0和字符串的长度.</p><p> prefix还可以是一个有字符串元素组成的元组，只要有一个匹配上，即返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot;h&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot;hello&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot; &quot;,5,10)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith(&quot; &quot;,3,10)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; a.startswith((&quot;haha&quot;,&quot;hehe&quot;,&quot;h&quot;,&quot;w&quot;))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.startswith((&quot;haha&quot;,&quot;hehe&quot;,&quot;m&quot;,&quot;w&quot;))</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（33）endswith(suffix,start=0,end=len(string)) 判断字符串是否已给定的suffix为结尾，如果是返回True，否则返回False，同时可以指定判断起始的位置。start和end默认为0和字符串的长度.</p><p> suffix还可以是一个有字符串元素组成的元组，只要有一个匹配上，即返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a&#x3D;&quot;hello world&quot;</span><br><span class="line">&gt;&gt;&gt; a.endswith(&quot;d&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.endswith(&quot;world&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.endswith(&quot;d&quot;,0,4)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; a.endswith((&quot;hello&quot;,&quot;heheh&quot;,&quot;word&quot;,&quot;wd&quot;,&quot;d&quot;))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a.endswith((&quot;hello&quot;,&quot;heheh&quot;,&quot;word&quot;,&quot;wd&quot;,&quot;h&quot;))</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（34）isupper() 如果字符串的所有字符都是大写，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;HELLO&quot;.isupper()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;HeLLO&quot;.isupper()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;HELLO WORLD&quot;.isupper()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.isupper()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（35）islower() 如果字符串的所有字符都是小写，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.islower()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;Hello world&quot;.islower()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.islower()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（36）istitle() 判断字符串中是否每个单词的首字母都睡大写，如果是返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;Hello World&quot;.istitle()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;Hello world&quot;.istitle()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（37）isspace() 如果字符串中的所有的字符都是空格，并且至少有一个字符，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;&quot;.isspace()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.isspace()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;    &quot;.isspace()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;\t&quot;.isspace()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;\n&quot;.isspace()</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（38）isprintable() 如果字符串中所有字符都可打印返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello &quot;.isprintable()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot; &quot;.isprintable()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;.isprintable()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;\t&quot;.isprintable()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;\n&quot;.isprintable()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;\r&quot;.isprintable()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;hello\nworld&quot;.isprintable()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（39）isnumeric() 如果字符串中所有字符均有数字组成，返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello&quot;.isnumeric()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;1234567890&quot;.isnumeric()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;0123&quot;.isnumeric()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot; 0234 &quot;.isnumeric()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;.isnumeric()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（40）isidentifier() 判断字符串是否为python的有效的标识符,python有效的额标识符为字母或下划线开头，由数字字母和下划线组成的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello&quot;.isidentifier()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;def&quot;.isidentifier()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;1abc&quot;.isidentifier()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;class&quot;.isidentifier()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;a-b&quot;.isidentifier()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（41）isdigit() 如果字符串中所有字符均有数字组成，返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;123&quot;.isdigit()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;a12&quot;.isdigit()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;0123&quot;.isdigit()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;.isdigit()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（42）isdecimal() 如果字符串中所有字符均有十进制字符组成，返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;0123456789&quot;.isdecimal()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;0b11&quot;.isdecimal()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;a0&quot;.isdecimal()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（43）isascii() 如果字符串中所有字符均为ascii范围内编码，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.isascii()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;你好&quot;.isascii()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（44）isalpha() 如果字符串中至少有一个字符并且所有字符都是字母，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.isalpha()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;helloworld&quot;.isalpha()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;abc123&quot;.isalpha()</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（45）isalnum() 如果字符串中每个字符都是由字母或者数字组成，则返回True，否则返回False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;hello world&quot;.isalnum()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; &quot;helloworld&quot;.isalnum()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;abc123&quot;.isalnum()</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(3)--python的基本类型-数字</title>
      <link href="/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E6%95%B0%E5%AD%97/"/>
      <url>/blog/2020/07/22/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(3)--python%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B-%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<p>数字：主要包括整数浮点数、布尔类型、复数</p><h4 id="1-整形和浮点型"><a href="#1-整形和浮点型" class="headerlink" title="1 整形和浮点型"></a>1 整形和浮点型</h4><ul><li>整数： int</li><li>浮点数： float</li></ul><p>注意：python3中没有long这种数据类型，python2中是有的</p><ul><li><p>(1)使用type函数可以查看数据的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(1)</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(-1)</span><br><span class="line">&lt;class &#39;int&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(1.1)</span><br><span class="line">&lt;class &#39;float&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（2）在交互式环境中数字四则运算可立即显示出结果，即所见即所得，这里需要注意的是 / 和 // 运算的区别，/运算的结果是float类型，而//的结果是向下取整</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 1+1</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 2*3</span><br><span class="line">6</span><br><span class="line">&gt;&gt;&gt; 4-3</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 5&#x2F;3</span><br><span class="line">1.6666666666666667</span><br><span class="line">&gt;&gt;&gt; 5&#x2F;&#x2F;3</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; -1&#x2F;&#x2F;2</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; 1&#x2F;&#x2F;-2</span><br><span class="line">-1</span><br><span class="line">&gt;&gt;&gt; -1&#x2F;&#x2F;-2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="2-各种进制之间的数据使用与转换"><a href="#2-各种进制之间的数据使用与转换" class="headerlink" title="2 各种进制之间的数据使用与转换"></a>2 各种进制之间的数据使用与转换</h4></li><li><p>（1）各种进制在python中表示方法：二进制以0b开头，八进制以0o开头，十六进制以0x开头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 0b10</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 0b11</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; 0o10</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt; 0o11</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; 0x10</span><br><span class="line">16</span><br><span class="line">&gt;&gt;&gt; 0x11</span><br><span class="line">17</span><br><span class="line">&gt;&gt;&gt; 10</span><br><span class="line">10</span><br><span class="line">&gt;&gt;&gt; 11</span><br><span class="line">11</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（2）各种进制数向二进制转换，使用bin函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bin(10)</span><br><span class="line">&#39;0b1010&#39;</span><br><span class="line">&gt;&gt;&gt; bin(0o10)</span><br><span class="line">&#39;0b1000&#39;</span><br><span class="line">&gt;&gt;&gt; bin(0x10)</span><br><span class="line">&#39;0b10000&#39;</span><br></pre></td></tr></table></figure></li><li><p>（3）各种进制数向十进制转换，使用int函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(0b10)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; int(0o10)</span><br><span class="line">8</span><br><span class="line">&gt;&gt;&gt; int(0x10)</span><br><span class="line">16</span><br></pre></td></tr></table></figure></li><li><p>（4）各种进制向十六进制转换，使用hex函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; hex(0b10)</span><br><span class="line">&#39;0x2&#39;</span><br><span class="line">&gt;&gt;&gt; hex(10)</span><br><span class="line">&#39;0xa&#39;</span><br><span class="line">&gt;&gt;&gt; hex(0o10)</span><br><span class="line">&#39;0x8&#39;</span><br></pre></td></tr></table></figure></li><li><p>（5）各种进制数向八进制转换，使用oct函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; oct(0b10)</span><br><span class="line">&#39;0o2&#39;</span><br><span class="line">&gt;&gt;&gt; oct(10)</span><br><span class="line">&#39;0o12&#39;</span><br><span class="line">&gt;&gt;&gt; oct(0x10)</span><br><span class="line">&#39;0o20&#39;</span><br></pre></td></tr></table></figure><h4 id="3-布尔类型"><a href="#3-布尔类型" class="headerlink" title="3 布尔类型"></a>3 布尔类型</h4></li><li><p>（1）在python中，布尔值有True和False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; True</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; False</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; true</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">NameError: name &#39;true&#39; is not defined</span><br></pre></td></tr></table></figure></li><li><p>（2）使用type函数测试True和False的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(True)</span><br><span class="line">&lt;class &#39;bool&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(False)</span><br><span class="line">&lt;class &#39;bool&#39;&gt;</span><br></pre></td></tr></table></figure></li><li><p>（3）使用int函数观察True和False代表的整数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; int(True)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; int(False)</span><br><span class="line">0</span><br></pre></td></tr></table></figure></li><li><p>（4）数字中，非零的数转换为布尔类型均为True，只有零转换为布尔值为False，使用bool函数即可验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(1)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(0)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(-1)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(2)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(0.1)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（5）在字符串类型中，只有空字符串转换为布尔类型为False，非空字符串转换为布尔类型时均为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(&quot;abc&quot;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(&quot;&quot;)</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（6）在列表类型中，只有空列表转换为布尔类型为False，非空列表转换为布尔类型时均为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool([1,2,3])</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool([]) </span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（7）在元组中，当元组为空时转换为布尔类型为False，非空时则表示的True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool((1,2,3))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; bool(())</span><br><span class="line">False</span><br></pre></td></tr></table></figure></li><li><p>（8）在字典中，但当字典中没有键值对时，转换为布尔类型为False，当字典中存在键值对时，则布尔值为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(&#123;&#125;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(&#123;&quot;a&quot;:1&#125;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（9）在集合中，当集合中没有元素时，代表的布尔值为False，当集合中存在元素时，其代表的布尔值为True</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(&#123;&#125;)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; bool(&#123;1,2,3,4&#125;)</span><br><span class="line">True</span><br></pre></td></tr></table></figure></li><li><p>（10）在python中，None值代表的布尔值为False</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; bool(None)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h4 id="4-复数"><a href="#4-复数" class="headerlink" title="4 复数"></a>4 复数</h4><p>复数在平时代码开发中使用不是太多，了解即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 36j</span><br><span class="line">36j</span><br><span class="line">&gt;&gt;&gt; 1+4j</span><br><span class="line">(1+4j)</span><br><span class="line">&gt;&gt;&gt; (1+4j)*(2-3j)</span><br><span class="line">(14+5j)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(1)--python简介</title>
      <link href="/blog/2020/07/20/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--python%E7%AE%80%E4%BB%8B/"/>
      <url>/blog/2020/07/20/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(1)--python%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="1-python与python特点："><a href="#1-python与python特点：" class="headerlink" title="1 python与python特点："></a>1 python与python特点：</h4><ul><li>Python是一种编程语言</li><li>语法简介、优雅，追求pythonic风格—-人生苦短，我用Python</li><li>跨平台，可以运行在Windows、Linux以及MacOS</li><li>易于学习，相对于C/C++，Java，C#，Go等，Python学习起来最简单</li><li>极为强大而丰富的标准库和第三方库，通俗点说轮子超多</li><li>Python是面向对象的语言</li></ul><h4 id="2-python能做什么？"><a href="#2-python能做什么？" class="headerlink" title="2 python能做什么？"></a>2 python能做什么？</h4><ul><li>爬虫</li><li>大数据与数据分析（Spark）</li><li>自动化测试与自动化运维</li><li>Web开发：Flask，Django</li><li>机器学习：TensorFlow（深度学习框架）</li><li>科学计算</li><li>胶水语言：缓和其他如C++,Java来编程</li></ul><h4 id="3-python之禅"><a href="#3-python之禅" class="headerlink" title="3 python之禅"></a>3 python之禅</h4><ul><li>1） Simple is better than complex  简洁胜于复杂</li><li>2） Now is better than never.Although newver is often than right now 做也许好过不做，但不假思索就动手还不如不做</li><li>3） Life is short,I use Python 人生苦短，我用Python</li></ul><h4 id="4-为什么喜欢python"><a href="#4-为什么喜欢python" class="headerlink" title="4 为什么喜欢python"></a>4 为什么喜欢python</h4><ul><li>1） 简洁，灵活，优雅，哲学</li><li>2） 易于上手，难于精通</li><li>3） Python既有动态脚本的特性，又有面向对象的特性</li></ul><h4 id="5-Python的缺点"><a href="#5-Python的缺点" class="headerlink" title="5 Python的缺点"></a>5 Python的缺点</h4><ul><li>1） 相对于C,C++,Java，运行效率较慢</li></ul><h4 id="6-常见语言的特点对比"><a href="#6-常见语言的特点对比" class="headerlink" title="6 常见语言的特点对比"></a>6 常见语言的特点对比</h4><ul><li>1） 运行效率从高到低：C，C++，Go，Java，Python</li><li>2） 开发效率从高到低：Python，Go，Java，C++，C</li></ul>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础系列(2)--Python环境的安装-miniconda的使用</title>
      <link href="/blog/2020/07/10/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--Python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-miniconda%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/07/10/python%E5%9F%BA%E7%A1%80%E7%B3%BB%E5%88%97(2)--Python%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-miniconda%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Miniconda是做什么用的？"><a href="#1、Miniconda是做什么用的？" class="headerlink" title="1、Miniconda是做什么用的？"></a>1、Miniconda是做什么用的？</h2><p>简单点来说，miniconda是为了方便的创建多个python虚拟环境，方便多个python项目同时开发的时候，每个项目都有自己独立的python开发环境，可以理解为virtualenv的高级版，使用起来非常方便</p><h2 id="2、win10下如何下载安装？"><a href="#2、win10下如何下载安装？" class="headerlink" title="2、win10下如何下载安装？"></a>2、win10下如何下载安装？</h2><ul><li><p>打开miniconda官网地址，根据操作系统位数选择，这里选择windows系统下64位，python3.7版本的软件安装包，然后点击即可下载<br><a href="https://docs.conda.io/en/latest/miniconda.html" target="_blank" rel="noopener">https://docs.conda.io/en/latest/miniconda.html</a></p></li><li><p>下载完成后，然后找到下载的安装文件Miniconda3-latest-Windows-x86_64.exe，然后【右键】-【以管理员权限运行】，在选择install for的步骤时，选择【all users】，安装路径推荐放在D:/Miniconda  路径下（尽量不要安装到C盘，因为C盘是系统盘，选择将Miniconda3天假到系统环境变量中，其他步骤中均保持默认即可</p></li></ul><h2 id="3、Miniconda如何使用？"><a href="#3、Miniconda如何使用？" class="headerlink" title="3、Miniconda如何使用？"></a>3、Miniconda如何使用？</h2><ul><li>创建python虚拟环境：</li></ul><p>比如这里创建一个名称为Test1Env的虚拟环境，指定其python版本为3.8.3，则打开cmd窗口，然后执行如下命令，遇到提示继续输入y即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n Test1Env python&#x3D;3.8.3</span><br></pre></td></tr></table></figure><ul><li>查看当前已经安装的虚拟环境列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure><ul><li>激活指定名称的虚拟环境</li></ul><p>比如激活名称为Test1ENV的虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate Test1Env</span><br></pre></td></tr></table></figure><ul><li>退出当前环境</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure><ul><li>删除虚拟环境</li></ul><p>比如删除名称为Test1Env的虚拟环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda env remove -n Test1Env</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 基础语法</title>
      <link href="/blog/2020/07/10/markdown-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/blog/2020/07/10/markdown-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h2><p>一个#号是一级标题，二个#号是二级标题，以此类推，支持六级</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题 </span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h5 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h5><h2 id="2、字体"><a href="#2、字体" class="headerlink" title="2、字体"></a>2、字体</h2><ul><li>加粗</li></ul><p>要加粗的文字左右分别用两个*括起来</p><ul><li>斜体</li></ul><p>要斜体的文字左右分别用一个*括起来</p><ul><li>斜体加粗</li></ul><p>要倾斜和加粗的文字左右分别用三个*括起来</p><ul><li>删除线</li></ul><p>要加删除线的文字左右分别用两个~括起来</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**这是要加粗的文字**</span><br><span class="line">*这是要倾斜的文字*</span><br><span class="line">***这是要倾斜并且加粗的文字***</span><br><span class="line">~~这是要加删除线的文字~~</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是要加粗的文字</strong></p><p><em>这是要倾斜的文字</em></p><p><strong><em>这是要倾斜并且加粗的文字</em></strong></p><p><del>这是要加删除线的文字</del></p><h2 id="3、引用"><a href="#3、引用" class="headerlink" title="3、引用"></a>3、引用</h2><p>在应用的文字前加 &gt; 即可</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是应用的内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p></blockquote><h2 id="4、分割线"><a href="#4、分割线" class="headerlink" title="4、分割线"></a>4、分割线</h2><p>三个或三个以上的-或者* 都可以</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">****</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><hr><h2 id="5、图片"><a href="#5、图片" class="headerlink" title="5、图片"></a>5、图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![blockchain](https:&#x2F;&#x2F;ss0.bdstatic.com&#x2F;70cFvHSh_Q1YnxGkpoWK1HF6hhy&#x2F;it&#x2F;</span><br><span class="line">u&#x3D;702257389,1274025419&amp;fm&#x3D;27&amp;gp&#x3D;0.jpg &quot;区块链&quot;)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>![blockchain](<a href="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/" target="_blank" rel="noopener">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a><br>u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)</p><h2 id="6、超链接"><a href="#6、超链接" class="headerlink" title="6、超链接"></a>6、超链接</h2><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">title可加可不加</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[简书](http:&#x2F;&#x2F;jianshu.com)</span><br><span class="line">[百度](http:&#x2F;&#x2F;baidu.com)</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="http://jianshu.com" target="_blank" rel="noopener">简书</a></p><p><a href="http://baidu.com" target="_blank" rel="noopener">百度</a></p><h3 id="7、列表"><a href="#7、列表" class="headerlink" title="7、列表"></a>7、列表</h3><ul><li>无序列表</li></ul><p>语法：无需列表用- * + 任何一种都可以</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br></pre></td></tr></table></figure><p>注意：- + * 跟内容之间都要有一个空格</p><p>效果如下：</p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li><p>列表内容</p></li><li><p>有序列表</p></li></ul><p>语法：数字加点</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br></pre></td></tr></table></figure><p>注意：序号跟内容之间要有空格</p><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><ul><li>列表嵌套</li></ul><p>上一级和下一级敲三个空格即可</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 一级无序列表</span><br><span class="line">   * 二级无序列表</span><br><span class="line">   * 二级无序列表</span><br><span class="line">   * 二级无序列表</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>一级无序列表<ul><li>二级无序列表</li><li>二级无序列表</li><li>二级无序列表</li></ul></li></ul><h2 id="8、表格"><a href="#8、表格" class="headerlink" title="8、表格"></a>8、表格</h2><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|姓名|技能|排行|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|刘备|哭|大哥|</span><br><span class="line">|关羽|打|二哥|</span><br><span class="line">|张飞|骂|三弟|</span><br></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th align="left">姓名</th><th align="center">技能</th><th align="right">排行</th></tr></thead><tbody><tr><td align="left">刘备</td><td align="center">哭</td><td align="right">大哥</td></tr><tr><td align="left">关羽</td><td align="center">打</td><td align="right">二哥</td></tr><tr><td align="left">张飞</td><td align="center">骂</td><td align="right">三弟</td></tr></tbody></table><h2 id="9、代码"><a href="#9、代码" class="headerlink" title="9、代码"></a>9、代码</h2><p>语法：</p><p>单行代码：代码之间分别用一个反引号包起来</p><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;print(111)&#96;</span><br></pre></td></tr></table></figure><p>效果：</p><p><code>print(111)</code></p><p>示例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(&#96;&#96;&#96;)</span><br><span class="line">    if a&gt;1:</span><br><span class="line">        print(11111)</span><br><span class="line">    else:</span><br><span class="line">        print(22222)</span><br><span class="line">(&#96;&#96;&#96;)</span><br></pre></td></tr></table></figure><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p><p>效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if a&gt;1:</span><br><span class="line">    print(11111)</span><br><span class="line">else:</span><br><span class="line">    print(22222)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 公共基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公共基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
